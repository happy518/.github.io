<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亦彤blog</title>
  
  
  <link href="https://theme-next.js.org/atom.xml" rel="self"/>
  
  <link href="https://theme-next.js.org/"/>
  <updated>2023-04-03T04:20:58.274Z</updated>
  <id>https://theme-next.js.org/</id>
  
  <author>
    <name>yangpengbing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql学习笔记-详细介绍innodb内存结构</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-024/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-024/</id>
    <published>2023-04-01T15:03:36.000Z</published>
    <updated>2023-04-03T04:20:58.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="heap-number"><a href="#heap-number" class="headerlink" title="heap number"></a>heap number</h2><ul><li><p>heap number表示的是页中每个记录插入的顺序序号</p><ul><li>假设插入的数据是 a，b，d，e，g；则对应的heap_number是2，3，4，5，6</li><li>0和1被infimun和supermum所使用<ul><li>infimun对应最小的heap_number</li><li>supermum对应最大的head_number，随着数据的插入，该值会被更新</li></ul></li><li>update对head_number没有影响</li><li>heap_number是物理的，存储在row的record header字段中</li></ul><p><img src="/mysql/learn-mysql-024/image-20230401231752713.png" alt="image-20230401231752713" loading="lazy"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 5 -R 127 record-dump</span></span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-024/image-20230401231917442.png" alt="image-20230401231917442" style="zoom:50%;"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engine innodb status; ## 查看锁信息</span><br></pre></td></tr></table></figure></li></ul><h2 id="缓冲池-buffer-bool"><a href="#缓冲池-buffer-bool" class="headerlink" title="缓冲池(buffer bool)"></a>缓冲池(buffer bool)</h2><ul><li><p><strong>缓冲池介绍</strong></p><ul><li>每次读写数据都是通过buffer pool<ul><li>当buffer pool中没有用户所需要的数据是，才会从磁盘中获取</li></ul></li><li>通过innodb_buffer_pool_size设置总容量，该值越大越好</li><li>innodb_buffer_pool_instances设置为多少个缓冲池<ul><li>总容量还是innodb_buffer_size</li><li>设置多少个instances可将热点数据分散，提高并发性能(建议设置成cpu个数)</li></ul></li><li>buffer pool是以页为单位进行管理的，且大小和innodb_page_size一致</li></ul><p><img src="/mysql/learn-mysql-024/image-20230401232957861.png" alt="image-20230401232957861" loading="lazy"></p></li><li><p><strong>buffer pool性能测试</strong></p><p><img src="/mysql/learn-mysql-024/image-20230401233221806.png" alt="image-20230401233221806" loading="lazy"></p><blockquote><p>18G的测试数据，80M条记录</p><ol><li>当buffer pool使用的内存超过数据库大小时，比如20G(数据库中所有数据都在内存中)，此时的性能有很大的提升。</li><li>该图测试的TPS(每秒事务数)，sysbench中一个事务有18条sql组成，即这里的QPS时4.5w</li><li>内存减少10%，性能下降60%</li></ol></blockquote></li><li><p><strong>buffer pool的管理</strong></p><ul><li><p>buffer pool的组成</p><p><img src="/mysql/learn-mysql-024/image-20230401233740442.png" alt="image-20230401233740442" loading="lazy"></p><ul><li><p>free list</p><blockquote><p>buffer pool刚启动时，有一个16k的空白页，这些页存放(链表串联)在free list中</p></blockquote></li><li><p>lru list</p><blockquote><p>当读取一个数据页的时候，就从free list中取出一个页，存入数据，并将该页放入到lru list中</p></blockquote></li><li><p>flush list</p><blockquote><ol><li>当lru list中的页第一次被修改了，将该页的指针(page number)放入到flush list(只要修改过，就放入，不管修改次数)</li><li>flush list中包含脏页(数据经过修改，但是未刷入磁盘的页)</li><li>flush list中存放的不是一个页，而是页的指针(page number)</li></ol></blockquote></li></ul></li><li><p>查看buffer pool的状态</p><ul><li><p>使用命令 show engine innodb status;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">MySQL hadoop<span class="variable">@localhost</span>:(<span class="keyword">none</span>)<span class="operator">&gt;</span> <span class="keyword">show</span> engine innodb status;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Type   <span class="operator">|</span> Name <span class="operator">|</span> Status                                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="operator">|</span>                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">2023</span><span class="number">-04</span><span class="number">-01</span> <span class="number">15</span>:<span class="number">46</span>:<span class="number">33</span> <span class="number">0xfffe0c1ac1c0</span> INNODB MONITOR OUTPUT                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Per</span> <span class="keyword">second</span> averages calculated <span class="keyword">from</span> the <span class="keyword">last</span> <span class="number">13</span> seconds                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">-----------------                                                                |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> 省略其他输出.......                                                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> BUFFER POOL <span class="keyword">AND</span> MEMORY                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Total <span class="keyword">large</span> memory allocated <span class="number">6596591616</span>                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Dictionary memory allocated <span class="number">123994</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Buffer pool size   <span class="number">393168</span>                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Free</span> buffers       <span class="number">392675</span>                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Database pages     <span class="number">493</span>                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Old</span> database pages <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Modified db pages  <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending <span class="keyword">reads</span>      <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending writes: LRU <span class="number">0</span>, flush list <span class="number">0</span>, single page <span class="number">0</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages made young <span class="number">0</span>, <span class="keyword">not</span> young <span class="number">0</span>                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> youngs<span class="operator">/</span>s, <span class="number">0.00</span> non<span class="operator">-</span>youngs<span class="operator">/</span>s                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read <span class="number">441</span>, created <span class="number">52</span>, written <span class="number">56</span>                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> <span class="keyword">reads</span><span class="operator">/</span>s, <span class="number">0.00</span> creates<span class="operator">/</span>s, <span class="number">0.00</span> writes<span class="operator">/</span>s                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">No</span> buffer pool page gets since the <span class="keyword">last</span> printout                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read ahead <span class="number">0.00</span><span class="operator">/</span>s, evicted <span class="keyword">without</span> access <span class="number">0.00</span><span class="operator">/</span>s, Random read ahead <span class="number">0.00</span><span class="operator">/</span>s <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> LRU len: <span class="number">493</span>, unzip_LRU len: <span class="number">0</span>                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> I<span class="operator">/</span>O sum[<span class="number">0</span>]:cur[<span class="number">0</span>], unzip sum[<span class="number">0</span>]:cur[<span class="number">0</span>]                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> INDIVIDUAL BUFFER POOL INFO                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">---BUFFER POOL 0                                                                 |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Buffer pool size   <span class="number">49146</span>                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Free</span> buffers       <span class="number">49046</span>                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Database pages     <span class="number">100</span>                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Old</span> database pages <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Modified db pages  <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending <span class="keyword">reads</span>      <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending writes: LRU <span class="number">0</span>, flush list <span class="number">0</span>, single page <span class="number">0</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages made young <span class="number">0</span>, <span class="keyword">not</span> young <span class="number">0</span>                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> youngs<span class="operator">/</span>s, <span class="number">0.00</span> non<span class="operator">-</span>youngs<span class="operator">/</span>s                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read <span class="number">100</span>, created <span class="number">0</span>, written <span class="number">2</span>                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> <span class="keyword">reads</span><span class="operator">/</span>s, <span class="number">0.00</span> creates<span class="operator">/</span>s, <span class="number">0.00</span> writes<span class="operator">/</span>s                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">No</span> buffer pool page gets since the <span class="keyword">last</span> printout                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read ahead <span class="number">0.00</span><span class="operator">/</span>s, evicted <span class="keyword">without</span> access <span class="number">0.00</span><span class="operator">/</span>s, Random read ahead <span class="number">0.00</span><span class="operator">/</span>s <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> LRU len: <span class="number">100</span>, unzip_LRU len: <span class="number">0</span>                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> I<span class="operator">/</span>O sum[<span class="number">0</span>]:cur[<span class="number">0</span>], unzip sum[<span class="number">0</span>]:cur[<span class="number">0</span>]                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>Buffer pool size的单位是页，Modified db pages是脏页， young表示的是old --&gt; new的状态</p></blockquote></li><li><p>使用原数据表INNODB_BUFFER_PAGE_LRU</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MySQL hadoop<span class="variable">@localhost</span>:information_schema<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `INNODB_BUFFER_PAGE_LRU`;</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>[ <span class="number">1.</span> <span class="type">row</span> ]<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">POOL_ID             <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">LRU_POSITION        <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">SPACE               <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">PAGE_NUMBER         <span class="operator">|</span> <span class="number">7</span></span><br><span class="line">PAGE_TYPE           <span class="operator">|</span> <span class="keyword">SYSTEM</span></span><br><span class="line">FLUSH_TYPE          <span class="operator">|</span> <span class="number">1</span></span><br><span class="line">FIX_COUNT           <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">IS_HASHED           <span class="operator">|</span> <span class="keyword">NO</span></span><br><span class="line">NEWEST_MODIFICATION <span class="operator">|</span> <span class="number">1381535819</span></span><br><span class="line">OLDEST_MODIFICATION <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">ACCESS_TIME         <span class="operator">|</span> <span class="number">18035656</span></span><br><span class="line">TABLE_NAME          <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span></span><br><span class="line">INDEX_NAME          <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span></span><br><span class="line">NUMBER_RECORDS      <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">DATA_SIZE           <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">COMPRESSED_SIZE     <span class="operator">|</span> <span class="number">0</span></span><br><span class="line">COMPRESSED          <span class="operator">|</span> <span class="keyword">NO</span></span><br><span class="line">IO_FIX              <span class="operator">|</span> IO_NONE</span><br><span class="line">IS_OLD              <span class="operator">|</span> <span class="keyword">NO</span></span><br><span class="line">FREE_PAGE_CLOCK     <span class="operator">|</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>NEWEST_MODIFICATION: 表示的是该页最近一次(最新)被修改的lsn值</p><p>OLDEST_MODIFICATION: 表示的是该页在buffer pool中第一次被修改的lsn值，flush list是根据该值进行排序的，该值越小，表示该页应该最新被刷新</p></blockquote></li></ul></li><li><p>lru list的管理</p><ul><li><p>使用mid point的lru算法</p><ol><li><p>当该页被第一次读取时，该页优先放在mid point的位置</p></li><li><p>当被读取到第二次时，才会将该页放入到new page的首部</p></li><li><p>innodb_old_blocks_pct参数控制mid point的位置，默认37，即3&#x2F;8的位置</p><img src="/mysql/learn-mysql-024/innodb-buffer-pool-list.png" alt="innodb_buffer_pool_lru_list." style="zoom:75%;"><blockquote><p>LRU list中new page和old page时在一个链表上的，访问多的就从mid point排到了链表的前面，然后冷的页面就慢慢的被挤到了old page中，如果old中的数据被继续多次访问，还是会回到new中</p><ol><li>mid --&gt; new</li><li>mid --&gt; old --&gt; new</li><li>mid --&gt; old --&gt; 刷回磁盘</li><li>new --&gt; old --&gt; 刷回磁盘</li></ol><p>当free list中没有空闲的页时，就需要从old page中将最后的页(被淘汰的)取出，给新的查询所使用</p><p>如果被淘汰的页时脏页(page number在flush list中)，则需要先刷回磁盘后，在给新的查询使用</p></blockquote></li></ol><ul><li><p>避免扫描语句污染lru</p><p>当使用select * from tablename时，则该语句会读取某个页很多次(即该页可能被读取了两次以上，读取一条记录，就需要读取一次页)</p><ol><li><p>Innodb_old_block_time</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MySQL hadoop<span class="variable">@localhost</span>:information_schema<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_old%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name          <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_old_blocks_pct  <span class="operator">|</span> <span class="number">37</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_old_blocks_time <span class="operator">|</span> <span class="number">1000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+-------+</span></span><br></pre></td></tr></table></figure><blockquote><p>innodb_old_blocks_time单位时秒</p><ol><li>当该页第一次被读取时，该页放在mid point位置，但是随后无论读多少次，在innodb_old_blocks_time的时间内都不管(被视作只读取了一次)，等这个世界过去了，如果该页还是被读取了，才会将该页放入到new page的首部</li><li>通常select * 扫描操作不回超过1s，一个页很快就被扫描完了</li></ol></blockquote></li></ol></li></ul></li></ul></li><li><p>buffer pool的预热</p><p>mysql5.6以后，可以在停机的时候dump出buffer pool的数据(space，page number)，然后在启动的时候load进buffer pool，该功能可以让mysql启动时自动预热，无需人工干预</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MySQL hadoop<span class="variable">@localhost</span>:information_schema<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb_buffer_pool%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                       <span class="operator">|</span> <span class="keyword">Value</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_chunk_size       <span class="operator">|</span> <span class="number">134217728</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_dump_at_shutdown <span class="operator">|</span> <span class="keyword">ON</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_dump_now         <span class="operator">|</span> OFF            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_dump_pct         <span class="operator">|</span> <span class="number">40</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_filename         <span class="operator">|</span> ib_buffer_pool <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_instances        <span class="operator">|</span> <span class="number">8</span>              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_load_abort       <span class="operator">|</span> OFF            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_load_at_startup  <span class="operator">|</span> <span class="keyword">ON</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_load_now         <span class="operator">|</span> OFF            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_buffer_pool_size             <span class="operator">|</span> <span class="number">6442450944</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------------+----------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>innodb_buffer_pool_dump_pct: dump的百分比，是每个buffer pool文件，而不是整体</p><ol><li>dump的越多，启动的越慢</li><li>频繁的手工dump(set innodb_buffer_pool_dump_now &#x3D; 1)，会导致buffer pool中的数据越来越少，是因为设置了innodb_buffer_pool_dump_pct</li><li>如果做了高可用，可以定期dump，然后将dump文件传输到slave上，然后直接load(set innodb_buffer_pool_load_now &#x3D; 1)</li><li>load now和dump now都是异步处理的</li></ol></blockquote><blockquote><p>提示：</p><p>由于innodb_buffer_pool_dump_cpt是针对每个innodb pool的百分比，测试的时候应该将其调整的小一些</p></blockquote></li></ul></li><li><p>buffer pool与压缩页</p><ul><li><p>查找buffer pool中的压缩页</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> table_name, space, page_number, index_name, compressed_size, compressed <span class="keyword">from</span> information_schema.`INNODB_UFFER_PAGE_LRU` <span class="keyword">where</span> `COMPRESSED_SIZE` <span class="operator">!=</span> <span class="number">0</span> limit <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-------+-------------+-----------------+-----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> table_name              <span class="operator">|</span> space <span class="operator">|</span> page_number <span class="operator">|</span> index_name      <span class="operator">|</span> compressed_size <span class="operator">|</span> compressed <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-------+-------------+-----------------+-----------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">64</span>    <span class="operator">|</span> <span class="number">0</span>           <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">64</span>    <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">64</span>    <span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> `ypb`.`test_compressed` <span class="operator">|</span> <span class="number">64</span>    <span class="operator">|</span> <span class="number">3</span>           <span class="operator">|</span> GEN_CLUST_INDEX <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">67</span>    <span class="operator">|</span> <span class="number">320</span>         <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">67</span>    <span class="operator">|</span> <span class="number">321</span>         <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">67</span>    <span class="operator">|</span> <span class="number">322</span>         <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">67</span>    <span class="operator">|</span> <span class="number">323</span>         <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">67</span>    <span class="operator">|</span> <span class="number">324</span>         <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>                  <span class="operator">|</span> <span class="number">67</span>    <span class="operator">|</span> <span class="number">325</span>         <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>          <span class="operator">|</span> <span class="number">4096</span>            <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+-------+-------------+-----------------+-----------------+------------+</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">select</span> table_id, name, space, row_format, zip_page_size <span class="keyword">from</span> information_schema.`INNODB_SYS_TABLES` <span class="keyword">where</span> `SPACE` <span class="keyword">in</span> (<span class="number">64</span>, <span class="number">67</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------+-------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> table_id <span class="operator">|</span> name                <span class="operator">|</span> space <span class="operator">|</span> row_format <span class="operator">|</span> zip_page_size <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------+-------+------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">68</span>       <span class="operator">|</span> ypb<span class="operator">/</span>test_compressed <span class="operator">|</span> <span class="number">64</span>    <span class="operator">|</span> Compressed <span class="operator">|</span> <span class="number">4096</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------------------+-------+------------+---------------+</span></span><br></pre></td></tr></table></figure></li><li><p>压缩页在内存中的存放</p><ul><li><p>压缩页存放在unzip_lru中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engine innodb status;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Type   <span class="operator">|</span> Name <span class="operator">|</span> Status                                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="operator">|</span>                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> BUFFER POOL <span class="keyword">AND</span> MEMORY                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Total <span class="keyword">large</span> memory allocated <span class="number">6596591616</span>                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Dictionary memory allocated <span class="number">144581</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Buffer pool size   <span class="number">393174</span>                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Free</span> buffers       <span class="number">319176</span>                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Database pages     <span class="number">64425</span>                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Old</span> database pages <span class="number">23619</span>                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Modified db pages  <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending <span class="keyword">reads</span>      <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending writes: LRU <span class="number">0</span>, flush list <span class="number">0</span>, single page <span class="number">0</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages made young <span class="number">0</span>, <span class="keyword">not</span> young <span class="number">0</span>                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> youngs<span class="operator">/</span>s, <span class="number">0.00</span> non<span class="operator">-</span>youngs<span class="operator">/</span>s                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read <span class="number">6567</span>, created <span class="number">57858</span>, written <span class="number">105643</span>                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> <span class="keyword">reads</span><span class="operator">/</span>s, <span class="number">0.00</span> creates<span class="operator">/</span>s, <span class="number">0.00</span> writes<span class="operator">/</span>s                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">No</span> buffer pool page gets since the <span class="keyword">last</span> printout                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read ahead <span class="number">0.00</span><span class="operator">/</span>s, evicted <span class="keyword">without</span> access <span class="number">0.00</span><span class="operator">/</span>s, Random read ahead <span class="number">0.00</span><span class="operator">/</span>s <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> LRU len: <span class="number">64425</span>, unzip_LRU len: <span class="number">38273</span>                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> I<span class="operator">/</span>O sum[<span class="number">0</span>]:cur[<span class="number">0</span>], unzip sum[<span class="number">0</span>]:cur[<span class="number">0</span>]                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> INDIVIDUAL BUFFER POOL INFO                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">---BUFFER POOL 0                                                                 |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Buffer pool size   <span class="number">49152</span>                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Free</span> buffers       <span class="number">39845</span>                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Database pages     <span class="number">8087</span>                                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Old</span> database pages <span class="number">2965</span>                                                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Modified db pages  <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending <span class="keyword">reads</span>      <span class="number">0</span>                                                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pending writes: LRU <span class="number">0</span>, flush list <span class="number">0</span>, single page <span class="number">0</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages made young <span class="number">0</span>, <span class="keyword">not</span> young <span class="number">0</span>                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> youngs<span class="operator">/</span>s, <span class="number">0.00</span> non<span class="operator">-</span>youngs<span class="operator">/</span>s                                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read <span class="number">870</span>, created <span class="number">7217</span>, written <span class="number">12719</span>                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0.00</span> <span class="keyword">reads</span><span class="operator">/</span>s, <span class="number">0.00</span> creates<span class="operator">/</span>s, <span class="number">0.00</span> writes<span class="operator">/</span>s                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">No</span> buffer pool page gets since the <span class="keyword">last</span> printout                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages read ahead <span class="number">0.00</span><span class="operator">/</span>s, evicted <span class="keyword">without</span> access <span class="number">0.00</span><span class="operator">/</span>s, Random read ahead <span class="number">0.00</span><span class="operator">/</span>s <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> LRU len: <span class="number">8087</span>, unzip_LRU len: <span class="number">4874</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> I<span class="operator">/</span>O sum[<span class="number">0</span>]:cur[<span class="number">0</span>], unzip sum[<span class="number">0</span>]:cur[<span class="number">0</span>]                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>unzip_LRU len: 压缩页LRU的长度在buffer pool中的长度</p></blockquote></li><li><p>伙伴算法</p><blockquote><ol><li>磁盘中存放压缩页row_format&#x3D;compressed，假设key_block_size&#x3D;8k，buffer pool的页大小时16k</li><li>向free list中申请空闲的页，如果没有空闲的页，则向RLU list申请页，如果LRU满了，则找LRU中最后一个页，如果最后页是脏页，则做flush操作，最后得到一个空白的16k的页</li><li>该16k的空白页，就给8k的压缩页使用，剩余的8k空间，保存到8k到free list中</li><li>如果有一个4k到压缩页，将8k到free list中的空闲页给他用，然后将多余的4k空间保存到4k到free list中去</li></ol></blockquote><p><img src="/mysql/learn-mysql-024/image-20230402224313552.png" alt="image-20230402224313552" loading="lazy"></p><blockquote><ol><li>通过上面的方式，不同大小的页可以在同一个buffer pool中使用</li><li>不能根据页的大小来划分缓冲池，缓冲池中页的大小就是固定大小，(等于innodb_page_size)</li><li>LRU list和Flush list不需要根据页大小划分，都是统一的innodb_page_size大小</li></ol></blockquote></li><li><p>压缩页在内存中的保留</p><ol><li>压缩页需要中buffer pool中解压</li><li>原来的压缩页保留在buffer pool中</li></ol><blockquote><p>缺点就是压缩页占用了buffer pool的大小，对于热点数据来说，相当于内存变小了，可能造成性能下降</p><ol><li>所以在开启了压缩后，buffer pool的空间要相应的增大</li><li>如果启用压缩后节省了磁盘io能够抵消buffer pool空间变小所带来的性能下降，那整体性能还是会上涨</li><li>启用压缩的前提是，内存尽可能大</li></ol></blockquote><ol start="3"><li>压缩页保留的原因是为了在更新数据的时候，将redo添加到压缩页的空闲部分，如果要刷回磁盘，可以直接将压缩页刷回去，如果该页被写满，则做一次reorganize操作(在此之前需要解压)，真的写满了才做分裂</li></ol><p><img src="/mysql/learn-mysql-024/image-20230402225556931.png" alt="image-20230402225556931" loading="lazy"></p><blockquote><p>保留压缩页是为了更快的刷回磁盘</p><p>解压页是为了更快的查询</p></blockquote><p>透明压缩表没有上面压缩页的问题，因为压缩是文件系统层的，对mysql是透明的</p></li></ul></li></ul></li></ul><h2 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h2><ul><li><p><strong>checkpint的作用</strong></p><ul><li>缩短数据库恢复时间</li><li>缓冲池不够用时，将脏页刷新到磁盘</li><li>重做日志不可用时，刷新脏页</li></ul><blockquote><ol><li>数据页首先被读取到缓冲池中，当数据页中某几条记录被更新或者插入新记录时，所有的操作都是先在buffer pool中完成的</li><li>buffer pool中的某个页和磁盘中的某个页在(space，page_number)上是相同的，但是其内容可能是不同的(buffer pool中被更新过)，形成了脏页</li><li>要定期将缓冲池中的脏页刷回磁盘，达到最终一致性，即通过checkpoint机制来刷新脏页</li></ol></blockquote><p><img src="/mysql/learn-mysql-024/image-20230402230705699.png" alt="image-20230402230705699" loading="lazy"></p></li><li><p><strong>lsn(log sequence number)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engine innodb status;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Type   <span class="operator">|</span> Name <span class="operator">|</span> Status                                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="operator">|</span>                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">2023</span><span class="number">-04</span><span class="number">-02</span> <span class="number">15</span>:<span class="number">08</span>:<span class="number">05</span> <span class="number">0xfffe040e61c0</span> INNODB MONITOR OUTPUT                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span><span class="operator">=</span>                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Per</span> <span class="keyword">second</span> averages calculated <span class="keyword">from</span> the <span class="keyword">last</span> <span class="number">39</span> seconds                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">---                                                                              |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> LOG                                                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">---                                                                              |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Log sequence number <span class="number">2290380642</span>                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Log flushed up <span class="keyword">to</span>   <span class="number">2290380642</span>                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Pages flushed up <span class="keyword">to</span> <span class="number">2290380642</span>                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">Last</span> checkpoint <span class="keyword">at</span>  <span class="number">2290380633</span>                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">0</span> pending log flushes, <span class="number">0</span> pending chkp writes                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="number">784</span> log i<span class="operator">/</span>o<span class="string">&#x27;s done, 0.00 log i/o&#x27;</span>s<span class="operator">/</span><span class="keyword">second</span>                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">----------------------                                                           |</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>Log sequence number: 当前内存中最新的lsn</p><p>Log flushed up to: redo刷新到磁盘的lsn</p><p>Pages flushed up to: 最后一次刷新到磁盘上的页的最新的lsn(NEWEST_MODIFICATION)</p><p>Last checkpoint at: 最后一次刷到磁盘上页的第一次被修改的lsn(OLDEST_MODIFICATION)</p><p>lsn是一个字节数</p><ol><li>log sequence number和log flush up这两个lsn可能回不同，运行过程中可能回出现小于后者，因为redo日志也是先在内存中更新，在刷新到磁盘的</li><li>pages flushed up和last checkpoint其实都指向了最后一个刷新到磁盘的页，只是pages flushed up代表了页中的NEWEST_MODIFICATION，而last checkpoint代表了OLDEST_MODIFICATION<ul><li>flush list使用OLDEST_MODIFICATION进行排序，在刷新脏页时，checkpoint的lsn值就对应时当前刷新到某个页的OLDEST_MODIFICATION</li><li>当某个页只被修改过一次，则pages flushed up和last checkpoint会想等，反之多次修改，则pages flushed up大于last checkpoint</li><li>在恢复时，从checkpoint开始恢复，如果当前页的lsn大于checkpoint的lsn，表示不需要恢复了</li></ul></li></ol></blockquote><ul><li><p>日志(redo)中的lsn</p><p>假设当前的lsn为c，此时对某个页被修改，则会产生M个字节的日志，则此时的lsn为c+m，日志中的lsn代表了日志一共写入了多少字节</p></li><li><p>页中的lsn</p><p>页中也有lsn，表示该页被修改的时候，对应的lsn是多少</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> information_schema.INNODB_BUFFER_PAGE_LRU;</span><br></pre></td></tr></table></figure><p>page中的lsn主要用在恢复的时候，保存在页头</p></li><li><p>checkpoint的lsn</p><p>每个数据库中也有一个lsn，表示最后一个刷新到磁盘页的lsn，表明了该lsn之前的数据已经刷新到磁盘了，且如果需要做恢复操作，也只要从当前这个checkpoint lsn开始恢复</p><blockquote><p>checkpoint lsn写在redo log的前2k空间中</p><ol><li>日志中的lsn &#x3D; checkpoint的lsn。表示所有页都已经刷新会磁盘</li><li>日志中的lsn &gt; checkpoint的lsn。表示还有页没有刷新到磁盘，如果是宕机，则需要用日志恢复</li><li>日志中的lsn &lt; checkpoint的lsn，报错</li></ol></blockquote></li></ul></li><li><p><strong>checkpint的分类</strong></p><ul><li><p>sharp checkpoint</p><ul><li>将所有脏页刷新会磁盘</li><li>通常在数据库关闭的时候</li><li>刷新的时候hang住</li><li>innodb_fast_shutdown &#x3D; 1&#x2F;0</li></ul></li><li><p>fuzzy checkpoint</p><ul><li><p>将部分脏页刷新到磁盘</p></li><li><p>对系统影响小</p></li><li><p>innodb_io_capacity</p><blockquote><p>最小限制100</p><p>一次最多刷新到脏页能力，与iops有关</p></blockquote></li></ul></li></ul></li><li><p><strong>刷新</strong></p><ul><li><p>master thread checkpoint </p><p>从flush list中刷新</p></li><li><p>flush lru list checkpoint</p><p>从lru list中刷新</p><p>innodb_lru_scan_depth表示的是每次进行lru list刷新脏页的数量</p><blockquote><p>该参数是应用到每个buffer pool实例中的，总数为 innodb_lru_scan_depth * innodb_buffer_pool_instances</p><p>建议该值不要超过innodb_io_capacity&#x2F;innodb_buffer_pool_instances</p></blockquote></li><li><p>async&#x2F;sync flush checkpoint</p><p>重做日志</p></li><li><p>dirty page too much checkpoint</p><p>innodb_max_dirty_pages_pct参数控制</p></li></ul></li></ul><h2 id="double-write"><a href="#double-write" class="headerlink" title="double write"></a>double write</h2><ul><li><p>double write介绍</p><p>double write的目的是为了保证数据库写入的可靠性，避免partial write的情况</p><blockquote><p>partial write(部分写)</p><ol><li>16k的页只写了4k，8k，12k的情况(此时是不完整的，不干净的页)</li><li>不可以通过redo进行恢复。redo恢复的前提是该页必须是完整的，干净的</li></ol></blockquote><p>double write是全局的</p><p>共享表空间存在一个段对象double write，让后这个段由两个区(一个区1m)组成</p><p>2m固定大小(both file and memory)</p><p>页在刷新时，首选顺序的写入到double write</p><p>然后再刷新到磁盘(ibd)</p><img src="/mysql/learn-mysql-024/image-20230403110338141.png" alt="image-20230403110338141" style="zoom:50%;"><blockquote><p>double write buffer：1， double write(ibdata1)， 2，ibd</p><ol><li>将脏页copy到double write buffer对象中，默认2m大小</li><li>将double write buffer中的对象先写入到ibdata1共享表空间中， 2m循环覆盖，顺序写入，一次IO</li><li>在根据(space，page_number)写入到原来的ibd文件中</li><li>如果是在写入ibdata1时，发生宕机，此刻原来的ibd file是完整的，干净的，下次启动可以根据redo文件进行恢复</li><li>如果是写入到ibd文件时，发生了宕机，此刻原来的ibdata1中存在副本，可以直接覆盖ibd文件中去，然后在进行redo恢复</li></ol><p>redo时物理逻辑的，物理表示记录的日志针对的是页的修改，逻辑表示记录日志的内容时逻辑的</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%double%write%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name      <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_doublewrite <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p>double write开销</p><ul><li>假设每个页大小16k，则2m的double write中存放了128个页，在使用了double write之后，IO从原来的128次变成了128+1次IO，而不是128+128次IO</li><li>double write的2m数据时顺序刷人磁盘的，是一次IO，该IO的大小是2m</li><li>开启double write的性能降低5%～25%</li><li>slave服务器同样需要开启</li></ul></li><li><p>double write可以关闭的前提</p><ul><li>支持原子写入的设备</li><li>Innodb_doublewrite&#x3D;0表示关闭double write功能</li></ul></li></ul><h2 id="insert-x2F-change-buffer"><a href="#insert-x2F-change-buffer" class="headerlink" title="insert&#x2F;change buffer"></a>insert&#x2F;change buffer</h2><ul><li><p>insert&#x2F;change buffer介绍</p><ul><li>mysql5.5版本之前叫做insert buffer，现在叫做change buffer</li><li>提高辅助索引的插入性能</li><li>非唯一的二级索引</li><li>insert&#x2F;change buffer是一个持久化的对象，在ibdata1中，同时页会写入redo日志</li><li>insert&#x2F;change buffer页是一颗B+数，每次缓存2k的记录</li><li>开启后有30%的性能提升</li><li>mysql5.5版本之前，可以设置的最大只是buffer pool的1&#x2F;2，现在最大只能是1&#x2F;4</li><li>当insert buffer进行合并的时候，性能下降</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%change_buffer%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                 <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_change_buffer_max_size <span class="operator">|</span> <span class="number">25</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> innodb_change_buffering       <span class="operator">|</span> <span class="keyword">all</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br></pre></td></tr></table></figure></li><li><p>insert&#x2F;change buffer举例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t (</span><br><span class="line">    a <span class="type">INT</span> AUTO_INCREMENT, <span class="comment">-- a是自增</span></span><br><span class="line">    b <span class="type">VARCHAR</span>(<span class="number">30</span>),        <span class="comment">-- b是varchar</span></span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(a)        <span class="comment">-- a是主键</span></span><br><span class="line">    key(b)                <span class="comment">-- b是二级索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>对于主键(a列)，每次插入都要立即插入对应的聚集索引中(在内存中的就直接插入，不在内存就先读取到内存)</p></li><li><p>对于二级索引(secondary index)(b列)</p><ol><li>在没有insert&#x2F;change buffer时，每次插入一条记录，就要读取一次页(读取内存，或者从磁盘读取到内存)，让后将记录插入到页中</li><li>在有insert&#x2F;change buffer时，插入一条记录时，先判断记录对应要插入到二级索引(secondary index)页是否在buffer pool中，如果该二级索引页已经在buffer pool中，则直接插入，反之，将其cache起来，放入到insert&#x2F;change buffer中，等待该二级索引页被读到时，将insert&#x2F;change buffer中对该页的记录进行合并(merge)进去，从而减少IO操作</li></ol><blockquote><p>insert&#x2F;change buffer就是用来提升二级索引插入的性能</p><p>使用空间换时间，批量插入的方式(二级索引不着急插入，只要主键已经插入了即可)</p></blockquote></li></ul></li><li><p>insert&#x2F;change buffer性能</p><img src="/mysql/learn-mysql-024/image-20230403115403008.png" alt="image-20230403115403008" style="zoom:50%;"><ul><li>左图开启了insert&#x2F;change buffer，而右图未开启</li><li>一开启都比较高的原因是因为还没有全量进行刷磁盘(脏页全部在buffer pool中，还没满)，当insert buffer进行合并的时候，性能才开始下降</li><li>开启insert&#x2F;change buffer后，insert的常量值在5k左右</li><li>ssd场景下页建议开启</li></ul></li><li><p>insert&#x2F;change buffer查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engine innodb status;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Type   <span class="operator">|</span> Name <span class="operator">|</span> Status                                                                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> InnoDB <span class="operator">|</span>      <span class="operator">|</span>                                                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">-------------------------------------                                            |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="keyword">INSERT</span> BUFFER <span class="keyword">AND</span> ADAPTIVE HASH INDEX                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> <span class="comment">-------------------------------------                                            |</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> Ibuf: size <span class="number">1</span>, <span class="keyword">free</span> list len <span class="number">0</span>, seg size <span class="number">2</span>, <span class="number">0</span> merges                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> merged operations:                                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span>  <span class="keyword">insert</span> <span class="number">0</span>, <span class="keyword">delete</span> mark <span class="number">0</span>, <span class="keyword">delete</span> <span class="number">0</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span> discarded operations:                                                            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="operator">|</span>      <span class="operator">|</span>  <span class="keyword">insert</span> <span class="number">0</span>, <span class="keyword">delete</span> mark <span class="number">0</span>, <span class="keyword">delete</span> <span class="number">0</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------+----------------------------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><ol><li>seg size: 页的数量。假如页的大小是8k，则seg_size * 8k就是insert&#x2F;change buffer使用的内存大小</li><li>merges: 合并了多少页，这里为0，可能是buffer pool足够大，数据页都缓存到内存中了，就用不到buffer了</li><li>mergeed insert: 插入了多少条记录，insert&#x2F;merges就是插入到效率，插入一条记录，就要读取一次页</li><li>discarded operations: 应该是很小的值，或者为0，当记录写入到insert&#x2F;change buffer后，对应的表被删除了，则相应的buffer中的记录就应该被丢弃</li></ol><blockquote><p>使用insert&#x2F;change buffer的前提是，需要使用随机IO，这时才放入buffer中，如果页已经在buffer pool中了，就不需要使用insert&#x2F;change buffer了</p></blockquote></li><li><p>change buffer</p><p>从mysql5.5以后，该名为change buffer，表示不仅仅适用于insert</p><ol><li>insert</li><li>delete mark：标记删除</li><li>purge：清除</li><li>innodb_change_buffering&#x3D;{all,none,inserts,deletes,purge,changes&#x3D;(insert &amp; delete marking)}</li></ol></li></ul><h2 id="adaptive-hash-index-自适应hash索引"><a href="#adaptive-hash-index-自适应hash索引" class="headerlink" title="adaptive hash index(自适应hash索引)"></a>adaptive hash index(自适应hash索引)</h2><ul><li>检索的时间复杂度。B+tree O(t)，只能定位到该记录所在的页，hash O(1)，可以直接定位到记录</li><li>可以自己判断是否是活跃的页，如果是活跃的页，可以自动做hash，管理员无需干预</li><li>mysql5.6版本以后，官方不建议使用自适应hash索引，cpu使用率变高，但是性能没有提升</li><li>mysql5.7中增加了innodb_adaptive_hash_index_parts，增加分片，以减少竞争</li><li>只对等值的操作有意义</li></ul><h2 id="flush-neighbor-page-FNP"><a href="#flush-neighbor-page-FNP" class="headerlink" title="flush neighbor page(FNP)"></a>flush neighbor page(FNP)</h2><ul><li>刷新脏页所在的区(extent)的所有脏页，合并IO，随机转顺序的优化<ul><li>写入的数据太多</li><li>如果业务确实是频繁更新，那刷新页会很频繁</li></ul></li><li>对传统机械盘有意义<ul><li>innodb_flush_neighbors&#x3D;{0|1|2}(&gt;&#x3D;mysql5.6)</li><li>0: 表示关闭该功能</li><li>1: 表示刷新一个区内的脏页</li><li>2: 表示刷新几个连续的脏页</li></ul></li><li>ssd建议关闭该功能。非ssd建议使用2</li></ul>]]></content>
    
    
    <summary type="html">heap_number和buffer pool的内存结构，以及checkpoint，doublewrite，change buffer和自适应hash索引(AHI)</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-Mysql基于ibd文件恢复数据</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-023/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-023/</id>
    <published>2023-03-30T09:54:14.000Z</published>
    <updated>2023-03-30T10:01:49.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FueW9uZ2ppbi9teXNxbF9pYmQ=">mysql_ibd<i class="fa fa-external-link-alt"></i></span>是一个用于从mysql的ibd文件导入数据库表的脚本，针对innodb存储引擎。</p><p>如果您的数据表使用的是MyISAM引擎，请移步<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL2ltcG9ydC10YWJsZS5odG1s">mysql文档<i class="fa fa-external-link-alt"></i></span>，使用<code>import table from</code>从frm和MYD文件恢复表数据。</p><p>对于innodb引擎，在mysql8以前的版本下，每个表在数据目录下有frm文件和ibd文件，前者是表结构，后者是表数据。从mysql8开始，表的结构信息等元数据通过sdi保存，sdi嵌入到ibd文件里面。所以一个表只对应一个数据文件。  </p><p>对于mysql8之前版本有frm文件的情况，mysql提供了<code>mysqlfrm</code>工具可以从frm生成建表语句。但对于mysql8之后版本，只提供了<code>ibd2sdi</code>工具从ibd文件生成sdi文件（JSON形式的表结构），不能直接生成sql语句。</p><p>这个项目支持了下面两个功能：</p><ul><li>对于mysql8之后版本，支持从ibd生成建表语句</li><li>对任意版本mysql，支持表结构恢复后，<strong>ibd文件批量导入表数据</strong></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="有frm和ibd文件-mysql5-6-x2F-mysql5-7"><a href="#有frm和ibd文件-mysql5-6-x2F-mysql5-7" class="headerlink" title="有frm和ibd文件(mysql5.6&#x2F;mysql5.7)"></a>有frm和ibd文件(mysql5.6&#x2F;mysql5.7)</h3><p>请参考<span class="exturl" data-url="aHR0cHM6Ly9qYW1lc2luZ29sZC5jb20vcmVzdG9yaW5nLW15c3FsLWRhdGFiYXNlLWZybS1pYmQ=">这篇文章<i class="fa fa-external-link-alt"></i></span>或<span class="exturl" data-url="aHR0cHM6Ly9kYmEuc3RhY2tleGNoYW5nZS5jb20vYS83MTc4NQ==">这个回答<i class="fa fa-external-link-alt"></i></span>，从frm文件生成建表语句，执行创建表结构。<br>如果表比较少，可以直接按上面的文章中的方法，手动从ibd导入表数据。<br>如果表比较多，可以使用本脚本，修改<code>config.yml</code>配置文件，更新目录和数据库信息，使用命令<code>python main.py load_data</code>导入数据到数据库即可。</p><h3 id="只有ibd文件-mysql8"><a href="#只有ibd文件-mysql8" class="headerlink" title="只有ibd文件(mysql8)"></a>只有ibd文件(mysql8)</h3><blockquote><p>尽量保持新数据库和原数据库版本一致，否则可能在导入数据时出现错误。</p></blockquote><ol><li><p>修改<code>config.yml</code>中的<code>input_ibds</code>和<code>output</code>项，设置为ibd文件目录</p><blockquote><p>input_ibds存放的是备份的ibd文件的目录</p><p>output是保存生成sql的目录</p></blockquote></li><li><p>执行<code>python main.py tosql</code>，从ibd文件生成sdi和sql文件</p></li><li><p>检查sql文件并执行，创建空表</p></li><li><p>修改<code>config.yml</code>中<code>mysql_db_dir</code>和<code>db_info</code>项，设置为新数据库的数据目录</p><blockquote><p>mysql_db_dir是新数据库的ibd文件目录</p><p>db_info时新数据库的链接参数配置</p></blockquote></li><li><p>执行<code>python main.py load_data</code>从ibd文件批量导入数据到数据库（请在数据库服务器上运行）</p></li></ol><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><p><strong>Schema mismatch (Clustered index validation failed. Because the .cfg file is missing, table definition of the IBD file could be different. Or the data file itself is already corrupted.)</strong><br>在mysql8之后的ibd导入时，偶尔会出现这个错误。使用<code>ibd2sdi</code>工具从新表生成sdi，对比新旧的sdi文件，基本都是一样的，暂时不确定原因。遇到这个错误暂时只能用其他手段恢复表数据了。如果哪位朋友解决了这个问题，请打开issue告知~</p><p><strong>查看自增起始值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.`TABLES` <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;employees&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>自增起始值问题</strong><br>从ibd文件导入数据后，表的自增列的起始值依然是0，在插入新数据的时候会报错，可使用下面命令手动查询恢复：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(id) <span class="keyword">from</span> `mytable`;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `mytable` AUTO_INCREMENT<span class="operator">=</span>val<span class="operator">+</span><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Mysql基于ibd文件恢复数据</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-MySQL知识点总结</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-022/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-022/</id>
    <published>2023-03-29T04:06:51.000Z</published>
    <updated>2023-03-29T04:19:58.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL 这一块的知识还是挺多的，问深度的话， 一般都是如何调优的，当然少不了 MySQL 的基础等知识。</p></blockquote><h3 id="数据库引擎-innodb-与-myisam-的区别"><a href="#数据库引擎-innodb-与-myisam-的区别" class="headerlink" title="数据库引擎 innodb 与 myisam 的区别"></a>数据库引擎 innodb 与 myisam 的区别</h3><h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>是 MySQL 默认的<strong>事务型</strong>存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。</p><p>实现了四个标准的隔离级别，默认级别是<strong>可重复读</strong> (REPEATABLE READ)。在可重复读隔离级别下，<strong>通过多版本并发控制 (MVCC)+ 间隙锁 (Next-Key Locking) 防止幻影读。</strong></p><p>主索引是<strong>聚簇索引</strong>，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</p><p>内部做了很多优化，包括从磁盘读取数据时采用的<strong>可预测性读</strong>、能够加快读操作并且自动创建的<strong>自适应哈希索引</strong>、能够加速插入操作的插入缓冲区等。</p><p>支持真正的<strong>在线热备份</strong>。其它存储引擎不支持在线热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。</p><h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>设计简单，数据以<strong>紧密格式存储</strong>。对于只读数据，或者表比较小、可以容忍修复操作，则依然可以使用它。</p><p>提供了大量的特性，包括<strong>压缩表</strong>、<strong>空间数据索引</strong>等。</p><p><strong>不支持事务</strong>。</p><p><strong>不支持行级锁</strong>，只能对整张表加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但在表有读取操作的同时，也可以往表中插入新的记录，这被称为并发插入 (CONCURRENT INSERT)。</p><p>可以手工或者自动执行检查和修复操作，但是和事务恢复以及崩溃恢复不同，可能导致一些数据丢失，而且修复操作是非常慢的。</p><p>如果指定了 DELAY_KEY_WRITE 选项，在每次修改执行完成时，不会立即将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入磁盘。这种方式可以极大的提升写入性能，但是在数据库或者主机崩溃时会造成索引损坏，需要执行修复操作。</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ul><li><strong>事务</strong>: InnoDB 是事务型的，可以使用 Commit 和 Rollback 语句。</li><li><strong>并发</strong>: MyISAM 只支持表级锁，而 InnoDB 还支持行级锁。</li><li><strong>外键</strong>: InnoDB 支持外键。</li><li><strong>备份</strong>: InnoDB 支持在线热备份。</li><li><strong>崩溃恢复</strong>: MyISAM 崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。</li><li><strong>其它特性</strong>: MyISAM 支持压缩表和空间数据索引。</li></ul><h3 id="MySQL-是如何执行一条-SQL-的"><a href="#MySQL-是如何执行一条-SQL-的" class="headerlink" title="MySQL 是如何执行一条 SQL 的"></a>MySQL 是如何执行一条 SQL 的</h3><p><strong>MySQL 内部可以分为服务层和存储引擎层两部分：</strong></p><ol><li><strong>服务层包括连接器、查询缓存、分析器、优化器、执行器等</strong>，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</li><li><strong>存储引擎层负责数据的存储和提取。</strong>其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认的存储引擎。</li></ol><p><strong>Server 层按顺序执行 sql 的步骤为：</strong></p><p>客户端请求 -&gt; 连接器（验证用户身份，给予权限） -&gt; 查询缓存（存在缓存则直接返回，不存在则执行后续操作）-&gt; 分析器（对 SQL 进行词法分析和语法分析操作） -&gt; 优化器（主要对执行的 sql 优化选择最优的执行方案方法） -&gt; 执行器（执行时会先看用户是否有执行权限，有才去使用这个引擎提供的接口）-&gt; 去引擎层获取数据返回（如果开启查询缓存则会缓存查询结果）</p><p><strong>简单概括</strong>：</p><ul><li><strong>连接器</strong>：管理连接、权限验证；</li><li><strong>查询缓存</strong>：命中缓存则直接返回结果；</li><li><strong>分析器</strong>：对 SQL 进行词法分析、语法分析；（判断查询的 SQL 字段是否存在也是在这步）</li><li><strong>优化器</strong>：执行计划生成、选择索引；</li><li><strong>执行器</strong>：操作引擎、返回结果；</li><li><strong>存储引擎</strong>：存储数据、提供读写接口。</li></ul><h3 id="mysql-的-acid-原理"><a href="#mysql-的-acid-原理" class="headerlink" title="mysql 的 acid 原理"></a>mysql 的 acid 原理</h3><p><strong>ACID 嘛，原子性 (Atomicity)、一致性 (Consistency)、隔离性 (Isolation)、持久性 (Durability)！</strong></p><p>我们以从 A 账户转账 50 元到 B 账户为例进行说明一下 ACID，四大特性。</p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>根据定义，原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做。即要么转账成功，要么转账失败，是不存在中间的状态！</p><p><strong>如果无法保证原子性会怎么样？</strong></p><p>OK，就会出现<strong>数据不一致</strong>的情形，A 账户减去 50 元，而 B 账户增加 50 元操作失败。系统将无故丢失 50 元～</p><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><p>根据定义，隔离性是指多个事务并发执行的时候，<strong>事务内部的操作与其他事务是隔离的</strong>，并发执行的各个事务之间不能互相干扰。</p><p><strong>如果无法保证隔离性会怎么样？</strong></p><p>OK，假设 A 账户有 200 元，B 账户 0 元。A 账户往 B 账户转账两次，金额为 50 元，分别在两个事务中执行。如果无法保证隔离性，会出现下面的情形</p><p>如图所示，如果不保证隔离性，A 扣款两次，而 B 只加款一次，凭空消失了 50 元，依然出现了<strong>数据不一致</strong>的情形！</p><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><p>根据定义，<strong>持久性是指事务一旦提交，它对数据库的改变就应该是永久性的</strong>。接下来的其他操作或故障不应该对其有任何影响。</p><p><strong>如果无法保证持久性会怎么样？</strong></p><p>在 MySQL 中，为了解决 CPU 和磁盘速度不一致问题，MySQL 是将磁盘上的数据加载到内存，对内存进行操作，然后再回写磁盘。好，假设此时宕机了，在内存中修改的数据全部丢失了，持久性就无法保证。</p><p>设想一下，系统提示你转账成功。但是你发现金额没有发生任何改变，此时数据出现了不合法的数据状态，我们将这种状态认为是<strong>数据不一致</strong>的情形。</p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>根据定义，一致性是指事务执行前后，数据处于一种合法的状态，这种状态是语义上的而不是语法上的。 那什么是合法的数据状态呢？ oK，这个状态是满足预定的约束就叫做合法的状态，再通俗一点，这状态是由你自己来定义的。<strong>满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的</strong>！</p><p><strong>如果无法保证一致性会怎么样？</strong></p><ul><li>例一：A 账户有 200 元，转账 300 元出去，此时 A 账户余额为 - 100 元。你自然就发现了此时数据是不一致的，为什么呢？因为你定义了一个状态，余额这列必须大于 0。</li><li>例二：A 账户 200 元，转账 50 元给 B 账户，A 账户的钱扣了，但是 B 账户因为各种意外，余额并没有增加。你也知道此时数据是不一致的，为什么呢？因为你定义了一个状态，要求 A+B 的余额必须不变。</li></ul><h4 id="mysql-怎么保证一致性？"><a href="#mysql-怎么保证一致性？" class="headerlink" title="mysql 怎么保证一致性？"></a>mysql 怎么保证一致性？</h4><p>OK，这个问题分为两个层面来说。 <strong>从数据库层面</strong>，数据库通过原子性、隔离性、持久性来保证一致性。也就是说 ACID 四大特性之中，C (一致性) 是目的，A (原子性)、I (隔离性)、D (持久性) 是手段，是为了保证一致性，数据库提供的手段。数据库必须要实现 AID 三大特性，才有可能实现一致性。例如，原子性无法保证，显然一致性也无法保证。</p><p>但是，如果你在事务里故意写出违反约束的代码，一致性还是无法保证的。例如，你在转账的例子中，你的代码里故意不给 B 账户加钱，那一致性还是无法保证。因此，还必须从应用层角度考虑。</p><p><strong>从应用层面</strong>，通过代码判断数据库数据是否有效，然后决定回滚还是提交数据！</p><h4 id="mysql-怎么保证原子性"><a href="#mysql-怎么保证原子性" class="headerlink" title="mysql 怎么保证原子性"></a>mysql 怎么保证原子性</h4><p>OK，是利用 Innodb 的 <code>undo log</code>。 <code>undo log</code> 名为回滚日志，是实现原子性的关键，当事务回滚时能够<strong>撤销所有已经成功执行的 sql 语句</strong>，他需要记录你要回滚的相应日志信息。 例如</p><ul><li>(1) 当你 delete 一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert 这条旧数据</li><li>(2) 当你 update 一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行 update 操作</li><li>(3) 当年 insert 一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行 delete 操作</li></ul><p><code>undo log</code> 记录了这些回滚需要的信息，当事务执行失败或调用了 rollback，导致事务需要回滚，便可以利用 undo log 中的信息将数据回滚到修改之前的样子。</p><h4 id="mysql-怎么保证持久性的"><a href="#mysql-怎么保证持久性的" class="headerlink" title="mysql 怎么保证持久性的"></a>mysql 怎么保证持久性的</h4><p>OK，是利用 Innodb 的 <code>redo log</code>。 正如之前说的，Mysql 是先把磁盘上的数据加载到内存中，在内存中对数据进行修改，再刷回磁盘上。如果此时突然宕机，内存中的数据就会丢失。 <em>怎么解决这个问题？</em> 简单啊，事务提交前直接把数据写入磁盘就行啊。 <em>这么做有什么问题？</em></p><ul><li>只修改一个页面里的一个字节，就要将整个页面刷入磁盘，太浪费资源了。毕竟一个页面 16kb 大小，你只改其中一点点东西，就要将 16kb 的内容刷入磁盘，听着也不合理。</li><li>毕竟一个事务里的 SQL 可能牵涉到多个数据页的修改，而这些数据页可能不是相邻的，也就是属于随机 IO。显然操作随机 IO，速度会比较慢。</li></ul><p>于是，决定采用 <code>redo log</code> 解决上面的问题。当做数据修改的时候，不仅在内存中操作，还会在 <code>redo log</code> 中记录这次操作。当事务提交的时候，会将 <code>redo log</code> 日志进行刷盘 (<code>redo log</code> 一部分在内存中，一部分在磁盘上)。当数据库宕机重启的时候，会将 <code>redo log</code> 中的内容恢复到数据库中，再根据 <code>undo log</code> 和 <code>binlog</code> 内容决定回滚数据还是提交数据。</p><p><strong>采用 redo log 的好处？</strong></p><p>其实好处就是将 <code>redo log</code> 进行刷盘比对数据页刷盘效率高，具体表现如下</p><ul><li><code>redo log</code> 体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。</li><li><code>redo log</code> 是一直往末尾进行追加，属于顺序 IO。效率显然比随机 IO 来的快。</li></ul><h4 id="mysql-怎么保证隔离性"><a href="#mysql-怎么保证隔离性" class="headerlink" title="mysql 怎么保证隔离性"></a>mysql 怎么保证隔离性</h4><p>利用的是锁和 MVCC 机制。</p><h3 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p><img src="/mysql/learn-mysql-022/dd782132-d830-4c55-9884-cfac0a541b8e.png" loading="lazy"></p><h4 id="丢弃修改"><a href="#丢弃修改" class="headerlink" title="丢弃修改"></a>丢弃修改</h4><p>T1 和 T2 两个事务都对一个数据进行修改，<strong>T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改</strong>。例如：事务 1 读取某表中的数据 A&#x3D;20，事务 2 也读取 A&#x3D;20，事务 1 修改 A&#x3D;A-1，事务 2 也修改 A&#x3D;A-1，最终结果 A&#x3D;19，事务 1 的修改被丢失。</p><p><img src="/mysql/learn-mysql-022/88ff46b3-028a-4dbb-a572-1f062b8b96d3.png" loading="lazy"></p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p><strong>T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同</strong>。</p><p><img src="/mysql/learn-mysql-022/c8d18ca9-0b09-441a-9a0c-fb063630d708.png" loading="lazy"></p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p><strong>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同</strong>。</p><p><img src="/mysql/learn-mysql-022/72fe492e-f1cb-4cfc-92f8-412fb3ae6fec.png" loading="lazy"></p><h4 id="不可重复读和幻读区别"><a href="#不可重复读和幻读区别" class="headerlink" title="不可重复读和幻读区别"></a>不可重复读和幻读区别</h4><p><strong>不可重复读的重点是修改，幻读的重点在于新增或者删除</strong>。</p><p>例 1（同样的条件，你读取过的数据，再次读取出来发现值不一样了 ）：事务 1 中的 A 先生读取自己的工资为 1000 的操 作还没完成，事务 2 中的 B 先生就修改了 A 的工资为 2000，导 致 A 再读自己的工资时工资变为 2000；这就是不可重复读。</p><p>例 2（同样的条件，第 1 次和第 2 次读出来的记录数不一样 ）：假某工资单表中工资大于 3000 的有 4 人，事务 1 读取了所 有工资大于 3000 的人，共查到 4 条记录，这时事务 2 又插入了一条工资大于 3000 的记录，事务 1 再次读取时查到的记 录就变为了 5 条，这样就导致了幻读。</p><h3 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h3><ol><li>未提交读，事务中发生了修改，即使没有提交，其他事务也是可见的，比如对于一个数 A 原来 50 修改为 100，但是我还没有提交修改，另一个事务看到这个修改，而这个时候原事务发生了回滚，这时候 A 还是 50，但是另一个事务看到的 A 是 100. <strong>可能会导致脏读、幻读或不可重复读</strong></li><li>提交读，对于一个事务从开始直到提交之前，所做的任何修改是其他事务不可见的，举例就是对于一个数 A 原来是 50，然后提交修改成 100，这个时候另一个事务在 A 提交修改之前，读取的 A 是 50，刚读取完，A 就被修改成 100，这个时候另一个事务再进行读取发现 A 就突然变成 100 了；<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li><li>可重复读，就是对一个记录读取多次的记录是相同的，比如对于一个数 A 读取的话一直是 A，前后两次读取的 A 是一致的；<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li><li>可串行化读，在并发情况下，和串行化的读取的结果是一致的，没有什么不同，比如不会发生脏读和幻读；<strong>该级别可以防止脏读、不可重复读以及幻读。</strong></li></ol><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>READ-UNCOMMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ-COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE-READ</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）。</p><p><strong>这里需要注意的是</strong>：与 SQL 标准不同的地方在于 InnoDB 存储引擎在 REPEATABLE-READ（可重读）事务隔离级别 下使用的是 <strong>Next-Key Lock 锁</strong>算法，因此可以避免幻读的产生，这与其他数据库系统 (如 SQL Server) 是不同的。所以 说 InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读） 已经可以完全保证事务的隔离性要 求，即达到了 SQL 标准的 SERIALIZABLE (可串行化) 隔离级别。</p><p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 READ-COMMITTED (读取提交内 容):，但是你要知道的是 InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）并不会有任何性能损失</strong>。</p><p>InnoDB 存储引擎在分布式事务 的情况下一般会用到 SERIALIZABLE (可串行化) 隔离级别。</p><h3 id="为什么使用索引"><a href="#为什么使用索引" class="headerlink" title="为什么使用索引"></a>为什么使用索引</h3><ul><li>通过创建<strong>唯一性索引</strong>，可以保证数据库表中每一行数据的唯一性。</li><li>可以大大<strong>加快数据的检索速度</strong>，这也是创建索引的最主要的原因。</li><li>帮助服务器<strong>避免排序和临时表</strong></li><li>将<strong>随机 IO 变为顺序 IO</strong>。</li><li>可以加速<strong>表和表之间的连接</strong>，特别是在实现数据的参考完整性方面特别有意义。</li></ul><h3 id="索引这么多优点，为什么不对表总的每一列创建一个索引"><a href="#索引这么多优点，为什么不对表总的每一列创建一个索引" class="headerlink" title="索引这么多优点，为什么不对表总的每一列创建一个索引"></a>索引这么多优点，为什么不对表总的每一列创建一个索引</h3><ul><li>当对表中的数据进行增加、删除和修改的时候，<strong>索引也要动态的维护</strong>，这样就降低了数据的维护速度。</li><li><strong>索引需要占物理空间</strong>，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立簇索引，那么需要的空间就会更大。</li><li><strong>创建索引和维护索引要耗费时间</strong>，这种时间随着数据量的增加而增加</li></ul><h3 id="索引如何提高查询速度的"><a href="#索引如何提高查询速度的" class="headerlink" title="索引如何提高查询速度的"></a>索引如何提高查询速度的</h3><p>将无序的数据变成相对有序的数据（就像查有目的一样）</p><h3 id="使用索引的注意事项"><a href="#使用索引的注意事项" class="headerlink" title="使用索引的注意事项"></a>使用索引的注意事项</h3><ul><li>在经常需要搜索的列上，可以加快搜索的速度；</li><li>在经常使用在 where 子句中的列上面创建索引，加快条件的判断速度。</li><li>在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间</li><li>在中到大型表索引都是非常有效的，但是特大型表的维护开销会很大，不适合建索引</li><li>在经常用到连续的列上，这些列主要是由一些外键，可以加快连接的速度</li><li>避免 where 子句中对字段施加函数，这会造成无法命中索引</li><li>在使用 InnoDB 时使用与业务无关的自增主键作为主键，即使用逻辑主键，而不要使用业务主键。</li><li><strong>将打算加索引的列设置为 NOT NULL，否则将导致引擎放弃使用索引而进行全表扫描</strong></li><li>删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗</li><li>在使用 limit offset 查询缓存时，可以借助索引来提高性能。</li></ul><h3 id="MySQL-索引主要使用的两种数据结构"><a href="#MySQL-索引主要使用的两种数据结构" class="headerlink" title="MySQL 索引主要使用的两种数据结构"></a>MySQL 索引主要使用的两种数据结构</h3><ul><li><strong>哈希索引</strong>，对于哈希索引来说，底层的数据结构肯定是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择 BTree 索引</li><li><strong>BTree 索引</strong>，Mysql 的 BTree 索引使用的是 B 树中的 B+Tree 但对于主要的两种存储引擎（MyISAM 和 InnoDB）的实现方式是不同的。</li></ul><h3 id="myisam-和-innodb-实现-btree-索引方式的区别"><a href="#myisam-和-innodb-实现-btree-索引方式的区别" class="headerlink" title="myisam 和 innodb 实现 btree 索引方式的区别"></a>myisam 和 innodb 实现 btree 索引方式的区别</h3><ul><li>MyISAM，<strong>B+Tree 叶节点的 data 域存放的是数据记录的地址</strong>，在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 key 存在，则取出其 data 域的值，然后以 data 域的值为地址读区相应的数据记录，这被称为 “非聚簇索引”</li><li>InnoDB，其数据文件本身就是索引文件，相比 MyISAM，<strong>索引文件和数据文件是分离的</strong>，<strong>其表数据文件本身就是按 B+Tree 组织的一个索引结构，树的节点 data 域保存了完整的数据记录</strong>，这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为 “聚簇索引” 或者聚集索引，而其余的索引都作为辅助索引，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方，在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，在走一遍主索引。因此，在设计表的时候，不建议使用过长的字段为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</li></ul><h3 id="数据库结构优化"><a href="#数据库结构优化" class="headerlink" title="数据库结构优化"></a>数据库结构优化</h3><ul><li><strong>范式优化</strong>： 比如消除冗余（节省空间。。）</li><li><strong>反范式优化</strong>：比如适当加冗余等（减少 join）</li><li><strong>限定数据的范围</strong>： 务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内。</li><li><strong>读 &#x2F; 写分离</strong>： 经典的数据库拆分方案，主库负责写，从库负责读；</li><li><strong>拆分表</strong>：分区将数据在物理上分隔开，不同分区的数据可以制定保存在处于不同磁盘上的数据文件里。这样，当对这个表进行查询时，只需要在表分区中进行扫描，而不必进行全表扫描，明显缩短了查询时间，另外处于不同磁盘的分区也将对这个表的数据传输分散在不同的磁盘 I&#x2F;O，一个精心设置的分区可以将数据传输对磁盘 I&#x2F;O 竞争均匀地分散开。对数据量大的时时表可采取此方法。可按月自动建表分区。</li></ul><p><strong>拆分其实又分垂直拆分和水平拆分：</strong></p><ul><li>案例： 简单购物系统暂设涉及如下表：</li><li><ol><li>产品表（数据量 10w，稳定）</li></ol></li><li><ol><li>订单表（数据量 200w，且有增长趋势）</li></ol></li><li><ol><li>用户表 （数据量 100w，且有增长趋势）</li></ol></li><li>以 mysql 为例讲述下水平拆分和垂直拆分，mysql 能容忍的数量级在百万静态数据可以到千万</li><li><strong>垂直拆分：</strong><ul><li>解决问题：表与表之间的 io 竞争</li><li>不解决问题：单表中数据量增长出现的压力</li><li>方案： 把产品表和用户表放到一个 server 上 订单表单独放到一个 server 上</li></ul></li><li><strong>水平拆分：</strong><ul><li>解决问题：单表中数据量增长出现的压力</li><li>不解决问题：表与表之间的 io 争夺</li></ul></li><li>方案：<strong>用户表</strong> 通过性别拆分为男用户表和女用户表，<strong>订单表</strong> 通过已完成和完成中拆分为已完成订单和未完成订单，<strong>产品表</strong> 未完成订单放一个 server 上，已完成订单表盒男用户表放一个 server 上，女用户表放一个 server 上 (女的爱购物 哈哈)。</li></ul><h3 id="主键超键候选键外键是什么"><a href="#主键超键候选键外键是什么" class="headerlink" title="主键超键候选键外键是什么"></a>主键超键候选键外键是什么</h3><ul><li><strong>超键</strong>：在关系中能唯一标识<strong>元组的属性集</strong>称为关系模式的超键</li><li><strong>候选键</strong>：不含有<strong>多余属性的超键</strong>称为候选键。也就是在候选键中，若再删除属性，就不是键了！</li><li><strong>主键</strong>：<strong>用户选作元组标识的一个候选键程序主键</strong></li><li><strong>外键</strong>：如果关系模式 <strong>R 中属性 K 是其它模式的主键</strong>，那么 <strong>k 在模式 R 中称为外键</strong>。</li></ul><p><strong>举例</strong>：</p><table><thead><tr><th>学号</th><th>姓名</th><th>性别</th><th>年龄</th><th>系别</th><th>专业</th></tr></thead><tbody><tr><td>20020612</td><td>李辉</td><td>男</td><td>20</td><td>计算机</td><td>软件开发</td></tr><tr><td>20060613</td><td>张明</td><td>男</td><td>18</td><td>计算机</td><td>软件开发</td></tr><tr><td>20060614</td><td>王小玉</td><td>女</td><td>19</td><td>物理</td><td>力学</td></tr><tr><td>20060615</td><td>李淑华</td><td>女</td><td>17</td><td>生物</td><td>动物学</td></tr><tr><td>20060616</td><td>赵静</td><td>男</td><td>21</td><td>化学</td><td>食品化学</td></tr><tr><td>20060617</td><td>赵静</td><td>女</td><td>20</td><td>生物</td><td>植物学</td></tr></tbody></table><ol><li>超键：于是我们从例子中可以发现 学号是标识学生实体的唯一标识。那么该元组的超键就为学号。除此之外我们还可以把它跟其他属性组合起来，比如：(<code>学号</code>，<code>性别</code>)，(<code>学号</code>，<code>年龄</code>)</li><li>候选键：根据例子可知，学号是一个可以唯一标识元组的唯一标识，因此学号是一个候选键，实际上，候选键是超键的子集，比如 （学号，年龄）是超键，但是它不是候选键。因为它还有了额外的属性。</li><li>主键：简单的说，例子中的元组的候选键为学号，但是我们选定他作为该元组的唯一标识，那么学号就为主键。</li><li>外键是相对于主键的，比如在学生记录里，主键为学号，在成绩单表中也有学号字段，因此学号为成绩单表的外键，为学生表的主键。</li></ol><p><strong>主键为候选键的子集，候选键为超键的子集，而外键的确定是相对于主键的。</strong></p><h3 id="drop-delete-与-truncate-的区别"><a href="#drop-delete-与-truncate-的区别" class="headerlink" title="drop,delete 与 truncate 的区别"></a>drop,delete 与 truncate 的区别</h3><ul><li><p>drop 直接删掉表；</p></li><li><p>truncate 删除表中数据，再插入时自增长 id 又从 1 开始；</p></li><li><p>delete 删除表中数据，可以加 where 字句。</p></li><li><p>DELETE 语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行进行回滚操作。TRUNCATE TABLE 则一次性地从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快。</p></li><li><p>表和索引所占空间。当表被 TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，而 DELETE 操作不会减少表或索引所占用的空间。drop 语句将表所占用的空间全释放掉。</p></li><li><p>一般而言，drop &gt; truncate &gt; delete</p></li><li><p>应用范围。TRUNCATE 只能对 TABLE；DELETE 可以是 table 和 view</p></li><li><p>TRUNCATE 和 DELETE 只删除数据，而 DROP 则删除整个表（结构和数据）。</p></li><li><p>truncate 与不带 where 的 delete ：只删除数据，而不删除表的结构（定义）drop 语句将删除表的结构被依赖的约束（constrain), 触发器（trigger) 索引（index); 依赖于该表的存储过程 &#x2F; 函数将被保留，但其状态会变为：invalid。</p></li><li><p>delete 语句为 DML（Data Manipulation Language), 这个操作会被放到 rollback segment 中，事务提交后才生效。如果有相应的 tigger, 执行的时候将被触发。</p></li><li><p>truncate、drop 是 DDL（Data Define Language), 操作立即生效，原数据不放到 rollback segment 中，不能回滚</p></li><li><p>在没有备份情况下，谨慎使用 drop 与 truncate。要删除部分数据行采用 delete 且注意结合 where 来约束影响范围。回滚段要足够大。要删除表用 drop; 若想保留表而将表中数据删除，如果于事务无关，用 truncate 即可实现。如果和事务有关，或老是想触发 trigger, 还是用 delete。</p></li><li><p>Truncate table 表名 速度快，而且效率高，因为: truncate table 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少。DELETE 语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE 通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。</p></li><li><p>TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用 DELETE。如果要删除表定义及其数据，请使用 DROP TABLE 语句。</p></li><li><p>对于由 FOREIGN KEY 约束引用的表，不能使用 TRUNCATE TABLE，而应使用不带 WHERE 子句的 DELETE 语句。由于 TRUNCATE TABLE 不记录在日志中，所以它不能激活触发器。</p></li></ul><h3 id="视图的作用，视图可以更改吗"><a href="#视图的作用，视图可以更改吗" class="headerlink" title="视图的作用，视图可以更改吗"></a>视图的作用，视图可以更改吗</h3><p>视图是虚拟的表，与包含数据的表不一样，视图只包含使用时动态检索数据的查询；不包含任何列或数据。使用视图可以简化复杂的 sql 操作，隐藏具体的细节，保护数据；视图创建后，可以使用与表相同的方式利用它们。</p><p>视图不能被索引，也不能有关联的触发器或默认值，如果视图本身内有 order by 则对视图再次 order by 将被覆盖。</p><p>创建视图：<code>create view xxx as xxxx</code></p><p>对于某些视图比如未使用联结子查询分组聚集函数 Distinct Union 等，是可以对其更新的，对视图的更新将对基表进行更新；但是视图主要用于简化检索，保护数据，并不用于更新，而且大部分视图都不可以更新。</p><h3 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h3><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。 所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。简而言之，<strong>第一范式就是无重复的列</strong>。</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。这个惟一属性列被称为主关键字或主键、主码。 第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，<strong>第二范式就是非主属性非部分依赖于主关键字</strong>。</p><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，<strong>存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</strong>简而言之，第三范式就是属性不依赖于其它非主属性。（我的理解是消除冗余）</p><h3 id="什么是覆盖索引"><a href="#什么是覆盖索引" class="headerlink" title="什么是覆盖索引"></a>什么是覆盖索引</h3><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称 之为 “覆盖索引”。我们知道在 InnoDB 存储引 擎中，如果不是主键索引，叶子节点存储的是主键 + 列值。最终还是要 “回表”，也就是要通过主键再查找一次，这样就 会比较慢。覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！</p>]]></content>
    
    
    <summary type="html">MySQL知识点总结</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-Mysql工具之ibinlog2sql：基于Binlog对误操作恢复工具</title>
    <link href="https://theme-next.js.org/mysql/binlog2sql/"/>
    <id>https://theme-next.js.org/mysql/binlog2sql/</id>
    <published>2023-03-29T03:18:25.000Z</published>
    <updated>2023-03-29T07:43:19.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="binlog2sql"><a href="#binlog2sql" class="headerlink" title="binlog2sql"></a>binlog2sql</h2><p>从MySQL binlog解析出你要的SQL。根据不同选项，你可以得到原始SQL、回滚SQL、去除主键的INSERT SQL等。</p><h2 id="my2sql"><a href="#my2sql" class="headerlink" title="my2sql"></a>my2sql</h2><p>go版MySQL binlog解析工具，通过解析MySQL binlog ，可以生成原始SQL、回滚SQL、去除主键的INSERT SQL等，也可以生成DML统计信息。类似工具有binlog2sql、MyFlash、my2fback等，本工具基于my2fback、binlog_rollback工具二次开发而来。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdWhyL215MnNxbA==">https://github.com/liuhr/my2sql<i class="fa fa-external-link-alt"></i></span></p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul><li>数据快速回滚(闪回)</li><li>主从切换后新master丢数据的修复</li><li>从binlog生成标准SQL，带来的衍生功能</li></ul><h2 id="项目状态"><a href="#项目状态" class="headerlink" title="项目状态"></a>项目状态</h2><p>正常维护。应用于部分公司线上环境。</p><ul><li>已测试环境<ul><li>Python 2.7, 3.4+</li><li>MySQL 5.6, 5.7</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; git clone https://github.com/danfengcao/binlog2sql.git &amp;&amp; cd binlog2sql</span><br><span class="line">shell&gt; pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>git与pip的安装问题请自行搜索解决。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="MySQL-server必须设置以下参数"><a href="#MySQL-server必须设置以下参数" class="headerlink" title="MySQL server必须设置以下参数:"></a>MySQL server必须设置以下参数:</h3><pre><code>[mysqld]server_id = 1log_bin = /var/log/mysql/mysql-bin.logmax_binlog_size = 1Gbinlog_format = rowbinlog_row_image = full</code></pre><h3 id="user需要的最小权限集合："><a href="#user需要的最小权限集合：" class="headerlink" title="user需要的最小权限集合："></a>user需要的最小权限集合：</h3><pre><code>select, super/replication client, replication slave建议授权GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO </code></pre><p><strong>权限说明</strong></p><ul><li>select：需要读取server端information_schema.COLUMNS表，获取表结构的元信息，拼接成可视化的sql语句</li><li>super&#x2F;replication client：两个权限都可以，需要执行&#39;SHOW MASTER STATUS&#39;, 获取server端的binlog列表</li><li>replication slave：通过BINLOG_DUMP协议获取binlog内容的权限</li></ul><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><strong>解析出标准SQL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; python binlog2sql.py -h127.0.0.1 -P3306 -uadmin -p<span class="string">&#x27;admin&#x27;</span> -dtest -t test3 test4 --start-file=<span class="string">&#x27;mysql-bin.000002&#x27;</span></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">INSERT INTO `<span class="built_in">test</span>`.`test3`(`addtime`, `data`, `<span class="built_in">id</span>`) VALUES (<span class="string">&#x27;2016-12-10 13:03:38&#x27;</span>, <span class="string">&#x27;english&#x27;</span>, 4); <span class="comment">#start 570 end 736</span></span><br><span class="line">UPDATE `<span class="built_in">test</span>`.`test3` SET `addtime`=<span class="string">&#x27;2016-12-10 12:00:00&#x27;</span>, `data`=<span class="string">&#x27;中文&#x27;</span>, `<span class="built_in">id</span>`=3 WHERE `addtime`=<span class="string">&#x27;2016-12-10 13:03:22&#x27;</span> AND `data`=<span class="string">&#x27;中文&#x27;</span> AND `<span class="built_in">id</span>`=3 LIMIT 1; <span class="comment">#start 763 end 954</span></span><br><span class="line">DELETE FROM `<span class="built_in">test</span>`.`test3` WHERE `addtime`=<span class="string">&#x27;2016-12-10 13:03:38&#x27;</span> AND `data`=<span class="string">&#x27;english&#x27;</span> AND `<span class="built_in">id</span>`=4 LIMIT 1; <span class="comment">#start 981 end 1147</span></span><br></pre></td></tr></table></figure><p><strong>解析出回滚SQL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">shell&gt; python binlog2sql.py --flashback -h127.0.0.1 -P3306 -uadmin -p<span class="string">&#x27;admin&#x27;</span> -dtest -ttest3 --start-file=<span class="string">&#x27;mysql-bin.000002&#x27;</span> --start-position=763 --stop-position=1147</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">INSERT INTO `<span class="built_in">test</span>`.`test3`(`addtime`, `data`, `<span class="built_in">id</span>`) VALUES (<span class="string">&#x27;2016-12-10 13:03:38&#x27;</span>, <span class="string">&#x27;english&#x27;</span>, 4); <span class="comment">#start 981 end 1147</span></span><br><span class="line">UPDATE `<span class="built_in">test</span>`.`test3` SET `addtime`=<span class="string">&#x27;2016-12-10 13:03:22&#x27;</span>, `data`=<span class="string">&#x27;中文&#x27;</span>, `<span class="built_in">id</span>`=3 WHERE `addtime`=<span class="string">&#x27;2016-12-10 12:00:00&#x27;</span> AND `data`=<span class="string">&#x27;中文&#x27;</span> AND `<span class="built_in">id</span>`=3 LIMIT 1; <span class="comment">#start 763 end 954</span></span><br></pre></td></tr></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p><strong>mysql连接配置</strong></p><p>-h host; -P port; -u user; -p password</p><p><strong>解析模式</strong></p><p>--stop-never 持续解析binlog。可选。默认False，同步至执行命令时最新的binlog位置。</p><p>-K, --no-primary-key 对INSERT语句去除主键。可选。默认False</p><p>-B, --flashback 生成回滚SQL，可解析大文件，不受内存限制。可选。默认False。与stop-never或no-primary-key不能同时添加。</p><p>--back-interval -B模式下，每打印一千行回滚SQL，加一句SLEEP多少秒，如不想加SLEEP，请设为0。可选。默认1.0。</p><p><strong>解析范围控制</strong></p><p>--start-file 起始解析文件，只需文件名，无需全路径 。必须。</p><p>--start-position&#x2F;--start-pos 起始解析位置。可选。默认为start-file的起始位置。</p><p>--stop-file&#x2F;--end-file 终止解析文件。可选。默认为start-file同一个文件。若解析模式为stop-never，此选项失效。</p><p>--stop-position&#x2F;--end-pos 终止解析位置。可选。默认为stop-file的最末位置；若解析模式为stop-never，此选项失效。</p><p>--start-datetime 起始解析时间，格式&#39;%Y-%m-%d %H:%M:%S&#39;。可选。默认不过滤。</p><p>--stop-datetime 终止解析时间，格式&#39;%Y-%m-%d %H:%M:%S&#39;。可选。默认不过滤。</p><p><strong>对象过滤</strong></p><p>-d, --databases 只解析目标db的sql，多个库用空格隔开，如-d db1 db2。可选。默认为空。</p><p>-t, --tables 只解析目标table的sql，多张表用空格隔开，如-t tbl1 tbl2。可选。默认为空。</p><p>--only-dml 只解析dml，忽略ddl。可选。默认False。</p><p>--sql-type 只解析指定类型，支持INSERT, UPDATE, DELETE。多个类型用空格隔开，如--sql-type INSERT DELETE。可选。默认为增删改都解析。用了此参数但没填任何类型，则三者都不解析。</p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><h4 id="误删整张表数据，需要紧急回滚"><a href="#误删整张表数据，需要紧急回滚" class="headerlink" title="误删整张表数据，需要紧急回滚"></a><strong>误删整张表数据，需要紧急回滚</strong></h4><p>闪回详细介绍可参见example目录下《闪回原理与实战》<a href="./example/mysql-flashback-priciple-and-practice.md">example&#x2F;mysql-flashback-priciple-and-practice.md</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>库tbl表原有数据</span><br><span class="line">mysql&gt; select * from tbl;</span><br><span class="line">+----+--------+---------------------+</span><br><span class="line">| <span class="built_in">id</span> | name   | addtime             |</span><br><span class="line">+----+--------+---------------------+</span><br><span class="line">|  1 | 小赵   | 2016-12-10 00:04:33 |</span><br><span class="line">|  2 | 小钱   | 2016-12-10 00:04:48 |</span><br><span class="line">|  3 | 小孙   | 2016-12-13 20:25:00 |</span><br><span class="line">|  4 | 小李   | 2016-12-12 00:00:00 |</span><br><span class="line">+----+--------+---------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from tbl;</span><br><span class="line">Query OK, 4 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">20:28时，tbl表误操作被清空</span><br><span class="line">mysql&gt; select * from tbl;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>恢复数据步骤</strong>：</p><ol><li><p>登录mysql，查看目前的binlog文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000051 |       967 |</span><br><span class="line">| mysql-bin.000052 |       965 |</span><br><span class="line">+------------------+-----------+</span><br></pre></td></tr></table></figure></li><li><p>最新的binlog文件是mysql-bin.000052，我们再定位误操作SQL的binlog位置。误操作人只能知道大致的误操作时间，我们根据大致时间过滤数据。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; python binlog2sql/binlog2sql.py -h127.0.0.1 -P3306 -uadmin -p<span class="string">&#x27;admin&#x27;</span> -dtest -ttbl --start-file=<span class="string">&#x27;mysql-bin.000052&#x27;</span> --start-datetime=<span class="string">&#x27;2016-12-13 20:25:00&#x27;</span> --stop-datetime=<span class="string">&#x27;2016-12-13 20:30:00&#x27;</span></span><br><span class="line">输出：</span><br><span class="line">INSERT INTO `<span class="built_in">test</span>`.`tbl`(`addtime`, `<span class="built_in">id</span>`, `name`) VALUES (<span class="string">&#x27;2016-12-13 20:26:00&#x27;</span>, 4, <span class="string">&#x27;小李&#x27;</span>); <span class="comment">#start 317 end 487 time 2016-12-13 20:26:26</span></span><br><span class="line">UPDATE `<span class="built_in">test</span>`.`tbl` SET `addtime`=<span class="string">&#x27;2016-12-12 00:00:00&#x27;</span>, `<span class="built_in">id</span>`=4, `name`=<span class="string">&#x27;小李&#x27;</span> WHERE `addtime`=<span class="string">&#x27;2016-12-13 20:26:00&#x27;</span> AND `<span class="built_in">id</span>`=4 AND `name`=<span class="string">&#x27;小李&#x27;</span> LIMIT 1; <span class="comment">#start 514 end 701 time 2016-12-13 20:27:07</span></span><br><span class="line">DELETE FROM `<span class="built_in">test</span>`.`tbl` WHERE `addtime`=<span class="string">&#x27;2016-12-10 00:04:33&#x27;</span> AND `<span class="built_in">id</span>`=1 AND `name`=<span class="string">&#x27;小赵&#x27;</span> LIMIT 1; <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br><span class="line">DELETE FROM `<span class="built_in">test</span>`.`tbl` WHERE `addtime`=<span class="string">&#x27;2016-12-10 00:04:48&#x27;</span> AND `<span class="built_in">id</span>`=2 AND `name`=<span class="string">&#x27;小钱&#x27;</span> LIMIT 1; <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br><span class="line">DELETE FROM `<span class="built_in">test</span>`.`tbl` WHERE `addtime`=<span class="string">&#x27;2016-12-13 20:25:00&#x27;</span> AND `<span class="built_in">id</span>`=3 AND `name`=<span class="string">&#x27;小孙&#x27;</span> LIMIT 1; <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br><span class="line">DELETE FROM `<span class="built_in">test</span>`.`tbl` WHERE `addtime`=<span class="string">&#x27;2016-12-12 00:00:00&#x27;</span> AND `<span class="built_in">id</span>`=4 AND `name`=<span class="string">&#x27;小李&#x27;</span> LIMIT 1; <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br></pre></td></tr></table></figure></li><li><p>我们得到了误操作sql的准确位置在728-938之间，再根据位置进一步过滤，使用flashback模式生成回滚sql，检查回滚sql是否正确(注：真实环境下，此步经常会进一步筛选出需要的sql。结合grep、编辑器等)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; python binlog2sql/binlog2sql.py -h127.0.0.1 -P3306 -uadmin -p<span class="string">&#x27;admin&#x27;</span> -dtest -ttbl --start-file=<span class="string">&#x27;mysql-bin.000052&#x27;</span> --start-position=3346 --stop-position=3556 -B &gt; rollback.sql | <span class="built_in">cat</span></span><br><span class="line">输出：</span><br><span class="line">INSERT INTO `<span class="built_in">test</span>`.`tbl`(`addtime`, `<span class="built_in">id</span>`, `name`) VALUES (<span class="string">&#x27;2016-12-12 00:00:00&#x27;</span>, 4, <span class="string">&#x27;小李&#x27;</span>); <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br><span class="line">INSERT INTO `<span class="built_in">test</span>`.`tbl`(`addtime`, `<span class="built_in">id</span>`, `name`) VALUES (<span class="string">&#x27;2016-12-13 20:25:00&#x27;</span>, 3, <span class="string">&#x27;小孙&#x27;</span>); <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br><span class="line">INSERT INTO `<span class="built_in">test</span>`.`tbl`(`addtime`, `<span class="built_in">id</span>`, `name`) VALUES (<span class="string">&#x27;2016-12-10 00:04:48&#x27;</span>, 2, <span class="string">&#x27;小钱&#x27;</span>); <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br><span class="line">INSERT INTO `<span class="built_in">test</span>`.`tbl`(`addtime`, `<span class="built_in">id</span>`, `name`) VALUES (<span class="string">&#x27;2016-12-10 00:04:33&#x27;</span>, 1, <span class="string">&#x27;小赵&#x27;</span>); <span class="comment">#start 728 end 938 time 2016-12-13 20:28:05</span></span><br></pre></td></tr></table></figure></li><li><p>确认回滚sql正确，执行回滚语句。登录mysql确认，数据回滚成功。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysql -h127.0.0.1 -P3306 -uadmin -p<span class="string">&#x27;admin&#x27;</span> &lt; rollback.sql</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tbl;</span><br><span class="line">+----+--------+---------------------+</span><br><span class="line">| <span class="built_in">id</span> | name   | addtime             |</span><br><span class="line">+----+--------+---------------------+</span><br><span class="line">|  1 | 小赵   | 2016-12-10 00:04:33 |</span><br><span class="line">|  2 | 小钱   | 2016-12-10 00:04:48 |</span><br><span class="line">|  3 | 小孙   | 2016-12-13 20:25:00 |</span><br><span class="line">|  4 | 小李   | 2016-12-12 00:00:00 |</span><br><span class="line">+----+--------+---------------------+</span><br></pre></td></tr></table></figure></li></ol><h3 id="限制（对比mysqlbinlog）"><a href="#限制（对比mysqlbinlog）" class="headerlink" title="限制（对比mysqlbinlog）"></a>限制（对比mysqlbinlog）</h3><ul><li>mysql server必须开启，离线模式下不能解析</li><li>参数 <em>binlog_row_image</em> 必须为FULL，暂不支持MINIMAL</li><li>解析速度不如mysqlbinlog</li></ul><h3 id="优点（对比mysqlbinlog）"><a href="#优点（对比mysqlbinlog）" class="headerlink" title="优点（对比mysqlbinlog）"></a>优点（对比mysqlbinlog）</h3><ul><li>纯Python开发，安装与使用都很简单</li><li>自带flashback、no-primary-key解析模式，无需再装补丁</li><li>flashback模式下，更适合<a href="./example/mysql-flashback-priciple-and-practice.md">闪回实战</a></li><li>解析为标准SQL，方便理解、筛选</li><li>代码容易改造，可以支持更多个性化解析</li></ul><h3 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmZlbmdjYW8=">danfengcao<i class="fa fa-external-link-alt"></i></span> 作者，维护者 [<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhbmZlbmdjYW9d">https://github.com/danfengcao]<i class="fa fa-external-link-alt"></i></span></li><li>大众点评DBA团队 想法交流，使用体验</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltemN5MTk4Nw==">赵承勇<i class="fa fa-external-link-alt"></i></span> pymysqlreplication权限bug #2</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JpbmdsdWNoZW4=">陈路炳<i class="fa fa-external-link-alt"></i></span> bug报告(字段值为空时的处理)，使用体验</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RCQS1qYW5l">dba-jane<i class="fa fa-external-link-alt"></i></span> pymysqlreplication时间字段浮点数bug #29</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1amlua2U=">lujinke<i class="fa fa-external-link-alt"></i></span> bug报告(set字段的处理 #32)</li></ul>]]></content>
    
    
    <summary type="html">从MySQL binlog解析出你要的SQL。根据不同选项，你可以得到原始SQL、回滚SQL、去除主键的INSERT SQL等</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
    <category term="innobd_ruby" scheme="https://theme-next.js.org/tags/innobd-ruby/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-Mysql工具之innodb_ruby：探究InnoDB存储结构的利器</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-021/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-021/</id>
    <published>2023-03-25T08:56:25.000Z</published>
    <updated>2023-04-06T05:42:07.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>innodb_ruby 是一款用 ruby 写的用来分析 innodb 物理文件的专业 DBA 工具，可以通过这款工具来窥探 innodb 内部的一些结构。</p></blockquote><h2 id="innodb-ruby简介"><a href="#innodb-ruby简介" class="headerlink" title="innodb_ruby简介"></a><strong>innodb_ruby简介</strong></h2><p>innodb_ruby是一款用ruby写的用来分析innodb物理文件的专业DBA工具，可以通过这款工具来窥探innodb内部的一些结构，注意不要在线上使用此工具，以避免对线上服务造成影响。官方网址 <span class="exturl" data-url="aHR0cHM6Ly9ydWJ5Z2Vtcy5vcmcvZ2Vtcy9pbm5vZGJfcnVieQ==">https://rubygems.org/gems/innodb_ruby<i class="fa fa-external-link-alt"></i></span>。</p><p><strong>命令语法</strong></p><p>在执行命令时，建议切换到mysql的datadir目录里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line">sxf@ubuntu:~$ innodb_space --help</span><br><span class="line"></span><br><span class="line">Usage: innodb_space &lt;options&gt; &lt;mode&gt;</span><br><span class="line">innodb_space &lt;选项&gt; &lt;模式&gt;</span><br><span class="line">命令主要分 options 和 mode 两大部分。</span><br><span class="line"></span><br><span class="line">Invocation examples:</span><br><span class="line"></span><br><span class="line">  innodb_space -s ibdata1 [-T tname [-I iname]] [options] &lt;mode&gt;</span><br><span class="line">    Use ibdata1 as the system tablespace and load the tname table (and the</span><br><span class="line">    iname index for modes that require it) from data located in the system</span><br><span class="line">    tablespace data dictionary. This will automatically generate a record</span><br><span class="line">    describer for any indexes.</span><br><span class="line"></span><br><span class="line">    参数：</span><br><span class="line">    -s 参数指的是系统表空间文件 ibdata1, 这个一般在datadir目录里可以找到。</span><br><span class="line">    -T 数据表名称，一般为数据库其中一个表的物理文件路径</span><br><span class="line">    -I 表示索引的名称, 如果是主键的话，直接填写 -I PRIMARY 即可，此时可省略此参数</span><br><span class="line"></span><br><span class="line">    如 innodb_space -s ibdata1 -T lab/tb space-indexes,则表示查看lab数据库的tb表的索引统计信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  innodb_space -f tname.ibd [-r ./desc.rb -d DescClass] [options] &lt;mode&gt;</span><br><span class="line">    Use the tname.ibd table (and the DescClass describer where required).</span><br><span class="line"></span><br><span class="line">The following options are supported:</span><br><span class="line"></span><br><span class="line">  --help, -?</span><br><span class="line">    Print this usage text.</span><br><span class="line"></span><br><span class="line">  --trace, -t</span><br><span class="line">    Enable tracing of all data read. Specify twice to enable even more</span><br><span class="line">    tracing (including reads during opening of the tablespace) which can</span><br><span class="line">    be quite noisy.</span><br><span class="line"></span><br><span class="line">  --system-space-file, -s &lt;arg&gt;</span><br><span class="line">    Load the system tablespace file or files &lt;arg&gt;: Either a single file e.g.</span><br><span class="line">    &quot;ibdata1&quot;, a comma-delimited list of files e.g. &quot;ibdata1,ibdata1&quot;, or a</span><br><span class="line">    directory name. If a directory name is provided, it will be scanned for all</span><br><span class="line">    files named &quot;ibdata?&quot; which will then be sorted alphabetically and used to</span><br><span class="line">    load the system tablespace.</span><br><span class="line"></span><br><span class="line">  --table-name, -T &lt;name&gt;</span><br><span class="line">    Use the table name &lt;name&gt;.</span><br><span class="line">    表名</span><br><span class="line"></span><br><span class="line">  --index-name, -I &lt;name&gt;</span><br><span class="line">    Use the index name &lt;name&gt;.</span><br><span class="line">    索引名</span><br><span class="line"></span><br><span class="line">  --space-file, -f &lt;file&gt;</span><br><span class="line">    Load the tablespace file &lt;file&gt;.</span><br><span class="line"></span><br><span class="line">  --page, -p &lt;page&gt;</span><br><span class="line">    Operate on the page &lt;page&gt;.</span><br><span class="line">    页数</span><br><span class="line"></span><br><span class="line">  --level, -l &lt;level&gt;</span><br><span class="line">    Operate on the level &lt;level&gt;.</span><br><span class="line">    索引树层级数，一般不会超过3</span><br><span class="line"></span><br><span class="line">  --list, -L &lt;list&gt;</span><br><span class="line">    Operate on the list &lt;list&gt;.</span><br><span class="line"></span><br><span class="line">  --fseg-id, -F &lt;fseg_id&gt;</span><br><span class="line">      Operate on the file segment (fseg) &lt;fseg_id&gt;.</span><br><span class="line"></span><br><span class="line">  --require, -r &lt;file&gt;</span><br><span class="line">    Use Ruby&#x27;s &quot;require&quot; to load the file &lt;file&gt;. This is useful for loading</span><br><span class="line">    classes with record describers.</span><br><span class="line"></span><br><span class="line">  --describer, -d &lt;describer&gt;</span><br><span class="line">    Use the named record describer to parse records in index pages.</span><br><span class="line"></span><br><span class="line">The following modes are supported:</span><br><span class="line">模式项列表</span><br><span class="line"></span><br><span class="line">  系统表空间</span><br><span class="line">  system-spaces</span><br><span class="line">    Print a summary of all spaces in the system.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  数据字典表(information_schema中数据库SYS_TABLES表内容，下同)</span><br><span class="line">  data-dictionary-tables</span><br><span class="line">    Print all records in the SYS_TABLES data dictionary table.</span><br><span class="line"></span><br><span class="line">  data-dictionary-columns</span><br><span class="line">    Print all records in the SYS_COLUMNS data dictionary table.</span><br><span class="line"></span><br><span class="line">  data-dictionary-indexes</span><br><span class="line">    Print all records in the SYS_INDEXES data dictionary table.</span><br><span class="line"></span><br><span class="line">  data-dictionary-fields</span><br><span class="line">    Print all records in the SYS_FIELDS data dictionary table.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  汇总表空间中的所有页信息，需要使用 --page/-p 参数指定页数</span><br><span class="line">  space-summary</span><br><span class="line">    Summarize all pages within a tablespace. A starting page number can be</span><br><span class="line">    provided with the --page/-p argument.</span><br><span class="line"></span><br><span class="line">  汇总表空间中的所有索引页信息，对于分析每个页记录填充率情况的时候很有用，同样需要使用--page/-p指定页数</span><br><span class="line">  space-index-pages-summary</span><br><span class="line">    Summarize all &quot;INDEX&quot; pages within a tablespace. This is useful to analyze</span><br><span class="line">    page fill rates and record counts per page. In addition to &quot;INDEX&quot; pages,</span><br><span class="line">    &quot;ALLOCATED&quot; pages are also printed and assumed to be completely empty.</span><br><span class="line">    A starting page number can be provided with the --page/-p argument.</span><br><span class="line"></span><br><span class="line">  与space-index-pages-summary差不多，但只显示一些摘要信息，需要配合参数一块使用</span><br><span class="line">  space-index-fseg-pages-summary</span><br><span class="line">    The same as space-index-pages-summary but only iterate one fseg, provided</span><br><span class="line">    with the --fseg-id/-F argument.</span><br><span class="line"></span><br><span class="line">  space-index-pages-free-plot</span><br><span class="line">    Use Ruby&#x27;s gnuplot module to produce a scatterplot of page free space for</span><br><span class="line">    all &quot;INDEX&quot; and &quot;ALLOCATED&quot; pages in a tablespace. More aesthetically</span><br><span class="line">    pleasing plots can be produced with space-index-pages-summary output,</span><br><span class="line">    but this is a quick and easy way to produce a passable plot. A starting</span><br><span class="line">    page number can be provided with the --page/-p argument.</span><br><span class="line"></span><br><span class="line">  遍历空间中的所有页面，统计每个类型的页共占用了多少页</span><br><span class="line">  space-page-type-regions</span><br><span class="line">    Summarize all contiguous regions of the same page type. This is useful to</span><br><span class="line">    provide an overall view of the space and allocations within it. A starting</span><br><span class="line">    page number can be provided with the --page/-p argument.</span><br><span class="line"></span><br><span class="line">  按类型汇总所有页面信息</span><br><span class="line">  space-page-type-summary</span><br><span class="line">    Summarize all pages by type. A starting page number can be provided with</span><br><span class="line">    the --page/-p argument.</span><br><span class="line"></span><br><span class="line">  表空间中所有索引统计信息（系统空间或每个文件表空间）</span><br><span class="line">  space-indexes</span><br><span class="line">    Summarize all indexes (actually each segment of the indexes) to show</span><br><span class="line">    the number of pages used and allocated, and the segment fill factor.</span><br><span class="line"></span><br><span class="line">  space-lists</span><br><span class="line">    Print a summary of all lists in a space.</span><br><span class="line"></span><br><span class="line">  space-list-iterate</span><br><span class="line">    Iterate through the contents of a space list.</span><br><span class="line"></span><br><span class="line">  space-extents</span><br><span class="line">    Iterate through all extents, printing the extent descriptor bitmap.</span><br><span class="line"></span><br><span class="line">  space-extents-illustrate</span><br><span class="line">    Iterate through all extents, illustrating the extent usage using ANSI</span><br><span class="line">    color and Unicode box drawing characters to show page usage throughout</span><br><span class="line">    the space.</span><br><span class="line"></span><br><span class="line">  space-extents-illustrate-svg</span><br><span class="line">    Iterate through all extents, illustrating the extent usage in SVG format</span><br><span class="line">    printed to stdout to show page usage throughout the space.</span><br><span class="line"></span><br><span class="line">  space-lsn-age-illustrate</span><br><span class="line">    Iterate through all pages, producing a heat map colored by the page LSN</span><br><span class="line">    using ANSI color and Unicode box drawing characters, allowing the user to</span><br><span class="line">    get an overview of page modification recency.</span><br><span class="line"></span><br><span class="line">  space-lsn-age-illustrate-svg</span><br><span class="line">    Iterate through all pages, producing a heat map colored by the page LSN</span><br><span class="line">    producing SVG format output, allowing the user to get an overview of page</span><br><span class="line">    modification recency.</span><br><span class="line"></span><br><span class="line">  space-inodes-fseg-id</span><br><span class="line">    Iterate through all inodes, printing only the FSEG ID.</span><br><span class="line"></span><br><span class="line">  space-inodes-summary</span><br><span class="line">    Iterate through all inodes, printing a short summary of each FSEG.</span><br><span class="line"></span><br><span class="line">  space-inodes-detail</span><br><span class="line">    Iterate through all inodes, printing a detailed report of each FSEG.</span><br><span class="line"></span><br><span class="line">  通过递归整个B+树（通过递归扫描所有页面，而不仅仅是按列表的叶子页面）来执行索引扫描（执行完整索引扫描）</span><br><span class="line">  index-recurse</span><br><span class="line">    Recurse an index, starting at the root (which must be provided in the first</span><br><span class="line">    --page/-p argument), printing the node pages, node pointers (links), leaf</span><br><span class="line">    pages. A record describer must be provided with the --describer/-d argument</span><br><span class="line">    to recurse indexes (in order to parse node pages).</span><br><span class="line"></span><br><span class="line">  将索引作为索引递归进行递归处理，但在索引页中打印每条记录的偏移量</span><br><span class="line">  index-record-offsets</span><br><span class="line">    Recurse an index as index-recurse does, but print the offsets of each</span><br><span class="line">    record within the page.</span><br><span class="line"></span><br><span class="line">  index-digraph</span><br><span class="line">    Recurse an index as index-recurse does, but print a dot-compatible digraph</span><br><span class="line">    instead of a human-readable summary.</span><br><span class="line"></span><br><span class="line">  打印指定 level 级别的所有page信息</span><br><span class="line">  index-level-summary</span><br><span class="line">    Print a summary of all pages at a given level (provided with the --level/-l</span><br><span class="line">    argument) in an index.</span><br><span class="line"></span><br><span class="line">  index-fseg-internal-lists</span><br><span class="line">  index-fseg-leaf-lists</span><br><span class="line">    Print a summary of all lists in an index file segment. Index root page must</span><br><span class="line">    be provided with --page/-p.</span><br><span class="line"></span><br><span class="line">  index-fseg-internal-list-iterate</span><br><span class="line">  index-fseg-leaf-list-iterate</span><br><span class="line">    Iterate the file segment list (whose name is provided in the first --list/-L</span><br><span class="line">    argument) for internal or leaf pages for a given index (whose root page</span><br><span class="line">    is provided in the first --page/-p argument). The lists used for each</span><br><span class="line">    index are &quot;full&quot;, &quot;not_full&quot;, and &quot;free&quot;.</span><br><span class="line"></span><br><span class="line">  index-fseg-internal-frag-pages</span><br><span class="line">  index-fseg-leaf-frag-pages</span><br><span class="line">    Print a summary of all fragment pages in an index file segment. Index root</span><br><span class="line">    page must be provided with --page/-p.</span><br><span class="line"></span><br><span class="line">  page-dump</span><br><span class="line">    Dump the contents of a page, using the Ruby pp (&quot;pretty-print&quot;) module.</span><br><span class="line"></span><br><span class="line">  page-account</span><br><span class="line">    Account for a page&#x27;s usage in FSEGs.</span><br><span class="line"></span><br><span class="line">  page-validate</span><br><span class="line">    Validate the contents of a page.</span><br><span class="line"></span><br><span class="line">  页目录字典记录</span><br><span class="line">  page-directory-summary</span><br><span class="line">    Summarize the record contents of the page directory in a page. If a record</span><br><span class="line">    describer is available, the key of each record will be printed.</span><br><span class="line"></span><br><span class="line">  对一个页的所有记录进行汇总</span><br><span class="line">  page-records</span><br><span class="line">    Summarize all records within a page.</span><br><span class="line"></span><br><span class="line">  详细说明一个页面的内容，并且根据类型进行着色显示</span><br><span class="line">  page-illustrate</span><br><span class="line">    Produce an illustration of the contents of a page.</span><br><span class="line"></span><br><span class="line">  record-dump</span><br><span class="line">    Dump a detailed description of a record and the data it contains. A record</span><br><span class="line">    offset must be provided with -R/--record.</span><br><span class="line"></span><br><span class="line">  record-history</span><br><span class="line">    Summarize the history (undo logs) for a record. A record offset must be</span><br><span class="line">    provided with -R/--record.</span><br><span class="line"></span><br><span class="line">  undo-history-summary</span><br><span class="line">    Summarize all records in the history list (undo logs).</span><br><span class="line"></span><br><span class="line">  undo-record-dump</span><br><span class="line">    Dump a detailed description of an undo record and the data it contains.</span><br><span class="line">    A record offset must be provided with -R/--record.</span><br></pre></td></tr></table></figure><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a><strong>数据准备</strong></h2><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t_user` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `c_user_id` varchar(36) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `c_name` varchar(22) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `c_province_id` int(11) NOT NULL,</span><br><span class="line">  `c_city_id` int(11) NOT NULL,</span><br><span class="line">  `create_time` datetime NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_user_id` (`c_user_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><h3 id="第一种方式-使用存储过程和内存表"><a href="#第一种方式-使用存储过程和内存表" class="headerlink" title="第一种方式: 使用存储过程和内存表"></a>第一种方式: 使用存储过程和内存表</h3><h4 id="创建内存表"><a href="#创建内存表" class="headerlink" title="创建内存表"></a>创建内存表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 利用 MySQL 内存表插入速度快的特点，我们先利用函数和存储过程在内存表中生成数据，然后再从内存表插入普通表中</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t_user_memory <span class="keyword">like</span> t_user;</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t_user_memory engine <span class="operator">=</span> MEMORY;</span><br></pre></td></tr></table></figure><h4 id="创建自定义函数和存储过程"><a href="#创建自定义函数和存储过程" class="headerlink" title="创建自定义函数和存储过程"></a>创建自定义函数和存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># 创建随机字符串和随机时间的函数</span><br><span class="line"># randStr</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`<span class="operator">%</span>` <span class="keyword">FUNCTION</span> `randStr`(n <span class="type">int</span>) <span class="keyword">RETURNS</span> <span class="type">varchar</span>(<span class="number">255</span>) CHARSET utf8mb4</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> chars_str <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> return_str <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">        <span class="keyword">SET</span> return_str <span class="operator">=</span> concat(return_str, <span class="built_in">substring</span>(chars_str, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">62</span>), <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"># randNum</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`<span class="operator">%</span>` <span class="keyword">FUNCTION</span> `randNum`(n <span class="type">int</span>) <span class="keyword">RETURNS</span> <span class="type">varchar</span>(<span class="number">36</span>) CHARSET utf8mb4</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> chars_str <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0123456789&#x27;</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> return_str <span class="type">varchar</span>(<span class="number">36</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> ;</span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">        <span class="keyword">SET</span> return_str <span class="operator">=</span> concat(return_str, <span class="built_in">substring</span>(chars_str, <span class="built_in">FLOOR</span>(<span class="number">1</span> <span class="operator">+</span> RAND() <span class="operator">*</span> <span class="number">10</span>), <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    <span class="keyword">RETURN</span> return_str;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"># randDataTime</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`<span class="operator">%</span>` <span class="keyword">FUNCTION</span> `randDataTime`(sd DATETIME,ed DATETIME) <span class="keyword">RETURNS</span> datetime</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> sub <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> ret DATETIME;</span><br><span class="line">  <span class="keyword">SET</span> sub <span class="operator">=</span> <span class="built_in">ABS</span>(UNIX_TIMESTAMP(ed)<span class="operator">-</span>UNIX_TIMESTAMP(sd));</span><br><span class="line">  <span class="keyword">SET</span> ret <span class="operator">=</span> DATE_ADD(sd,<span class="type">INTERVAL</span> <span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span>(sub<span class="number">-1</span>)) <span class="keyword">SECOND</span>);</span><br><span class="line">  <span class="keyword">RETURN</span> ret;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"># 创建插入数据存储过程</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`<span class="operator">%</span>` <span class="keyword">PROCEDURE</span> `add_t_user_memory`(<span class="keyword">IN</span> n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    WHILE (i <span class="operator">&lt;=</span> n) DO</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user_memory (c_user_id, c_name, c_province_id,c_city_id, create_time) <span class="keyword">VALUES</span> (randNum(<span class="number">6</span>), randStr(<span class="number">20</span>), <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">1000</span>), <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">100</span>), randDataTime(<span class="string">&#x27;2018-12-12 12:00:21&#x27;</span>, <span class="string">&#x27;2023-03-27 12:00:21&#x27;</span>));</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> add_t_user_memory(<span class="number">1000000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>出现问题：</p><p>(1114, &quot;The table &#39;t_user_memory&#39; is full&quot;)</p><p><strong>出现内存已满时，修改 max_heap_table_size 参数的大小，我使用64M内存，插入了22W数据，看情况改，不过这个值不要太大，默认32M或者64M就好，生产环境不要乱尝试</strong></p></blockquote><h4 id="从内存表中插入普通表"><a href="#从内存表中插入普通表" class="headerlink" title="从内存表中插入普通表"></a>从内存表中插入普通表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user_memory;</span><br></pre></td></tr></table></figure><h3 id="第二种方式-使用mysqlslap生成大量的测试数据"><a href="#第二种方式-使用mysqlslap生成大量的测试数据" class="headerlink" title="第二种方式: 使用mysqlslap生成大量的测试数据"></a>第二种方式: 使用mysqlslap生成大量的测试数据</h3><h4 id="定义表结构"><a href="#定义表结构" class="headerlink" title="定义表结构"></a>定义表结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 表结构</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_people` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `c_name` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `c_age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `idx_user_id` (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mysqlslap插入数据"><a href="#mysqlslap插入数据" class="headerlink" title="mysqlslap插入数据"></a>mysqlslap插入数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlslap -h127.0.0.1 -uhadoop -p --concurrency=10 --number-of-queries=1000000 --commit=20000 --create-schema=&#x27;tbl_innodb_ruby&#x27; --query=&quot;insert into t_people(user_id, c_name, c_age) values (randNum(6), randStr(20), FLOOR(RAND() * 100));&quot;</span><br></pre></td></tr></table></figure><blockquote><p>concurrency: 并发数</p><p>number-of-queries: 查询的总次数</p></blockquote><h3 id="第三种方式：采用临时表"><a href="#第三种方式：采用临时表" class="headerlink" title="第三种方式：采用临时表"></a>第三种方式：采用临时表</h3><h4 id="创建临时数据表tmp-table"><a href="#创建临时数据表tmp-table" class="headerlink" title="创建临时数据表tmp_table"></a>创建临时数据表tmp_table</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tmp_table (</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="用-python或者bash-生成-100w-记录的数据文件（python瞬间就会生成完）"><a href="#用-python或者bash-生成-100w-记录的数据文件（python瞬间就会生成完）" class="headerlink" title="用 python或者bash 生成 100w 记录的数据文件（python瞬间就会生成完）"></a>用 python或者bash 生成 100w 记录的数据文件（python瞬间就会生成完）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&quot;for i in range(1, 1+1000000): print(i)&quot;</span> &gt; base.txt</span><br></pre></td></tr></table></figure><h4 id="导入数据到临时表tmp-table中"><a href="#导入数据到临时表tmp-table中" class="headerlink" title="导入数据到临时表tmp_table中"></a>导入数据到临时表tmp_table中</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; load data infile &#x27;/Users/LJTjintao/temp/base.txt&#x27; replace into table tmp_table;</span><br></pre></td></tr></table></figure><blockquote><p>注意： 导入数据时有可能会报错，原因是mysql默认没有开secure_file_priv（ 这个参数用来限制数据导入和导出操作的效果，例如执行LOAD DATA、SELECT … INTO OUTFILE语句和LOAD_FILE()函数。这些操作需要用户具有FILE权限。 ）</p><p>解决办法：在mysql的配置文件中（my.ini 或者 my.conf）中添加 secure_file_priv &#x3D; &#x2F;Users&#x2F;LJTjintao&#x2F;temp&#x2F;&#96;, 然后重启mysql 解决</p></blockquote><h4 id="以临时表为基础数据，插入数据到t-user中"><a href="#以临时表为基础数据，插入数据到t-user中" class="headerlink" title="以临时表为基础数据，插入数据到t_user中"></a>以临时表为基础数据，插入数据到t_user中</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     id,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     uuid(),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     CONCAT(<span class="string">&#x27;userNickName&#x27;</span>, id),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="built_in">FLOOR</span>(Rand() <span class="operator">*</span> <span class="number">1000</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     <span class="built_in">FLOOR</span>(Rand() <span class="operator">*</span> <span class="number">100</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     NOW()</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">FROM</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     tmp_table;</span><br></pre></td></tr></table></figure><h2 id="Space-表空间-相关"><a href="#Space-表空间-相关" class="headerlink" title="Space(表空间)相关"></a><strong>Space(表空间)相关</strong></h2><h3 id="查看系统所有可用的表空间及统计信息："><a href="#查看系统所有可用的表空间及统计信息：" class="headerlink" title="查看系统所有可用的表空间及统计信息："></a>查看系统所有可用的表空间及统计信息：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people system-spaces | sed &#x27;s/[,#$@!%~ ][ ]*/\t/g&#x27; | sed &#x27;s/\t/,/g&#x27; | sed &#x27;s/.$//&#x27; | csvlook</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327163213077.png" alt="image-20230327163213077" style="zoom:50%;"> <blockquote><p>第一列是表空间名，第二列是对应表空间所分配数据页(page)的数量，第三列是索引数量</p></blockquote><h3 id="查看t-people表空间数据分布："><a href="#查看t-people表空间数据分布：" class="headerlink" title="查看t_people表空间数据分布："></a>查看t_people表空间数据分布：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-page-type-regions</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327164232473.png" alt="image-20230327164232473" style="zoom:50%;"><p>哈哈，眼熟吗？还有印象吗</p><ul><li><p><strong>start</strong>：开始的PAGE_NO</p></li><li><p><strong>end</strong>：结束的PAGE_NO</p></li><li><p><strong>FSP_HDR</strong>：表空间第 1 个区的第 1 个页为FSP_HDR(file space header)，保存了这个表空间的大小，以及完全没有被使用的extents，fragment的以及inode使用情况，整个表空间只有一个 FSP_HDR 类型的页面。如图，count 列表示占用的 Page 数量为 1；</p></li><li><p><strong>IBUF_BITMAP</strong>：表空间第 1 个区的第 2 个页，这个页就是插入缓存bitmap页，用于记录插入缓冲区的一些信息。主要用于跟踪随后的每个page的change buffer信息，使用4个bit来描述每个page的change buffer信息。如图，IBUF_BITMAP 占用了 1 个 Page；</p></li><li><p><strong>INODE</strong>：表空间第 1 个区的第 3 个页，InnoDB 为每个索引定义了 2 个段，INODE Entry 结构记录了关于段的相关属性信息。如图，INODE 也占用了 1 个 Page。</p></li></ul><blockquote><p>名词解释</p><ol><li>FIL_PAGE_INDEX: B+tree叶节点</li><li>FIL_PAGE_UNDO_LOG：undo log页</li><li>FIL_PAGE_INODE：索引节点</li><li>FIL_PAGE_IBUF_FREE_LIST：insert buffer空闲列表</li><li>FIL_PAGE_TYPE_ALLOCATED：该页为最新分配</li><li>FIL_PAGE_IBUF_BITMAP：insert buffer位图</li><li>FIL_PAGE_TYPE_SYS：系统页</li><li>FIL_PAGE_TYPE_TRX_SYS：事务系统数据</li><li>FIL_PAGE_TYPE_FSP_HDR：File Space Header</li><li>FIL_PAGE_TYPE_XDES：扩展描述页</li><li>FIL_PAGE_TYPE_BLOB：blob页</li></ol></blockquote><p>如图，我们还可以知道索引的分布情况。也可以通过 information_schema 库表 INNODB_SYS_INDEXES、INNODB_SYS_TABLES 查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL hadoop<span class="variable">@localhost</span>:tbl_innodb_ruby<span class="operator">&gt;</span> <span class="keyword">SELECT</span> sys_tbls.name, sys_idxs.name, sys_idxs.index_id, type, sys_idxs.space, sys_idxs.PAGE_NOFROM information_schema.INNODB_SYS_INDEXES sys_idxs, information_schema.INNODB_SYS_TABLES sys_tbls <span class="keyword">WHERE</span> sys_idxs.table_id <span class="operator">=</span> sys_tbls.table_i</span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> d <span class="keyword">AND</span> sys_tbls.name<span class="operator">=</span><span class="string">&#x27;test_innodb_ruby/t_people&#x27;</span> <span class="keyword">AND</span> sys_idxs.space <span class="operator">&lt;&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327165318132.png" alt="image-20230327165318132" style="zoom:50%;"><p>如图，其中 PAGE_NO 为 3 的 Page 保存了 PRIMARY 的信息，索引的编号是 85. PAGE_NO为4的page保存了idx_user_id辅助索引的信息，索引编号是86</p><h3 id="查看t-people表数据行分布情况："><a href="#查看t-people表数据行分布情况：" class="headerlink" title="查看t_people表数据行分布情况："></a>查看t_people表数据行分布情况：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-index-pages-summary | sed <span class="string">&#x27;s/[,#$@!%~ ][ ]*/\t/g&#x27;</span> | sed <span class="string">&#x27;s/\t/,/g&#x27;</span> | sed <span class="string">&#x27;s/.$//&#x27;</span> | csvlook | <span class="built_in">head</span> -n 100</span></span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327165844024.png" alt="image-20230327165844024" style="zoom:50%;"><p>这个选项可以获取到的信息较上一个选项粒度更细了，可以看到页号（page 列）、索引编号（index 列）、也可以得到树的高度（level 字段 + 1，如图我们的 t_people 表的树高是 3 层）、同时可以看到数据在每个 Page 的占用情况（data 列）、每个 Page 空闲的空间（free 列）、每个 Page 有多少行数据（records 列），都可以通过 space-index-pages-summary 选项获取到。</p><blockquote><p>小提示</p><p>这里还是要补充一个知识点，我认为比较重要。细心的你可能会发现，上图中，很多 Page 的 free 空闲空间都是 1032 字节，我们知道 InnoDB 一个 Page 是 16KB（16384 字节），但是感觉为什么一个 Page 的空间没有被完全分配掉，会剩余 1&#x2F;16 的空闲空间？这就要涉及到一个知识点，有关于 InnoDB Page 的填充率。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL hadoop<span class="variable">@localhost</span>:tbl_innodb_ruby<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;innodb%fill%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name      <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> innodb_fill_factor <span class="operator">|</span> <span class="number">100</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-------+</span></span><br></pre></td></tr></table></figure><p>控制 Page 填充率参数 innodb_fill_factor 默认值是 100，也就是 100% 填充，但是，MySQL 官档中有这样两段描述。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2lubm9kYi1wYXJhbWV0ZXJzLmh0bWw=">https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html<i class="fa fa-external-link-alt"></i></span></p><p><img src="/mysql/learn-mysql-021/modb_20211120_752ec134-49b6-11ec-adf3-38f9d3cd240d.png" loading="lazy"></p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2lubm9kYi1waHlzaWNhbC1zdHJ1Y3R1cmUuaHRtbA==">https://dev.mysql.com/doc/refman/5.7/en/innodb-physical-structure.html<i class="fa fa-external-link-alt"></i></span></p><p><img src="/mysql/learn-mysql-021/modb_20211120_753e74a8-49b6-11ec-adf3-38f9d3cd240d.png" loading="lazy"></p></blockquote><blockquote><p>解释一下上面的这两段话：</p><p>1、innodb_fill_factor&#x3D;100，也会预留 1&#x2F;16 的空闲空间，用于现存记录长度扩展使用；</p><p>2、预留 1&#x2F;16 这个规则，只针对聚簇索引（Clustered Index）的叶子节点有效。对于聚簇索引的非叶子节点（Non-Leaf）以及辅助索引（叶子及非叶子）节点都没有这个规则；</p><p>3、innodb_fill_factor 选项对 B + 树索引的叶子节点及非叶子节点都有效，但对数据类型 TEXT&#x2F;BLOB 可能发生行溢出的 Page 无效；</p><p>4、在最佳的顺序插入数据模式下，Page 填充率有可能可以达到 15&#x2F;16；</p><p>5、在随机插入数据模式下，Page 填充率大约为 1&#x2F;2~15&#x2F;16。  </p></blockquote><h3 id="查看对应表空间的区（Extent）信息："><a href="#查看对应表空间的区（Extent）信息：" class="headerlink" title="查看对应表空间的区（Extent）信息："></a>查看对应表空间的区（Extent）信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-extents-illustrate</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327171348204.png" alt="image-20230327171348204" style="zoom:50%;"><img src="/mysql/learn-mysql-021/image-20230327171458177.png" alt="image-20230327171348204" style="zoom:50%;"><blockquote><p>如图可得，我们 words 的表空间总共连续分配了 5952&#x2F;64 + 1 &#x3D; 93 + 1 &#x3D; 94 个区（Extent），一个区是 64 个 Page（大家应该还记得这个数字），分别以页号（PAGE_NO）0、64、128、192、256、320 为每个区的起始页。System（就是我们之前说的 FSP_HDR、IBUF_BITMAP、INODE）共计 3 个 Page，占用总分配空间的 0.05；Index 编号为 85 的聚簇索引（存放真实数据）共计 3616 个 Page，占用总分配空间的 60.11%；Index编号为86的辅助索引共计1555个page，占用总分配空间的25.85%； Free space 空闲空间（分配但未使用的空间）共计 842 个 Page，占用总分配空间的 14.00%。</p></blockquote><h3 id="查看段的相关属性信息（INODE）："><a href="#查看段的相关属性信息（INODE）：" class="headerlink" title="查看段的相关属性信息（INODE）："></a>查看段的相关属性信息（INODE）：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看统计信息</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-inodes-summary</span></span><br><span class="line">INODE fseg_id=1, pages=5, frag=5, full=0, not_full=0, free=0</span><br><span class="line">INODE fseg_id=2, pages=4128, frag=32, full=55, not_full=9, free=0</span><br><span class="line">INODE fseg_id=3, pages=4, frag=4, full=0, not_full=0, free=0</span><br><span class="line">INODE fseg_id=4, pages=1824, frag=32, full=23, not_full=5, free=0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看详细信息</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-inodes-detail</span></span><br><span class="line">INODE fseg_id=1, pages=5, frag=5 pages (3, 133, 134, 135, 138), full=0 extents (), not_full=0 extents () (0/0 pages used), free=0 extents ()</span><br><span class="line">INODE fseg_id=2, pages=4128, frag=32 pages (5, 6, 7, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 45, 47, 51), full=55 extents (64-127, 192-255, 320-383, 384-447, 512-575, 576-639, 640-703, 832-895, 960-1023, 1024-1087, 1088-1151, 1152-1215, 1216-1279, 1280-1343, 1600-1663, 1792-1855, 1856-1919, 1920-1983, 1984-2047, 2048-2111, 1408-1471, 2240-2303, 2304-2367, 2368-2431, 1536-1599, 2624-2687, 2752-2815, 2816-2879, 3072-3135, 3200-3263, 3456-3519, 3584-3647, 3648-3711, 3712-3775, 3776-3839, 3840-3903, 3904-3967, 4032-4095, 4096-4159, 4160-4223, 4224-4287, 4288-4351, 4352-4415, 4480-4543, 4544-4607, 4672-4735, 4736-4799, 4800-4863, 4928-4991, 5056-5119, 5120-5183, 5312-5375, 5440-5503, 5632-5695, 5760-5823), not_full=9 extents (2112-2175, 2176-2239, 2496-2559, 2944-3007, 3328-3391, 3968-4031, 4416-4479, 5248-5311, 5888-5951) (59/576 pages used), free=0 extents ()</span><br><span class="line">INODE fseg_id=3, pages=4, frag=4 pages (4, 136, 137, 139), full=0 extents (), not_full=0 extents () (0/0 pages used), free=0 extents ()</span><br><span class="line">INODE fseg_id=4, pages=1824, frag=32 pages (10, 11, 15, 16, 23, 25, 26, 29, 40, 42, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 128, 129, 130, 131, 132), full=23 extents (256-319, 448-511, 704-767, 768-831, 896-959, 1344-1407, 1472-1535, 1664-1727, 1728-1791, 2432-2495, 2560-2623, 2688-2751, 2880-2943, 3008-3071, 3136-3199, 3264-3327, 3392-3455, 3520-3583, 4608-4671, 4864-4927, 4992-5055, 5184-5247, 5376-5439), not_full=5 extents (5504-5567, 5568-5631, 5696-5759, 5824-5887, 5952-6015) (47/320 pages used), free=0 extents ()</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>如图可得，记录系统 3 个固定的页的 fseg_id（段号：Segment ID）为 1，且总共占用 5 个 Page。</p></li><li><p>fseg_id为2的信息就比较丰富了：分配的空间总共占用了4128个Page，frag（空闲空间的碎片区：零散的页）共占用了32个Page，并且详细记录了这32个Page的页号（PAGE_NO）</p></li><li><p>状态为full（FULL_FRAG链表）的区一共有55个，总共占用两个完整区的55*64个页，括号中的是页号（PAGE_NO）</p></li><li><p>状态为not_full（FREE_FRAG）的区（FREE_FRAG链表）总共有9个，其中已经使用的页59个，未使用9*64-59 &#x3D; 517个Page</p></li></ol></blockquote><blockquote><p>小提示</p><p><strong>这个&#39;frag&#x3D;32&#39;需要注意，我们知道当段中数据已经占满了 32 个零散的页后，就直接申请完整的区来插入数据了。但是，本例正好为 32 个零散 Page 的临界值，还没有申请完整的区来插入数据，所以这 32 个 Page 还是属于段中的零散页范畴，不属于任何区，InnoDB 还是以 Page 为单位来进行管理，所以页号（PAGE_NO）也会被单独展示出来，这点需要注意</strong>。</p><p><strong>呼应上述&#39;frag&#x3D;32&#39;，&#39;not_full&#x3D;9 extents (2112-2175, 2176-2239, 2496-2559, 2944-3007, 3328-3391, 3968-4031, 4416-4479, 5248-5311, 5888-5951) (59&#x2F;576 pages used)&#39;这个状态为 FREE_FRAG 的区（FREE_FRAG 链表）因为已经使用 59 个 Page，所以就以整个区（Extent）为单位进行管理了。&#39;pages&#x3D;4128&#39;就是相当于 55+9 个完整的区加上 32 个零散的页（(55+9)×64+32&#x3D;4128），哈哈是不是感觉很有意思</strong>。</p></blockquote><h3 id="查看索引结构、数据分布情况："><a href="#查看索引结构、数据分布情况：" class="headerlink" title="查看索引结构、数据分布情况："></a>查看索引结构、数据分布情况：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-indexes | sed &#x27;s/[,#$@!%~ ][ ]*/\t/g&#x27; | sed &#x27;s/\t/,/g&#x27; | sed &#x27;s/.$//&#x27; | csvlook</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327180443634.png" alt="image-20230327180443634" style="zoom:50%;"><blockquote><p>列说明： </p><p>name：索引的名称，PRIMARY 代表的就是聚集索引，因为 InnoDB 表是索引组织表，行记录就是聚集索引；idx_user_id 就是辅助索引的名称。<br>root：索引中根节点的 page 号；可以看出聚集索引的根节点是第 3 个 page（为什么是从第三个 page 开始，看下文 space-page-type-regions），辅助索引的根节点是第 4 个 page。<br>fseg：page 的说明，internal 表示非叶子节点或属于根节点，leaf 表示叶子节点（也就是数据页）。<br>used：索引使用了多少个 page，可以看出聚集索引的根节点使用了 5 个 page，叶子节点使用了 3611 个 page；辅助索引 idx_user_id 的叶子节点使用了 1511 个 page。<br>allocated：索引分配了多少个 page，可以看出聚集索引的根节点分配了 5 个 page，叶子节点分配了 4128 个 page；辅助索引 idx_user_id 的叶子节点分配了 1824 个 page<br>fill_factor：索引的填充度，所有的填充度都是 100%。</p></blockquote><h3 id="查看表空间所有页面的LSN"><a href="#查看表空间所有页面的LSN" class="headerlink" title="查看表空间所有页面的LSN"></a>查看表空间所有页面的LSN</h3><p>lsn:（Log Sequence Number：日志逻辑序列号，不仅存在于 Redo Log，同时，File Header 部分的 FIL_PAGE_LSN 属性也记录着页面被最后修改时对应的日志序列位置）  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-lsn-age-illustrate</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327181438638.png" alt="image-20230327181438638" style="zoom:50%;"><h2 id="Index（B-树索引）相关"><a href="#Index（B-树索引）相关" class="headerlink" title="Index（B + 树索引）相关"></a><strong>Index（B + 树索引）相关</strong></h2><h3 id="遍历聚簇索引整个B-树，扫描所有页面："><a href="#遍历聚簇索引整个B-树，扫描所有页面：" class="headerlink" title="遍历聚簇索引整个B+树，扫描所有页面："></a>遍历聚簇索引整个B+树，扫描所有页面：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -I PRIMARY  index-recurse | head -n 25</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327181655575.png" alt="image-20230327181655575" style="zoom:50%;"><blockquote><p>这条命令会从 root 开始，全表扫描，以升序的方式遍历整个 B+Tree 索引树，遍历过程中会输出每个 page 以及指针的信息，包括叶子节点 Page 和非叶子节点 Page。</p></blockquote><h3 id="遍历聚簇索引B-树的数据页Page、记录Record的偏移量："><a href="#遍历聚簇索引B-树的数据页Page、记录Record的偏移量：" class="headerlink" title="遍历聚簇索引B+树的数据页Page、记录Record的偏移量："></a>遍历聚簇索引B+树的数据页Page、记录Record的偏移量：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -I PRIMARY index-record-offsets | head -n 25</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327181819041.png" alt="image-20230327181819041" style="zoom:50%;"><blockquote><p>和 index-recurse 选项功能类似，但是遍历出的结果是偏移量。</p></blockquote><h3 id="查看指定-Level（B-树层高）的所有页面信息："><a href="#查看指定-Level（B-树层高）的所有页面信息：" class="headerlink" title="查看指定 Level（B + 树层高）的所有页面信息："></a>查看指定 Level（B + 树层高）的所有页面信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -l 0, 1, 2</span><br><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -I PRIMARY -l 0 index-level-summary | head -n 25</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327181952283.png" alt="image-20230327181952283" style="zoom:50%;"><blockquote><p>我们 words 表的 B + 树树高只有 3 层，所以只能查得 3 层的数据。还有很多功能选项，大家感兴趣可以自己尝试。</p></blockquote><h2 id="Page（数据页）相关"><a href="#Page（数据页）相关" class="headerlink" title="Page（数据页）相关"></a><strong>Page（数据页）相关</strong></h2><h3 id="查看指定页号（PAGE-NO）的数据页说明信息："><a href="#查看指定页号（PAGE-NO）的数据页说明信息：" class="headerlink" title="查看指定页号（PAGE_NO）的数据页说明信息："></a>查看指定页号（PAGE_NO）的数据页说明信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 3  page-account</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327182305370.png" alt="image-20230327182305370" style="zoom:50%;"><blockquote><p>由图可知，Page 的类型是 B+Tree 索引；第 0 到 63 页的区（Extent）描述符位于第 0 号 Page 偏移量 158 处；区（Extent）未完全分配、可能有碎片区（零散页）；该 Page 被区（Extent）描述符所标记，该区（Extent）属于 FREE_FRAG 状态的 List；该 Page 位于 FSEG 1 的段 Fragment Array（碎片数组中；该 FSEG（段）位于索引 ID 为 85 的内部段中；索引的根页面是 Page 3（PAGE_NO&#x3D;3，也就是当前页就是根页面）；索引是 tbl_innodb_ruby&#x2F;t_people 表的主键（聚簇索引）。</p><p>可以根据 space-index-pages-summary 功能选项，查看任何 1 个 Page 的说明信息</p><ol><li>-p 0 表示的是FSP_HDR.</li><li>-p 1 表示的是IBUF_BITMAP</li><li>-p 2 表示的是INODE</li></ol></blockquote><h3 id="查看指定页号（PAGE-NO）页目录（Page-Directory，Slot，槽）的信息："><a href="#查看指定页号（PAGE-NO）页目录（Page-Directory，Slot，槽）的信息：" class="headerlink" title="查看指定页号（PAGE_NO）页目录（Page Directory，Slot，槽）的信息："></a>查看指定页号（PAGE_NO）页目录（Page Directory，Slot，槽）的信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 4128  page-directory-summary</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327182937848.png" alt="image-20230327182937848" style="zoom:50%;"><blockquote><p>由图可得，Slot 编号、偏移量、数据类型（infimum - 最小值、node_pointer - 节点指针、supremum - 最大值）、每个槽位拥有的数据量（owned）、还有索引key（聚集索引或者辅助索引）值信息。</p></blockquote><h3 id="查看聚簇索引的非叶子节点（Clustered-Index-Non-Leaf）记录-Record-信息："><a href="#查看聚簇索引的非叶子节点（Clustered-Index-Non-Leaf）记录-Record-信息：" class="headerlink" title="查看聚簇索引的非叶子节点（Clustered Index Non-Leaf）记录 Record 信息："></a>查看聚簇索引的非叶子节点（Clustered Index Non-Leaf）记录 Record 信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 3 page-records | head -n 25</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327183306953.png" alt="image-20230327183306953" style="zoom:50%;"><blockquote><p>如图，<strong>存储的是主键值 + 页号（PAGE_NO）</strong>。</p><p>其中 -p 3 是根据 index-level-summary -I PRIMARY -l 2 得到的</p></blockquote><h3 id="查看聚簇索引的叶子节点（Clustered-Index-Leaf）记录-Record-信息："><a href="#查看聚簇索引的叶子节点（Clustered-Index-Leaf）记录-Record-信息：" class="headerlink" title="查看聚簇索引的叶子节点（Clustered Index Leaf）记录 Record 信息："></a>查看聚簇索引的叶子节点（Clustered Index Leaf）记录 Record 信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 5 page-records | head -n 25</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327183647822.png" alt="image-20230327183647822" style="zoom:50%;"><blockquote><p>如图，<strong>存储的是完整的记录</strong>。 </p><p>其中 -p 5 是根据 index-level-summary -I PRIMARY -l 0 得到的</p></blockquote><h3 id="查看辅助索引的非叶子节点（Secondary-Index-Non-Leaf）记录-Record-信息："><a href="#查看辅助索引的非叶子节点（Secondary-Index-Non-Leaf）记录-Record-信息：" class="headerlink" title="查看辅助索引的非叶子节点（Secondary Index Non-Leaf）记录 Record 信息："></a>查看辅助索引的非叶子节点（Secondary Index Non-Leaf）记录 Record 信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 136 page-records | head -n 25</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327184200586.png" alt="image-20230327184200586" style="zoom:50%;"><blockquote><p>如图，<strong>存储的是辅助索引字段值 + 页号（PAGE_NO）</strong>。</p><p>其中-p 136 是是根据 -I idx_user_id -l 1 index-level-summary 得到的</p></blockquote><h3 id="查看辅助索引的叶子节点（Secondary-Index-Leaf）记录-Record-信息："><a href="#查看辅助索引的叶子节点（Secondary-Index-Leaf）记录-Record-信息：" class="headerlink" title="查看辅助索引的叶子节点（Secondary Index Leaf）记录 Record 信息："></a>查看辅助索引的叶子节点（Secondary Index Leaf）记录 Record 信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 10 page-records | head -n 25</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327184524277.png" alt="image-20230327184524277" style="zoom:50%;"><blockquote><p>如图，<strong>存储的是辅助索引字段值 + 主键值</strong>。</p><p>其中-p 136 是是根据 -I idx_user_id -l 0 index-level-summary 得到的</p></blockquote><p>到这里，是不是再回头看之前的文章，有一种：“我悟了！” 的感觉。  </p><h3 id="查看-t-people-表空间数据页-Page-的详细的各属性信息："><a href="#查看-t-people-表空间数据页-Page-的详细的各属性信息：" class="headerlink" title="查看 t_people 表空间数据页 Page 的详细的各属性信息："></a>查看 t_people 表空间数据页 Page 的详细的各属性信息：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 3 page-dump</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">#&lt;Innodb::Page::Index:0x0000000104b7d9a0&gt;:</span><br><span class="line"><span class="comment"># 文件头</span></span><br><span class="line">fil <span class="symbol">header:</span></span><br><span class="line">#&lt;struct Innodb::Page::FilHeader</span><br><span class="line"> # 页的checksum值</span><br><span class="line"> checksum=1222139710,</span><br><span class="line"> # 表空间中页的偏移量</span><br><span class="line"> offset=3,</span><br><span class="line"> # 当前页的上一个页，B+Tree特性决定了叶子结点必须是双向列表</span><br><span class="line"> prev=nil,</span><br><span class="line"> # 当前页的下一个页，B+Tree特性决定了叶子结点必须是双向列表</span><br><span class="line"> next=nil,</span><br><span class="line"> # 代表该页最后被修改的日志序列位置LSN（Log Sequence Number）</span><br><span class="line"> lsn=1381530869,</span><br><span class="line"> # InnoDB存储引擎页的类型</span><br><span class="line"> type=:INDEX,</span><br><span class="line"> # 如果页存放在系统共享表空间，表示文件至少被更新到了该LSN值；对于独立表空间，都为0</span><br><span class="line"> flush_lsn=0,</span><br><span class="line"> # 代表页属于哪个表空间</span><br><span class="line"> space_id=53&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件结尾信息</span></span><br><span class="line">fil <span class="symbol">trailer:</span></span><br><span class="line"><span class="comment"># 检测页是否完整写入磁盘。前4字节代表页的checksum值，最后4字节和File Header中的FIL_PAGE_LSN(lsn)相同。checksum的默认算法是crc32</span></span><br><span class="line">#&lt;struct Innodb::Page::FilTrailer checksum=1222139710, lsn_low32=1381530869&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 页头</span></span><br><span class="line">page <span class="symbol">header:</span></span><br><span class="line">#&lt;struct Innodb::Page::Index::PageHeader</span><br><span class="line"> # 在Page Directory页目录中的Slot槽数</span><br><span class="line"> n_dir_slots=2,</span><br><span class="line"> # 堆中第一个记录的指针，记录在页中是根据堆的形式存放的</span><br><span class="line"> heap_top=172,</span><br><span class="line"> n_heap_format=32774,</span><br><span class="line"> # 堆中的记录数。一共占用2字节，但是第15位表示行记录格式</span><br><span class="line"> n_heap=6,</span><br><span class="line"> format=:compact,</span><br><span class="line"> # 已删除记录的字节数，即行记录结构中delete flag为1的记录大小的总数</span><br><span class="line"> garbage_offset=0,</span><br><span class="line"> garbage_size=0,</span><br><span class="line"> # 最后插入记录的位置</span><br><span class="line"> last_insert_offset=164,</span><br><span class="line"> # 最后插入的方向</span><br><span class="line"> direction=:right,</span><br><span class="line"> n_direction=3,</span><br><span class="line"> # 该页中记录的数量</span><br><span class="line"> n_recs=4,</span><br><span class="line"> # 修改当前页面的最大事务ID，注意该值仅在Secondary Index中定义</span><br><span class="line"> max_trx_id=0,</span><br><span class="line"> # 当前页在索引树中的位置，0x00代表叶节点，叶节点总是在第0层</span><br><span class="line"> level=2,</span><br><span class="line"> # 索引ID，表示当前页属于哪个索引</span><br><span class="line"> index_id=85&gt;</span><br><span class="line"></span><br><span class="line">fseg <span class="symbol">header:</span></span><br><span class="line">#&lt;struct Innodb::Page::Index::FsegHeader</span><br><span class="line"> leaf=</span><br><span class="line">  &lt;Innodb::Inode space=&lt;Innodb::Space file=&quot;tbl_innodb_ruby/t_people.ibd&quot;, page_size=16384, pages=6656&gt;, fseg=<span class="number">2</span>&gt;,</span><br><span class="line"> internal=</span><br><span class="line">  &lt;<span class="title class_">Innodb</span><span class="symbol">:</span><span class="symbol">:Inode</span> space=&lt;<span class="title class_">Innodb</span><span class="symbol">:</span><span class="symbol">:Space</span> file=<span class="string">&quot;tbl_innodb_ruby/t_people.ibd&quot;</span>, page_size=<span class="number">16384</span>, pages=<span class="number">6656</span>&gt;, fseg=<span class="number">1</span>&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="symbol">sizes:</span></span><br><span class="line">  header           <span class="number">120</span></span><br><span class="line">  trailer            <span class="number">8</span></span><br><span class="line">  directory          <span class="number">4</span></span><br><span class="line">  free           <span class="number">16200</span></span><br><span class="line">  used             <span class="number">184</span></span><br><span class="line">  record            <span class="number">52</span></span><br><span class="line">  per record     <span class="number">13.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页目录</span></span><br><span class="line">page <span class="symbol">directory:</span></span><br><span class="line">[<span class="number">99</span>, <span class="number">112</span>]</span><br><span class="line"></span><br><span class="line">system <span class="symbol">records:</span></span><br><span class="line">#&lt;struct Innodb::Page::Index::SystemRecord</span><br><span class="line"> offset=99,</span><br><span class="line"> header=</span><br><span class="line">  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">   length=5,</span><br><span class="line">   next=125,</span><br><span class="line">   type=:infimum,</span><br><span class="line">   heap_number=0,</span><br><span class="line">   n_owned=1,</span><br><span class="line">   info_flags=0,</span><br><span class="line">   offset_size=nil,</span><br><span class="line">   n_fields=nil,</span><br><span class="line">   nulls=nil,</span><br><span class="line">   lengths=nil,</span><br><span class="line">   externs=nil&gt;,</span><br><span class="line"> <span class="keyword">next</span>=<span class="number">125</span>,</span><br><span class="line"> data=<span class="string">&quot;infimum\x00&quot;</span>,</span><br><span class="line"> length=<span class="number">8</span>&gt;</span><br><span class="line">#&lt;struct Innodb::Page::Index::SystemRecord</span><br><span class="line"> offset=112,</span><br><span class="line"> header=</span><br><span class="line">  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">   length=5,</span><br><span class="line">   next=112,</span><br><span class="line">   type=:supremum,</span><br><span class="line">   heap_number=1,</span><br><span class="line">   n_owned=5,</span><br><span class="line">   info_flags=0,</span><br><span class="line">   offset_size=nil,</span><br><span class="line">   n_fields=nil,</span><br><span class="line">   nulls=nil,</span><br><span class="line">   lengths=nil,</span><br><span class="line">   externs=nil&gt;,</span><br><span class="line"> <span class="keyword">next</span>=<span class="number">112</span>,</span><br><span class="line"> data=<span class="string">&quot;supremum&quot;</span>,</span><br><span class="line"> length=<span class="number">8</span>&gt;</span><br><span class="line"></span><br><span class="line">garbage <span class="symbol">records:</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">records:</span></span><br><span class="line">#&lt;struct Innodb::Page::Index::UserRecord</span><br><span class="line"> type=:clustered,</span><br><span class="line"> format=:compact,</span><br><span class="line"> offset=125,</span><br><span class="line"> header=</span><br><span class="line">  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">   length=5,</span><br><span class="line">   next=138,</span><br><span class="line">   type=:node_pointer,</span><br><span class="line">   heap_number=2,</span><br><span class="line">   n_owned=0,</span><br><span class="line">   info_flags=1,</span><br><span class="line">   offset_size=nil,</span><br><span class="line">   n_fields=nil,</span><br><span class="line">   nulls=[],</span><br><span class="line">   lengths=&#123;&#125;,</span><br><span class="line">   externs=[]&gt;,</span><br><span class="line"> <span class="keyword">next</span>=<span class="number">138</span>,</span><br><span class="line"> key=</span><br><span class="line">  [#&lt;struct Innodb::Page::Index::FieldDescriptor</span><br><span class="line">    name=&quot;id&quot;,</span><br><span class="line">    type=&quot;INT&quot;,</span><br><span class="line">    value=1,</span><br><span class="line">    extern=nil&gt;],</span><br><span class="line"> row=[],</span><br><span class="line"> sys=[],</span><br><span class="line"> child_page_number=<span class="number">133</span>,</span><br><span class="line"> transaction_id=<span class="literal">nil</span>,</span><br><span class="line"> roll_pointer=<span class="literal">nil</span>,</span><br><span class="line"> length=<span class="number">8</span>&gt;</span><br><span class="line"></span><br><span class="line">#&lt;struct Innodb::Page::Index::UserRecord</span><br><span class="line"> type=:clustered,</span><br><span class="line"> format=:compact,</span><br><span class="line"> offset=138,</span><br><span class="line"> header=</span><br><span class="line">  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">   length=5,</span><br><span class="line">   next=151,</span><br><span class="line">   type=:node_pointer,</span><br><span class="line">   heap_number=3,</span><br><span class="line">   n_owned=0,</span><br><span class="line">   info_flags=0,</span><br><span class="line">   offset_size=nil,</span><br><span class="line">   n_fields=nil,</span><br><span class="line">   nulls=[],</span><br><span class="line">   lengths=&#123;&#125;,</span><br><span class="line">   externs=[]&gt;,</span><br><span class="line"> <span class="keyword">next</span>=<span class="number">151</span>,</span><br><span class="line"> key=</span><br><span class="line">  [#&lt;struct Innodb::Page::Index::FieldDescriptor</span><br><span class="line">    name=&quot;id&quot;,</span><br><span class="line">    type=&quot;INT&quot;,</span><br><span class="line">    value=166430,</span><br><span class="line">    extern=nil&gt;],</span><br><span class="line"> row=[],</span><br><span class="line"> sys=[],</span><br><span class="line"> child_page_number=<span class="number">134</span>,</span><br><span class="line"> transaction_id=<span class="literal">nil</span>,</span><br><span class="line"> roll_pointer=<span class="literal">nil</span>,</span><br><span class="line"> length=<span class="number">8</span>&gt;</span><br><span class="line"></span><br><span class="line">#&lt;struct Innodb::Page::Index::UserRecord</span><br><span class="line"> type=:clustered,</span><br><span class="line"> format=:compact,</span><br><span class="line"> offset=151,</span><br><span class="line"> header=</span><br><span class="line">  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">   length=5,</span><br><span class="line">   next=164,</span><br><span class="line">   type=:node_pointer,</span><br><span class="line">   heap_number=4,</span><br><span class="line">   n_owned=0,</span><br><span class="line">   info_flags=0,</span><br><span class="line">   offset_size=nil,</span><br><span class="line">   n_fields=nil,</span><br><span class="line">   nulls=[],</span><br><span class="line">   lengths=&#123;&#125;,</span><br><span class="line">   externs=[]&gt;,</span><br><span class="line"> <span class="keyword">next</span>=<span class="number">164</span>,</span><br><span class="line"> key=</span><br><span class="line">  [#&lt;struct Innodb::Page::Index::FieldDescriptor</span><br><span class="line">    name=&quot;id&quot;,</span><br><span class="line">    type=&quot;INT&quot;,</span><br><span class="line">    value=499330,</span><br><span class="line">    extern=nil&gt;],</span><br><span class="line"> row=[],</span><br><span class="line"> sys=[],</span><br><span class="line"> child_page_number=<span class="number">135</span>,</span><br><span class="line"> transaction_id=<span class="literal">nil</span>,</span><br><span class="line"> roll_pointer=<span class="literal">nil</span>,</span><br><span class="line"> length=<span class="number">8</span>&gt;</span><br><span class="line"></span><br><span class="line">#&lt;struct Innodb::Page::Index::UserRecord</span><br><span class="line"> type=:clustered,</span><br><span class="line"> format=:compact,</span><br><span class="line"> offset=164,</span><br><span class="line"> header=</span><br><span class="line">  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">   length=5,</span><br><span class="line">   next=112,</span><br><span class="line">   type=:node_pointer,</span><br><span class="line">   heap_number=5,</span><br><span class="line">   n_owned=0,</span><br><span class="line">   info_flags=0,</span><br><span class="line">   offset_size=nil,</span><br><span class="line">   n_fields=nil,</span><br><span class="line">   nulls=[],</span><br><span class="line">   lengths=&#123;&#125;,</span><br><span class="line">   externs=[]&gt;,</span><br><span class="line"> <span class="keyword">next</span>=<span class="number">112</span>,</span><br><span class="line"> key=</span><br><span class="line">  [#&lt;struct Innodb::Page::Index::FieldDescriptor</span><br><span class="line">    name=&quot;id&quot;,</span><br><span class="line">    type=&quot;INT&quot;,</span><br><span class="line">    value=833329,</span><br><span class="line">    extern=nil&gt;],</span><br><span class="line"> row=[],</span><br><span class="line"> sys=[],</span><br><span class="line"> child_page_number=<span class="number">138</span>,</span><br><span class="line"> transaction_id=<span class="literal">nil</span>,</span><br><span class="line"> roll_pointer=<span class="literal">nil</span>,</span><br><span class="line"> length=<span class="number">8</span>&gt;</span><br></pre></td></tr></table></figure><p>查看下聚簇索引的叶子节点的各项属性信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 3 page-dump | cat | grep -n -A 60 &#x27;^records:&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">93:records:</span><br><span class="line">94-#&lt;struct Innodb::Page::Index::UserRecord</span><br><span class="line">95- type=:clustered,</span><br><span class="line">96- format=:compact,</span><br><span class="line">97- offset=125,</span><br><span class="line">98- header=</span><br><span class="line">99-  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">100-   length=5,</span><br><span class="line">101-   next=138,</span><br><span class="line">102-   type=:node_pointer,</span><br><span class="line">103-   heap_number=2,</span><br><span class="line">104-   n_owned=0,</span><br><span class="line">105-   info_flags=1,</span><br><span class="line">106-   offset_size=nil,</span><br><span class="line">107-   n_fields=nil,</span><br><span class="line">108-   nulls=[],</span><br><span class="line">109-   lengths=&#123;&#125;,</span><br><span class="line">110-   externs=[]&gt;,</span><br><span class="line">111- next=138,</span><br><span class="line">112- key=</span><br><span class="line">113-  [#&lt;struct Innodb::Page::Index::FieldDescriptor</span><br><span class="line">114-    name=&quot;id&quot;,</span><br><span class="line">115-    type=&quot;INT&quot;,</span><br><span class="line">116-    value=1,</span><br><span class="line">117-    extern=nil&gt;],</span><br><span class="line">118- row=[],</span><br><span class="line">119- sys=[],</span><br><span class="line">120- child_page_number=133,</span><br><span class="line">121- transaction_id=nil,</span><br><span class="line">122- roll_pointer=nil,</span><br><span class="line">123- length=8&gt;</span><br><span class="line">124-</span><br><span class="line">125-#&lt;struct Innodb::Page::Index::UserRecord</span><br><span class="line">126- type=:clustered,</span><br><span class="line">127- format=:compact,</span><br><span class="line">128- offset=138,</span><br><span class="line">129- header=</span><br><span class="line">130-  #&lt;struct Innodb::Page::Index::RecordHeader</span><br><span class="line">131-   length=5,</span><br><span class="line">132-   next=151,</span><br><span class="line">133-   type=:node_pointer,</span><br><span class="line">134-   heap_number=3,</span><br><span class="line">135-   n_owned=0,</span><br><span class="line">136-   info_flags=0,</span><br><span class="line">137-   offset_size=nil,</span><br><span class="line">138-   n_fields=nil,</span><br><span class="line">139-   nulls=[],</span><br><span class="line">140-   lengths=&#123;&#125;,</span><br><span class="line">141-   externs=[]&gt;,</span><br><span class="line">142- next=151,</span><br><span class="line">143- key=</span><br><span class="line">144-  [#&lt;struct Innodb::Page::Index::FieldDescriptor</span><br><span class="line">145-    name=&quot;id&quot;,</span><br><span class="line">146-    type=&quot;INT&quot;,</span><br><span class="line">147-    value=166430,</span><br><span class="line">148-    extern=nil&gt;],</span><br><span class="line">149- row=[],</span><br><span class="line">150- sys=[],</span><br><span class="line">151- child_page_number=134,</span><br><span class="line">152- transaction_id=nil,</span><br><span class="line">153- roll_pointer=nil,</span><br></pre></td></tr></table></figure><p>如图展示的是一些 Page 的详细信息，大家看下图对号入座。</p><p><img src="/mysql/learn-mysql-021/modb_20211120_783b79ee-49b6-11ec-adf3-38f9d3cd240d.png" loading="lazy"></p><h3 id="查看某个-Page-各属性信息空间占用情况及百分比："><a href="#查看某个-Page-各属性信息空间占用情况及百分比：" class="headerlink" title="查看某个 Page 各属性信息空间占用情况及百分比："></a>查看某个 Page 各属性信息空间占用情况及百分比：</h3><h4 id="聚簇索引非叶子节点页-x2F-根页面（Clustered-Index-Non-Leaf）："><a href="#聚簇索引非叶子节点页-x2F-根页面（Clustered-Index-Non-Leaf）：" class="headerlink" title="聚簇索引非叶子节点页 &#x2F; 根页面（Clustered Index Non-Leaf）："></a>聚簇索引非叶子节点页 &#x2F; 根页面（Clustered Index Non-Leaf）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 3 page-illustrate</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327185142292.png" alt="image-20230327185142292" style="zoom:50%;"><blockquote><p>红框部分为颜色说明及各属性空间占用百分比。</p></blockquote><h4 id="聚簇索引的叶子节点页（Clustered-Index-Leaf）："><a href="#聚簇索引的叶子节点页（Clustered-Index-Leaf）：" class="headerlink" title="聚簇索引的叶子节点页（Clustered Index Leaf）："></a>聚簇索引的叶子节点页（Clustered Index Leaf）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 5 page-illustrate</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327190015480.png" alt="image-20230327190015480" style="zoom:50%;"><h2 id="Record（记录）相关"><a href="#Record（记录）相关" class="headerlink" title="Record（记录）相关"></a><strong>Record（记录）相关</strong></h2><h3 id="查看指定偏移量的记录-Record-详细信息："><a href="#查看指定偏移量的记录-Record-详细信息：" class="headerlink" title="查看指定偏移量的记录 Record 详细信息："></a>查看指定偏移量的记录 Record 详细信息：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 5 -R 127 record-dump</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327190619666.png" alt="image-20230327190619666" style="zoom:50%;"><h3 id="查看指定偏移量记录-Record-的历史记录（为指定偏移量记录的-UNDO-LOG）："><a href="#查看指定偏移量记录-Record-的历史记录（为指定偏移量记录的-UNDO-LOG）：" class="headerlink" title="查看指定偏移量记录 Record 的历史记录（为指定偏移量记录的 UNDO LOG）："></a>查看指定偏移量记录 Record 的历史记录（为指定偏移量记录的 UNDO LOG）：</h3><p>修改 tbl_innodb_ruby.t_people 表 id&#x3D;10 的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATe t_people SET c_name = &quot;ypb_test&quot; WHERE id=10;</span><br></pre></td></tr></table></figure><p>抓取 test_innodb_ruby.words 表所有记录和 Page 的对应关系：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people  -I PRIMARY index-recurse | grep -B 20 -n &#x27;(id=10)&#x27;</span><br></pre></td></tr></table></figure><p>定位 id&#x3D;10 的记录所在的 Page，获取 PAGE_NO：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people  -I PRIMARY index-recurse | grep -B 20 -n &#x27;(id=10)&#x27;</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327191903009.png" alt="image-20230327191903009" style="zoom:50%;"><blockquote><p> 如图，我们看到数据已经被修改成&#39;ypb_test&#39;，且知道了 id&#x3D;10 这行数据所在的 Page 是 PAGE_NO&#x3D;5。  </p></blockquote><p>获取 t_people 表空间数据页 Page 的详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 5 page-dump | grep -B 35 -n  &quot;ypb_test&quot;</span><br></pre></td></tr></table></figure><p>获取 id&#x3D;10 这行记录的偏移量：</p><img src="/mysql/learn-mysql-021/image-20230327192114564.png" alt="image-20230327192114564" style="zoom:50%;"><blockquote><p>如图，我们知道了偏移量是 offset&#x3D;613。所以我们就可以通过指定偏移量查询该条 Record 的历史记录。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people -p 5 -R 613 record-history</span><br></pre></td></tr></table></figure><img src="/mysql/learn-mysql-021/image-20230327192244144.png" alt="image-20230327192244144" style="zoom:50%;">]]></content>
    
    
    <summary type="html">MySQL工具之innodb_ruby：探究InnoDB存储结构的利器</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
    <category term="innobd_ruby" scheme="https://theme-next.js.org/tags/innobd-ruby/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-MySQL 之 InnoDB 表空间</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-020/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-020/</id>
    <published>2023-03-25T08:29:58.000Z</published>
    <updated>2023-03-25T08:32:46.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL 之 InnoDB 表空间，介绍 MySQL 的 InnoDB 存储引擎表空间结构。</p></blockquote><p>InnoDB 支持许多种类型的表空间，本文重点关注独立表空间和系统表空间的结构。它们的结构比较相似，但是由于系统表空间中额外包含了一些关于整个系统的信息，所以我们先挑简单一点的独立表空间来介绍，稍后再说系统表空间的结构。</p><p>区（Extent）的概念</p><hr><p>表空间中的页实在是太多了，为了更好的管理这些页面，InnoDB 提出了区（英文名：extent）的概念。对于 <strong>16KB 的页</strong>来说，<strong>连续的 64 个页就是一个区</strong>，也就是说<strong>一个区默认占用 1MB 空间大小</strong>。不论是系统表空间还是独立表空间，都可以看成是由若干个区组成的，<strong>每 256 个区被划分成一组</strong>。画个图表示就是这样：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_3580f8ea-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>其中 extent 0 ~ extent 255 这 256 个区算是第一个组，extent 256 ~ extent 511 这 256 个区算是第二个组，extent 512 ~ extent 767 这 256 个区算是第三个组（上图中并未画全第三个组全部的区，请自行脑补），依此类推可以划分更多的组。这些组的头几个页面的类型都是类似的，就像这样：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_358ada72-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>从上图中我们能得到如下信息：</p><ul><li><p>第一个组最开始的 3 个页面的类型是固定的，也就是说 extent 0 这个区最开始的 3 个页面的类型是固定的，分别是：</p></li><li><p><strong>FSP_HDR 类型：这个类型的页面是用来登记整个表空间的一些整体属性以及本组所有的区，也就是 extent 0 ~ extent 255 这 256 个区的属性。需要注意的一点是，<strong><strong>整个</strong></strong>表空间只有一个 FSP_HDR 类型的页面</strong>。</p></li><li><p><strong>IBUF_BITMAP 类型：这个类型的页面是存储本组所有的区的所有页面关于 INSERT BUFFER 的信息</strong>。</p></li><li><p><strong>INODE 类型：这个类型的页面存储了许多称为 INODE 的数据结构</strong>。</p></li><li><p>其余各组最开始的 2 个页面的类型是固定的，也就是说 extent 256、extent 512 这些区最开始的 2 个页面的类型是固定的，分别是：</p></li><li><p><strong>XDES 类型：全称是 extent descriptor，用来登记本组 256 个区的属性，也就是说对于在 extent 256 区中的该类型页面存储的就是 extent 256 ~ extent 511 这些区的属性，对于在 extent 512 区中的该类型页面存储的就是 extent 512 ~ extent 767 这些区的属性</strong>。上边介绍的 <strong>FSP_HDR 类型的页面其实和 XDES 类型的页面的作用类似，只不过 FSP_HDR 类型的页面还会额外存储一些表空间的属性</strong>。</p></li><li><p>IBUF_BITMAP 类型：同上，不再赘述。</p></li></ul><p>宏观的结构就是这样了，里边儿的名词大家也不用记清楚，只要大致记得：表空间被划分为许多连续的区，每个区默认由 64 个页组成，每 256 个区划分为一组，每个组的最开始的几个页面类型是固定的就好了。</p><p>段（Segment）的概念</p><hr><p>如果我们表中数据量很少的话，比如说你的表中只有几十条、几百条数据的话，的确用不到区的概念，因为简单的几个页就能把对应的数据存储起来，但是你架不住表里的记录越来越多呀。从理论上说，不引入区的概念只使用页的概念对存储引擎的运行并没啥影响，但是我们来考虑一下下边这个场景：</p><ul><li>我们每向表中插入一条记录，本质上就是向该表的聚簇索引以及所有二级索引代表的 B + 树的节点中插入数据。而 B + 树的每一层中的页都会形成一个双向链表，如果是以页为单位来分配存储空间的话，双向链表相邻的两个页之间的物理位置可能离得非常远。我们介绍 B + 树索引的适用场景的时候特别提到范围查询只需要定位到最左边的记录和最右边的记录，然后沿着双向链表一直扫描就可以了，而如果链表中相邻的两个页物理位置离得非常远，就是所谓的随机 I&#x2F;O。再一次强调，磁盘的速度和内存的速度差了好几个数量级，随机 I&#x2F;O 是非常慢的，所以我们应该尽量让链表中相邻的页的物理位置也相邻，这样进行范围查询的时候才可以使用所谓的顺序 I&#x2F;O。</li></ul><p>所以才引入了区（extent）的概念，一个区就是在物理位置上连续的 64 个页。在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照区为单位分配，甚至在表中的数据十分非常特别多的时候，可以一次性分配多个连续的区。虽然可能造成一点点空间的浪费（数据不足填充满整个区），但是从性能角度看，可以消除很多的随机 I&#x2F;O，功大于过。</p><p>我们提到的范围查询，其实是对 B + 树叶子节点中的记录进行顺序扫描，而如果不区分叶子节点和非叶子节点，统统把节点代表的页面放到申请到的区中的话，进行范围扫描的效果就大打折扣了。所以 <strong>InnoDB 对 B + 树的叶子节点和非叶子节点进行了区别对待，也就是说叶子节点有自己独有的区，非叶子节点也有自己独有的区。存放叶子节点的区的集合就算是一个段（segment），存放非叶子节点的区的集合也算是一个段。也就是说一个索引会生成 2 个段，一个叶子节点段，一个非叶子节点段</strong>。</p><p><strong>默认情况下一个使用 InnoDB 存储引擎的表只有一个聚簇索引，一个索引会生成 2 个段，而段是以区为单位申请存储空间的</strong>，一个区默认占用 1M 存储空间，所以默认情况下一个只存了几条记录的小表也需要 2M 的存储空间么？以后每次添加一个索引都要多申请 2M 的存储空间么？这对于存储记录比较少的表简直是天大的浪费。InnoDB 挺节俭的，当然也考虑到了这种情况。这个问题的症结在于到现在为止我们介绍的区都是非常纯粹的，也就是一个区被整个分配给某一个段，或者说区中的所有页面都是为了存储同一个段的数据而存在的，即使段的数据填不满区中所有的页面，那余下的页面也不能挪作他用。<strong>现在为了考虑以完整的区为单位分配给某个段对于数据量较小的表太浪费存储空间的这种情况，InnoDB 提出了一个碎片（fragment）区的概念，也就是在一个碎片区中，并不是所有的页都是为了存储同一个段的数据而存在的，而是碎片区中的页可以用于不同的目的，比如有些页用于段 A，有些页用于段 B，有些页甚至哪个段都不属于。****碎片区直属于表空间，并不属于任何一个段。</strong>所以此后<strong>为某个段分配存储空间的策略</strong>是这样的：</p><ul><li><p><strong>在刚开始向表中插入数据的时候，段是从某个碎片区以单个页面为单位来分配存储空间的</strong>。</p></li><li><p><strong>当某个段已经占用了 32 个碎片区页面之后，就会以完整的区为单位来分配存储空间</strong>。</p></li></ul><p><strong>所以现在****段不能仅定义为是某些区的集合，更精确的应该是某些零散的页面以及一些完整的区的集合</strong>。除了索引的叶子节点段和非叶子节点段之外，InnoDB 中还有为存储一些特殊的数据而定义的段，比如回滚段，当然我们现在并不关心别的类型的段，现在只需要知道段是一些零散的页面以及一些完整的区的集合就好了。</p><p>区的分类</p><hr><p>表空间的是由若干个区组成的，这些区大体上可以分为 4 种类型：</p><ul><li><p><strong>空闲的区：现在还没有用到这个区中的任何页面</strong>。</p></li><li><p><strong>有剩余空间的碎片区：表示碎片区中还有可用的页面</strong>。</p></li><li><p><strong>没有剩余空间的碎片区：表示碎片区中的所有页面都被使用，没有空闲页面</strong>。</p></li><li><p><strong>附属于某个段的区。每一个索引都可以分为叶子节点段和非叶子节点段，除此之外 InnoDB 还会另外定义一些特殊作用的段，****在这些段中的数据量很大时将使用区来作为基本的分配单位</strong>。</p></li></ul><p>这 4 种类型的区也可以被称为区的 4 种状态（State），InnoDB 为这 4 种状态的区定义了特定的名词：</p><table><tbody><tr><th>状态名</th><th>含义</th></tr></tbody><tbody><tr><td>FREE</td><td>空闲的区</td></tr><tr><td>FREE_FRAG</td><td>有剩余空间的碎片区</td></tr><tr><td>FULL_FRAG</td><td>没有剩余空间的碎片区</td></tr><tr><td>FSEG</td><td>附属于某个段的区</td></tr></tbody></table><p><strong>需要再次强调一遍的是，处于 FREE、FREE_FRAG 以及 FULL_FRAG 这三种状态的区都是独立的，算是直属于表空间；而处于 FSEG 状态的区是附属于某个段的。</strong></p><p>小提示</p><p><strong>如果把表空间比作是国家，段就相当于省，区就相当于市。一般的市都是属于某个省，就像 FSEG 状态的区全部属于某个段。而 FREE、FREE_FRAG、FULL_FRAG 这三种状态的区却直接隶属于表空间，就像北京市、天津市、上海市是直接属于国家管理一样。</strong></p><p><strong>为了方便管理这些区，InnoDB 设计了一个称为 XDES Entry 的结构（全称就是 Extent Descriptor Entry），每一个区都对应着一个 XDES Entry 结构，这个结构记录了对应的区的一些属性</strong>。我们先看图来对这个结构有个大致的了解：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_359c1918-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>从图中我们可以看出，XDES Entry 是一个 40 个字节的结构，大致分为 4 个部分，各个部分的释义如下：</p><ul><li><strong>Segment ID（8 字节）</strong></li></ul><p>每一个段都有一个唯一的编号，用 ID 表示，此处的 Segment ID 字段表示就是该区所在的段。当然前提是该区已经被分配给某个段了，不然的话该字段的值没啥意义。</p><ul><li><strong>List Node（12 字节）</strong></li></ul><p>这个部分可以将若干个 XDES Entry 结构串联成一个链表，大家看一下这个 List Node 的结构：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_35a60e64-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>如果我们想定位表空间内的某一个位置的话，只需指定页号以及该位置在指定页号中的页内偏移量即可。所以：</p><ul><li><p>Prev Node Page Number 和 Prev Node Offset 的组合就是指向前一个 XDES Entry 的指针</p></li><li><p>Next Node Page Number 和 Next Node Offset 的组合就是指向后一个 XDES Entry 的指针。</p></li><li><p><strong>State（4 字节）</strong></p></li></ul><p>这个字段表明区的状态。可选的值就是我们前边说过的那 4 个，分别是：FREE、FREE_FRAG、FULL_FRAG 和 FSEG。</p><ul><li><strong>Page State Bitmap（16 字节）</strong></li></ul><p><strong>这个部分共占用 16 个字节，也就是 128 个比特位。我们说一个区默认有 64 个页，这 128 个比特位被划分为 64 个部分，每个部分 2 个比特位，对应区中的一个页。</strong>比如 Page State Bitmap 部分的第 1 和第 2 个比特位对应着区中的第 1 个页面，第 3 和第 4 个比特位对应着区中的第 2 个页面，依此类推，Page State Bitmap 部分的第 127 和 128 个比特位对应着区中的第 64 个页面。<strong>这两个比特位的第一个位表示对应的页是否是空闲的，第二个比特位还没有用</strong>。</p><p>XDES Entry 链表</p><hr><p>到现在为止，我们已经提出了区、段、碎片区、附属于段的区、XDES Entry 等概念，我们把事情搞这么麻烦的初心仅仅是想提高向表插入数据的效率又不至于数据量少的表浪费空间。现在我们知道向表中插入数据本质上就是向表中各个索引的叶子节点段、非叶子节点段插入数据，也知道了不同的区有不同的状态，再回到最初的起点，捋一捋向某个段中插入数据的过程：</p><ul><li><strong>当段中数据较少的时候，首先会查看表空间中是否有状态为 FREE_FRAG 的区，也就是找还有空闲空间的碎片区，如果找到了，那么从该区中取一些零散的页把数据插进去；否则到表空间下申请一个状态为 FREE 的区，也就是空闲的区，把该区的状态变为 FREE_FRAG，然后从该新申请的区中取一些零散的页把数据插进去。之后不同的段使用零散页的时候都会从该区中取，直到该区中没有空闲空间，然后该区的状态就变成了 FULL_FRAG</strong>。</li></ul><p>现在的问题是你怎么知道表空间里的哪些区是 FREE 的，哪些区的状态是 FREE_FRAG 的，哪些区是 FULL_FRAG 的？要知道表空间的大小是可以不断增大的，当增长到 GB 级别的时候，区的数量也就上千了，我们总不能每次都遍历这些区对应的 XDES Entry 结构吧？这时候就是 <strong>XDES Entry 中的 List Node</strong> 部分发挥奇效的时候了，我们可以通过 List Node 中的指针，做这么三件事：</p><ul><li><p><strong>把状态为 FREE 的区对应的 XDES Entry 结构通过 List Node 来连接成一个链表，这个链表我们就称之为 FREE 链表</strong>。</p></li><li><p><strong>把状态为 FREE_FRAG 的区对应的 XDES Entry 结构通过 List Node 来连接成一个链表，这个链表我们就称之为 FREE_FRAG 链表</strong>。</p></li><li><p><strong>把状态为 FULL_FRAG 的区对应的 XDES Entry 结构通过 List Node 来连接成一个链表，这个链表我们就称之为 FULL_FRAG 链表</strong>。</p></li></ul><p>这样每当我们想找一个 FREE_FRAG 状态的区时，就直接把 FREE_FRAG 链表的头节点拿出来，从这个节点中取一些零散的页来插入数据，当这个节点对应的区用完时，就修改一下这个节点的 State 字段的值，然后从 FREE_FRAG 链表中移到 FULL_FRAG 链表中。同理，如果 FREE_FRAG 链表中一个节点都没有，那么就直接从 FREE 链表中取一个节点移动到 FREE_FRAG 链表的状态，并修改该节点的 STATE 字段值为 FREE_FRAG，然后从这个节点对应的区中获取零散的页就好了。</p><ul><li>当段中数据已经占满了 32 个零散的页后，就直接申请完整的区来插入数据了。</li></ul><p>还是那个问题，我们怎么知道哪些区属于哪个段的呢？再遍历各个 XDES Entry 结构？遍历是不可能遍历的，这辈子都不可能遍历的，有链表还遍历个毛线啊。所以我们把状态为 FSEG 的区对应的 XDES Entry 结构都加入到一个链表喽？傻呀，不同的段哪能共用一个区呢？你想把索引 a 的叶子节点段和索引 b 的叶子节点段都存储到一个区中么？显然我们想要每个段都有它独立的链表，所以可以根据段号（也就是 Segment ID）来建立链表，有多少个段就建多少个链表？好像也有点问题，因为一个段中可以有好多个区，有的区是完全空闲的，有的区还有一些页面可以用，有的区已经没有空闲页面可以用了，所以我们有必要继续细分，InnoDB 为每个段中的区对应的 XDES Entry 结构建立了三个链表：</p><ul><li><p><strong>FREE 链表：同一个段中，所有页面都是空闲的区对应的 XDES Entry 结构会被加入到这个链表。注意和直属于表空间的 FREE 链表区别开了，此处的 FREE 链表是附属于某个段的</strong>。</p></li><li><p><strong>NOT_FULL 链表：同一个段中，仍有空闲空间的区对应的 XDES Entry 结构会被加入到这个链表</strong>。</p></li><li><p><strong>FULL 链表：同一个段中，已经没有空闲空间的区对应的 XDES Entry 结构会被加入到这个链表</strong>。</p></li></ul><p>强调一遍，每一个索引都对应两个段，每个段都会维护上述的 3 个链表。</p><p>举个栗子🌰，比如下边这个表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t (  c1 INT NOT NULL AUTO_INCREMENT,  c2 VARCHAR(100),  c3 VARCHAR(100),  PRIMARY KEY (c1),  KEY idx_c2 (c2))ENGINE=InnoDB;</span><br></pre></td></tr></table></figure><p><strong>这个表 t 共有两个索引，一个聚簇索引，一个二级索引 idx_c2，所以这个表共有 4 个段，每个段都会维护上述 3 个链表，总共是 12 个链表，加上我们上边说过的直属于表空间的 3 个链表，整个独立表空间共需要维护 15 个链表。所以段在数据量比较大时插入数据的话，会先获取 NOT_FULL 链表的头节点，直接把数据插入这个头节点对应的区中即可，如果该区的空间已经被用完，就把该节点移到 FULL 链表中</strong>。</p><p>链表基节点</p><hr><p>上边介绍了很多链表，怎么找到这些链表呢，或者说怎么找到某个链表的头节点或者尾节点在表空间中的位置呢？InnoDB 当然考虑了这个问题，设计了一个叫 List Base Node 的结构，翻译成中文就是<strong>链表的基节点</strong>。这个结构中包含了链表的头节点和尾节点的指针以及这个链表中包含了多少节点的信息，我们画图看一下这个结构的示意图：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_35b25408-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>我们上边介绍的每个链表都对应这么一个 List Base Node 结构，其中：</p><ul><li><p><strong>List Length 表明该链表一共有多少节点</strong>。</p></li><li><p><strong>First Node Page Number 和 First Node Offset 表明该链表的头节点在表空间中的位置</strong>。</p></li><li><p><strong>Last Node Page Number 和 Last Node Offset 表明该链表的尾节点在表空间中的位置</strong>。</p></li></ul><p>一般我们把某个链表对应的 List Base Node 结构放置在表空间中固定的位置，这样想找定位某个链表就变得非常简单啦。</p><p>链表小结</p><hr><p><strong>综上所述，表空间是由若干个区组成的，每个区都对应一个 XDES Entry 的结构，直属于表空间的区对应的 XDES Entry 结构可以分成 FREE、FREE_FRAG 和 FULL_FRAG 这 3 个链表；每个段可以附属若干个区，每个段中的区对应的 XDES Entry 结构可以分成 FREE、NOT_FULL 和 FULL 这 3 个链表。</strong>每个链表都对应一个 List Base Node 的结构，这个结构里记录了链表的头、尾节点的位置以及该链表中包含的节点数。正是因为这些链表的存在，管理这些区才变成了一件非常简单的事情。</p><p>段的结构</p><hr><p>我们前边说过，段其实不对应表空间中某一个连续的物理区域，而是一个逻辑上的概念，由若干个零散的页面以及一些完整的区组成。像每个区都有对应的 XDES Entry 来记录这个区中的属性一样，InnoDB 为每个段都定义了一个 INODE Entry 结构来记录一下段中的属性。大家看一下示意图：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_35bbd62c-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>它的各个部分释义如下：</p><ul><li><strong>Segment ID</strong></li></ul><p>就是指这个 INODE Entry 结构对应的段的编号（ID）。</p><ul><li><strong>NOT_FULL_N_USED</strong></li></ul><p>这个字段指的是在 NOT_FULL 链表中已经使用了多少个页面。</p><ul><li><strong>3 个 List Base Node</strong></li></ul><p>分别为段的 FREE 链表、NOT_FULL 链表、FULL 链表定义了 List Base Node，这样我们想查找某个段的某个链表的头节点和尾节点的时候，就可以直接到这个部分找到对应链表的 List Base Node。so easy!</p><ul><li><strong>Magic Number</strong></li></ul><p>这个值是用来标记这个 INODE Entry 是否已经被初始化了（初始化的意思就是把各个字段的值都填进去了）。如果这个数字是值的 97937874，表明该 INODE Entry 已经初始化，否则没有被初始化。（不用纠结这个值有啥特殊含义，规定）。</p><ul><li><strong>Fragment Array Entry</strong></li></ul><p>段是一些零散页面和一些完整的区的集合，每个 Fragment Array Entry 结构都对应着一个零散的页面，这个结构一共 4 个字节，表示一个零散页面的页号。</p><p>结合着这个 INODE Entry 结构，大家可能对段是一些零散页面和一些完整的区的集合的理解再次深刻一些。</p><p>各类型页面详细情况</p><hr><p>FSP_HDR 类型</p><hr><p>表空间的第一个页面，页号为 0。这个页面的类型是 FSP_HDR，它存储了表空间的一些整体属性以及第一个组内 256 个区的对应的 XDES Entry 结构，直接看这个类型的页面的示意图：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_35c5d0dc-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>一个完整的 FSP_HDR 类型的页面大致由 5 个部分组成，各个部分的具体释义如下表：</p><table><tbody><tr><th>名称</th><th>中文名</th><th>占用空间大小</th><th>简单描述</th></tr></tbody><tbody><tr><td>File Header</td><td>文件头部</td><td>38 字节</td><td>页的一些通用信息</td></tr><tr><td>File Space Header</td><td>表空间头部</td><td>112 字节</td><td>表空间的一些整体属性信息</td></tr><tr><td>XDES Entry</td><td>区描述信息</td><td>10240 字节</td><td>存储本组 256 个区对应的属性信息</td></tr><tr><td>Empty Space</td><td>尚未使用空间</td><td>5986 字节</td><td>用于页结构的填充，没啥实际意义</td></tr><tr><td>File Trailer</td><td>文件尾部</td><td>8 字节</td><td>校验页是否完整</td></tr></tbody></table><p>File Header 和 File Trailer 就不再强调了，另外的几个部分中，Empty Space 是尚未使用的空间，我们不用管它，重点来看看 File Space Header 和 XDES Entry 这两个部分。</p><p>File Space Header 部分</p><hr><p>这个部分是用来存储表空间的一些整体属性信息的，详看下图：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_35d42ae2-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>下面是各个属性的简单描述：</p><table><tbody><tr><th>名称</th><th>占用空间大小</th><th>描述</th></tr></tbody><tbody><tr><td>Space ID</td><td>4 字节</td><td>表空间的 ID</td></tr><tr><td>Not Used</td><td>4 字节</td><td>这 4 个字节未被使用，可以忽略</td></tr><tr><td>Size</td><td>4 字节</td><td>当前表空间占有的页面数</td></tr><tr><td>FREE Limit</td><td>4 字节</td><td>尚未被初始化的最小页号，大于或等于这个页号的区对应的 XDES Entry 结构都没有被加入 FREE 链表</td></tr><tr><td>Space Flags</td><td>4 字节</td><td>表空间的一些占用存储空间比较小的属性</td></tr><tr><td>FRAG_N_USED</td><td>4 字节</td><td>FREE_FRAG 链表中已使用的页面数量</td></tr><tr><td>List Base Node for FREE List</td><td>16 字节</td><td>FREE 链表的基节点</td></tr><tr><td>List Base Node for FREE_FRAG List</td><td>16 字节</td><td>FREE_FRAG 链表的基节点</td></tr><tr><td>List Base Node for FULL_FRAG List</td><td>16 字节</td><td>FULL_FRAG 链表的基节点</td></tr><tr><td>Next Unused Segment ID</td><td>8 字节</td><td>当前表空间中下一个未使用的 Segment ID</td></tr><tr><td>List Base Node for SEG_INODES_FULL List</td><td>16 字节</td><td>SEG_INODES_FULL 链表的基节点</td></tr><tr><td>List Base Node for SEG_INODES_FREE List</td><td>16 字节</td><td>SEG_INODES_FREE 链表的基节点</td></tr></tbody></table><p>这里头的 Space ID、Not Used、Size 这三个字段大家肯定一看就懂，其他的字段我们再详细看一下：</p><ul><li><strong>List Base Node for FREE List、List Base Node for FREE_FRAG List、List Base Node for FULL_FRAG List</strong></li></ul><p>这三个大家看着太亲切了，分别是直属于表空间的 FREE 链表的基节点、FREE_FRAG 链表的基节点、FULL_FRAG 链表的基节点，这三个链表的基节点在表空间的位置是固定的，就是在表空间的第一个页面（也就是 FSP_HDR 类型的页面）的 File Space Header 部分。所以之后定位这几个链表就很简单啦。</p><ul><li><strong>FRAG_N_USED</strong></li></ul><p>这个字段表明在 FREE_FRAG 链表中已经使用的页面数量。</p><ul><li><strong>FREE Limit</strong></li></ul><p>我们知道表空间都对应着具体的磁盘文件，一开始我们创建表空间的时候对应的磁盘文件中都没有数据，所以我们需要对表空间完成一个初始化操作，包括为表空间中的区建立 XDES Entry 结构，为各个段建立 INODE Entry 结构，建立各种链表吧啦吧啦的各种操作。我们可以一开始就为表空间申请一个特别大的空间，但是实际上有绝大部分的区是空闲的，我们可以选择把所有的这些空闲区对应的 XDES Entry 结构加入 FREE 链表，也可以选择只把一部分的空闲区加入 FREE 链表，等啥时候空闲链表中的 XDES Entry 结构对应的区不够使了，再把之前没有加入 FREE 链表的空闲区对应的 XDES Entry 结构加入 FREE 链表，中心思想就是啥时候用到啥时候初始化，InnoDB 采用的就是后者，他们为表空间定义了 FREE Limit 这个字段，在该字段表示的页号之前的区都被初始化了，之后的区尚未被初始化。</p><ul><li><strong>Next Unused Segment ID</strong></li></ul><p>表中每个索引都对应 2 个段，每个段都有一个唯一的 ID，那当我们为某个表新创建一个索引的时候，就意味着要创建两个新的段。那怎么为这个新创建的段找一个唯一的 ID 呢？去遍历现在表空间中所有的段么？我们说过，遍历是不可能遍历的，这辈子都不可能遍历，InnoDB 提出了这个名叫 Next Unused Segment ID 的字段，该字段表明当前表空间中最大的段 ID 的下一个 ID，这样在创建新段的时候赋予新段一个唯一的 ID 值就 so easy 啦，直接使用这个字段的值就好了。</p><ul><li><strong>Space Flags</strong></li></ul><p>表空间对于一些布尔类型的属性，或者只需要寥寥几个比特位搞定的属性都放在了这个 Space Flags 中存储，虽然它只有 4 个字节，32 个比特位大小，却存储了好多表空间的属性，详细情况如下表：</p><table><tbody><tr><th>标志名称</th><th>占用空间（单位：bit）</th><th>描述</th></tr></tbody><tbody><tr><td>POST_ANTELOPE</td><td>1</td><td>表示文件格式是否大于 ANTELOPE</td></tr><tr><td>ZIP_SSIZE</td><td>4</td><td>表示压缩页面的大小</td></tr><tr><td>ATOMIC_BLOBS</td><td>1</td><td>表示是否自动把值非常长的字段放到 BLOB 页里</td></tr><tr><td>PAGE_SIZE</td><td>4</td><td>页面大小</td></tr><tr><td>DATA_DIR</td><td>1</td><td>表示表空间是否是从默认的数据目录中获取的</td></tr><tr><td>SHARED</td><td>1</td><td>是否为共享表空间</td></tr><tr><td>TEMPORARY</td><td>1</td><td>是否为临时表空间</td></tr><tr><td>ENCRYPTION</td><td>1</td><td>表空间是否加密</td></tr><tr><td>UNUSED</td><td>18</td><td>没有使用到的比特位</td></tr></tbody></table><ul><li><strong>List Base Node for SEG_INODES_FULL List 和 List Base Node for SEG_INODES_FREE List</strong></li></ul><p>每个段对应的 INODE Entry 结构会集中存放到一个类型为 <strong>INODE</strong> 的页中，如果表空间中的段特别多，则会有多个 INODE Entry 结构，可能一个页放不下，这些 INODE 类型的页会组成两种列表：</p><ul><li><p>SEG_INODES_FULL 链表，该链表中的 INODE 类型的页面都已经被 INODE Entry 结构填充满了，没空闲空间存放额外的 INODE Entry 了。</p></li><li><p>SEG_INODES_FREE 链表，该链表中的 INODE 类型的页面仍有空闲空间来存放 INODE Entry 结构。</p></li></ul><p>由于我们现在还没有详细介绍 INODE 类型页，所以等会说过 INODE 类型的页之后再回过头来看着两个链表。</p><p>XDES Entry 部分</p><hr><p>紧接着 File Space Header 部分的就是 XDES Entry 部分了，我们嘴上说过无数次，却从没见过真身的 XDES Entry 就是在表空间的第一个页面中保存的。我们知道一个 XDES Entry 结构的大小是 40 字节，但是一个页面的大小有限，只能存放有限个 XDES Entry 结构，所以我们才把 256 个区划分成一组，在每组的第一个页面中存放 256 个 XDES Entry 结构。大家回看那个 FSP_HDR 类型页面的示意图，XDES Entry 0 就对应着 extent 0，XDES Entry 1 就对应着 extent 1... 依此类推，XDES Entry255 就对应着 extent 255。</p><p>因为每个区对应的 XDES Entry 结构的地址是固定的，所以我们访问这些结构就非常简单啦。</p><p>XDES 类型</p><hr><p>每一个 XDES Entry 结构对应表空间的一个区，虽然一个 XDES Entry 结构只占用 40 字节，但你抵不住表空间的区的数量也多啊。在区的数量非常多时，一个单独的页可能就不够存放足够多的 XDES Entry 结构，所以我们把表空间的区分为了若干个组，每组开头的一个页面记录着本组内所有的区对应的 XDES Entry 结构。由于第一个组的第一个页面有些特殊，因为它也是整个表空间的第一个页面，所以除了记录本组中的所有区对应的 XDES Entry 结构以外，还记录着表空间的一些整体属性，这个页面的类型就是我们刚刚说完的 FSP_HDR 类型，整个表空间里只有一个这个类型的页面。除去第一个分组以外，之后的每个分组的第一个页面只需要记录本组内所有的区对应的 XDES Entry 结构即可，不需要再记录表空间的属性了，为了和 FSP_HDR 类型做区别，我们把之后每个分组的第一个页面的类型定义为 XDES，它的结构和 FSP_HDR 类型是非常相似的：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_35e0acb8-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p><strong>与 FSP_HDR 类型的页面对比，除了少了 File Space Header 部分之外，也就是除了少了记录表空间整体属性的部分之外，其余的部分是一样一样的</strong>。</p><p>IBUF_BITMAP 类型</p><hr><p>每个分组的第二个页面的类型都是 IBUF_BITMAP，这种类型的页里边记录了一些有关 Change Buffer 的信息。</p><p>INODE 类型</p><hr><p>再次对比前边介绍表空间的图，第一个分组的第三个页面的类型是 INODE。我们前边说过 InnoDB 为每个索引定义了两个段，而且为某些特殊功能定义了些特殊的段。为了方便管理，他们又为每个段设计了一个 INODE Entry 结构，这个结构中记录了关于这个段的相关属性。而我们这会儿要介绍的这个 INODE 类型的页就是为了存储 INODE Entry 结构而存在的。</p><p><img src="/mysql/learn-mysql-020/modb_20211023_35ee0c8c-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>一个 INODE 类型的页面是由这几部分构成的：</p><table><tbody><tr><th>名称</th><th>中文名</th><th>占用空间大小</th><th>简单描述</th></tr></tbody><tbody><tr><td>File Header</td><td>文件头部</td><td>38 字节</td><td>页的一些通用信息</td></tr><tr><td>List Node for INODE Page List</td><td>通用链表节点</td><td>12 字节</td><td>存储上一个 INODE 页面和下一个 INODE 页面的指针</td></tr><tr><td>INODE Entry</td><td>段描述信息</td><td>16320 字节</td><td>存储段描述信息</td></tr><tr><td>Empty Space</td><td>尚未使用空间</td><td>6 字节</td><td>用于页结构的填充，没啥实际意义</td></tr><tr><td>File Trailer</td><td>文件尾部</td><td>8 字节</td><td>校验页是否完整</td></tr></tbody></table><p>除了 File Header、Empty Space、File Trailer 这几个老朋友外，我们重点关注 List Node for INODE Page List 和 INODE Entry 这两个部分。</p><p>首先看 INODE Entry 部分，我们前边已经详细介绍过这个结构的组成了，主要包括对应的段内零散页面的地址以及附属于该段的 FREE、NOT_FULL 和 FULL 链表的基节点。每个 INODE Entry 结构占用 192 字节，一个页面里可以存储 85 个这样的结构。</p><p>重点看一下 List Node for INODE Page List，因为一个表空间中可能存在超过 85 个段，所以可能一个 INODE 类型的页面不足以存储所有的段对应的 INODE Entry 结构，所以就需要额外的 INODE 类型的页面来存储这些结构。还是为了方便管理这些 INODE 类型的页面，InnoDB 将这些 INODE 类型的页面串联成两个不同的链表：</p><ul><li><p><strong>SEG_INODES_FULL 链表：该链表中的 INODE 类型的页面中已经没有空闲空间来存储额外的 INODE Entry 结构了</strong>。</p></li><li><p><strong>SEG_INODES_FREE 链表：该链表中的 INODE 类型的页面中还有空闲空间来存储额外的 INODE Entry 结构了</strong>。</p></li></ul><p>想必大家已经认出这两个链表了，我们前边提到过这两个链表的基节点就存储在 File Space Header 里边，也就是说这两个链表的基节点的位置是固定的，所以我们可以很轻松的访问到这两个链表。以后每当我们新创建一个段（创建索引时就会创建段）时，都会创建一个 INODE Entry 结构与之对应，存储 INODE Entry 的大致过程就是这样的：</p><ul><li><p><strong>先看看 SEG_INODES_FREE 链表是否为空，如果不为空，直接从该链表中获取一个节点，也就相当于获取到一个仍有空闲空间的 INODE 类型的页面，然后把该 INODE Entry 结构放到该页面中。当该页面中无剩余空间时，就把该页放到 SEG_INODES_FULL 链表中</strong>。</p></li><li><p><strong>如果 SEG_INODES_FREE 链表为空，则需要从表空间的 FREE_FRAG 链表中申请一个页面，修改该页面的类型为 INODE，把该页面放到 SEG_INODES_FREE 链表中，与此同时把该 INODE Entry 结构放入该页面</strong>。</p></li></ul><p>Segment Header 结构的运用</p><hr><p>我们知道一个索引会产生两个段，分别是叶子节点段和非叶子节点段，而每个段都会对应一个 INODE Entry 结构，那我们怎么知道某个段对应哪个 INODE Entry 结构呢？所以得找个地方记下来这个对应关系。记得之前学习过的数据页 MySQL 之数据页结构，也就是 INDEX 类型的页有一个 Page Header 部分，所以把 Page Header 部分粘一下：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_36004dc0-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>其中的 PAGE_BTR_SEG_LEAF 和 PAGE_BTR_SEG_TOP 都占用 10 个字节，它们其实对应一个叫 Segment Header 的结构，该结构图示如下：</p><p><img src="/mysql/learn-mysql-020/modb_20211023_360a4898-33a4-11ec-aead-38f9d3cd240d.png" loading="lazy"></p><p>各个部分的具体释义如下：</p><table><tbody><tr><th>名称</th><th>占用空间大小</th><th>描述</th></tr></tbody><tbody><tr><td>Space ID of the INODE Entry</td><td>4 字节</td><td>INODE Entry 结构所在的表空间 ID</td></tr><tr><td>Page Number of the INODE Entry</td><td>4 字节</td><td>INODE Entry 结构所在的页面页号</td></tr><tr><td>Byte Offset of the INODE Entry</td><td>2 字节</td><td>INODE Entry 结构在该页面中的偏移量</td></tr></tbody></table><p>这样子就很清晰了，<strong>PAGE_BTR_SEG_LEAF 记录着叶子节点段对应的 INODE Entry 结构的地址是哪个表空间的哪个页面的哪个偏移量，PAGE_BTR_SEG_TOP 记录着非叶子节点段对应的 INODE Entry 结构的地址是哪个表空间的哪个页面的哪个偏移量。这样子<strong><strong>索引和其对应的段的关系就建立起来</strong></strong>了。不过需要注意的一点是，****因为一个索引只对应两个段，所以只需要在索引的根页面中记录这两个结构即可</strong>。</p><p>真实表空间对应的文件大小</p><hr><p>Q：上边的这些概念已经压的快喘不过气了。不过独立表空间有那么大么？我到数据目录里看了，一个新建的表对应的. ibd 文件只占用了 96K，才 6 个页面大小，上边的说了那么多概念，那么大的空间占用，为什么只有 96KB 大小？</p><p>A：一开始表空间占用的空间自然是很小，因为表里边都没有数据。.ibd 文件是自扩展的，随着表中数据的增多，表空间对应的文件也逐渐增大。</p>]]></content>
    
    
    <summary type="html">MySQL 之 InnoDB 表空间</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-如何学习 MySQL</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-019/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-019/</id>
    <published>2023-03-25T08:07:32.000Z</published>
    <updated>2023-03-25T08:11:33.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《高性能 MySQL》第四版发布后，收到了很多读者的反馈，其中关注最多的是作为一个初学者，应该如何能够较为系统的学习 MySQL，从而应对日常工作或者获得更好的职业发展。</p></blockquote><p>《高性能 MySQL》第四版发布后，收到了很多读者的反馈，其中关注最多的是作为一个初学者，应该如何能够较为系统的学习 MySQL，从而应对日常工作或者获得更好的职业发展。于是和多个业内朋友讨论后，整理了一些 MySQL 学习的推荐资源，供初学者参考。</p><p>本文分成几部分，包括业界专家的经验、推荐 MySQL 书籍、MySQL 视频 &#x2F; 音频资源、MySQL 其他资源或者 MySQL 学习方式等。</p><h2 id="1、阿里云的数据库专家-Yangyidba"><a href="#1、阿里云的数据库专家-Yangyidba" class="headerlink" title="1、阿里云的数据库专家 Yangyidba"></a>1、阿里云的数据库专家 Yangyidba</h2><hr><p><img src="/mysql/learn-mysql-019/20230324-ec9159d6-1f25-4460-b143-bb534f05c885.png" loading="lazy"></p><p><strong>提问：刚刚入行时，有哪些资料给你了帮助？</strong></p><p>正式接触 MySQL 是 2011 年底，当时的公司的数据库版本主要是 5.5 版本和少量 5.1 版本。因为之前学 Oracle 的经验是查看官方文档，学习 MySQL 资料主要是 “官方文档” 和当时的淘宝 DBA 团队组织的技术大学的技术分享，学习 MySQL 技术的技术特性和经典案例。</p><p>其实就现在而言，MySQL 官方文档依然是最好的学习资料和教材, 里面非常详细的说明 MySQL 的基础架构，redo，undo，读写逻辑，字段类型，锁，存储引擎，主从复制，MGR ，性能优化等等。把官方文档通读一遍，基本上能超越 60-70% 左右的 DBA，为什么不是更高呢？因为学习技术是为了使用技能。</p><p><strong>提问：进一步了解 MySQL &#x2F; 数据库，哪些资料给了你帮助？</strong></p><p>换个回答的方式，哪些因素帮助我提升数据库技能水平？总结起来大概三个方面：</p><ol><li><p>掌握基础知识之后，会有 “纸上来得终觉浅，绝知此事要躬行”” 的想法。基于对各种 MySQL 技术知识点和 功能特性的理解，搭建单节点, 主备模式环境 做各种功能测试，并且将知识点的验证或者分析过程下来写博客，比如死锁，能将常见的 20 个死锁常见分析过程总结下来，相信死锁问题再也难不倒你了。</p></li><li><p>如果是第一条是模拟考，那么真实的业务场景则是实战演练，在海量的业务场景下，层出不穷的业务问题和技术难点驱动 DBA 对 数据库的使用和限制了解的更多。比如：</p></li></ol><ul><li><p>truncat 表 如何恢复?</p></li><li><p>如果有 500g binlog，如何加速 binlog 应用？</p></li><li><p>如何删除 3T 的大表？</p></li><li><p>秒杀场景下数据库设计和优化？</p></li><li><p>如何排查业务访问 db RT 异常?</p></li><li><p>为什么业务写完立即查询当时查不到?</p></li></ul><ol start="3"><li>和优秀的同事或者优秀的人同行，比如有解决不了的疑惑可以咨询内核开发。</li></ol><p><strong>提问：现在回头来看，哪些资料你觉得是最推荐的，分别对于初入学，和深入学习的人来说？</strong></p><p>对于初学者而言，首要目标是 夯实基础，学好基础 &#x2F; 理论知识。</p><ol><li>官方文档</li><li>《高性能 MySQL》</li><li>《MySQL 性能调优与架构设计》</li><li>《MySQL 技术内幕: InnoDB 存储引擎》</li></ol><p>对于深入学习的人来说， 单独的数据库学习是没有意义的，必须服务好具体的业务场景才能发挥其价值。推荐：</p><ol><li>《数据密集型应用系统设计》</li><li>《性能之巅》</li><li>《漫画算法》</li></ol><p>学习和总结各种业务场景下的数据库架构设计 ，数据库高可用，容灾，强红包，秒杀，直播弹幕等等。</p><p><img src="/mysql/learn-mysql-019/20230324-9befc5e3-c74b-41a6-87fb-4ff5e2e05f66.png" loading="lazy"></p><p>对于初学者，建议自己手动安装常见的架构，比如最简单的一主一备，作为验证环境。找一些操作案例较多的博客或公众号文章，照着作者的思路执行。</p><p>然后再自己设计一些执行案例，先自己推导结果，再执行验证，在验证过程中加深理解或者勘误。</p><p>内核学习也可以延用这个方法，在验证过程中设想如果是自己实现这个功能的，会怎么写，然后通过阅读源码理解作者的设计思路。就是看源码要带着问题去看，找只要主要流程，GDB 去调试单步执行。</p><p><img src="/mysql/learn-mysql-019/20230324-0ba735dd-342d-49ac-b88d-16df2ebf1452.png" loading="lazy"></p><p><strong>推荐的重要学习资料包括：</strong></p><ol><li>MySQL 官方文档</li><li>《MySQL 技术内幕：InnoDB 存储引擎》</li><li>MySQL 周边组件的文档与源码，如 percona toolkit、MHA 等</li><li>初学者：丁奇 45 讲、MySQL 官方文档</li><li>深入学习：主要还是积累、排错，云数据库相关还是需要看下技术相关的论文。</li></ol><p>MySQL 作为当前最流行的关系型数据库，相关的书籍也非常多，这里罗列基本推荐如下：</p><p><img src="/mysql/learn-mysql-019/20230324-a2d40815-db16-4347-9b89-22c99c28aa68.png" loading="lazy"></p><p>MySQL 相关的书籍</p><p>文档是最全面和权威的参考，而其他三本都是，根据豆瓣网友打分进行推荐的。第一本《MySQL 是怎样运行的》适用于完全的初学者，内容由浅到深。第二本《高性能 MySQL》则从 “优化” 为入口，非常系统介绍了 MySQL 的架构、优化，是一本非常好的进阶书籍。第三本是《MySQL 技术内幕 InnoDB 存储引擎》，这本书深入的介绍了 MySQL 核心组件 InnoDB 存储引擎，涵盖了数据库的事务原理、调度、物理存储、锁等知识。</p><p>另外，其实 MySQL 领域还有很多书籍偏重各有不同，这里不一一推荐了。</p><h2 id="1、《MySQL-是怎样运行的》"><a href="#1、《MySQL-是怎样运行的》" class="headerlink" title="1、《MySQL 是怎样运行的》"></a>1、《MySQL 是怎样运行的》</h2><p>这本书于 2020 年出版，是一本比较新的书籍，整个书籍也是围绕其标题展开《MySQL 是怎样运行的：从根儿上理解 MySQL》。这本书最大的特点是，全书有非常清晰的脉络，可以说是由 “入门到精通”，书中放弃了一定的完整性（这个可以去看 MySQL 文档），而是非常接地气的从零开始，用了很多形象的比喻介绍 MySQL 数据库的各个概念。</p><p>同时，该书籍在每个章节对相关的概念也都进入了非常深入的讨论，例如，关于索引的介绍，从什么事索引、索引的物理结构开始介绍，然后，开始介绍 MySQL 的索引在查询、排序等场景的使用，最后，再介绍一些常见的索引优化技巧，包括普通索引、前缀索引、覆盖索引等。</p><p>总得来说，这本书是最近几年，面向于初学者非常不错的一本书。</p><h2 id="2、《高性能-MySQL》"><a href="#2、《高性能-MySQL》" class="headerlink" title="2、《高性能 MySQL》"></a>2、《高性能 MySQL》</h2><p>《高性能 MySQL》则从 “优化” 为入口，将 MySQL 相关的知识点聚合在一起，包括了查询性能优化（SQL 优化）、高性能索引、库表结构（Schema）优化等，也包括了服务器配置（硬件和软件）优化、架构优化（包括了复制、只读节点、分片）等，还介绍了部分云服务商的 MySQL 等内容，是一本非常适合进阶阅读的书籍。</p><p>该书籍的作者、译者，也都是一直活跃在数据库领域第一线的数据库开发者，对于 MySQL 实践有着非常丰富经验。这也保障概书籍整体质量不错，不仅可以作为系统的阅读使用，也可以作为一个参考手册，可以根据自己工作需要，不定期的翻阅其中的部分章节。</p><h2 id="3、《MySQL-技术内幕-InnoDB-存储引擎》"><a href="#3、《MySQL-技术内幕-InnoDB-存储引擎》" class="headerlink" title="3、《MySQL 技术内幕 InnoDB 存储引擎》"></a>3、《MySQL 技术内幕 InnoDB 存储引擎》</h2><p>这本书则以 InnoDB 为切入点，非常深入的介绍了 InnoDB 或者说数据库的原理。InnoDB 可以说是 MySQL 最为核心的组件，其原理不仅仅适用于 MySQL，也几乎适用于大多数关系型数据库系统。</p><p>具体的，概书籍覆盖的内容包括了 MySQL&#x2F;InnoDB 物理存储结构、索引、锁、事务等等。本书底层原理为出发点，帮助开发者理解 MySQL 行为、特点。</p><p>本书非常适合，对 MySQL 已经有一定程度了解，又希望更加深入了解其底层实现原理的人，或者是工作中需要对 MySQL 源码层进行修改或者定制的数据库内核开发者。</p><h2 id="4、用好-MySQL-官方文档"><a href="#4、用好-MySQL-官方文档" class="headerlink" title="4、用好 MySQL 官方文档"></a>4、用好 MySQL 官方文档</h2><p>MySQL 官方文档可以说是最为权威、更新最为及时、质量也应该是最高的 MySQL 学习资料了。在早期，市面上还没有那么书籍的时候，我个人也是通过精读 MySQL 官方文档，以此为深入学习 MySQL、甚至是深入学习数据库原理的知识库。</p><p>但是，官方文档为了保证完整性、准确性，会导致其看起来非常冗长、繁琐，有时候则感觉是在隔靴挠痒，偏向于介绍实现方式或原理以及 MySQL 提供的功能，而不会介绍读者最需要的最佳实践。例如，官方文档会详细介绍每个字段类型和参数详情，但是不会告诉你，哪些字段类型应该多用，哪些字段类型应该少用。</p><p><strong>了解了官方文档的这些特性之后，官方文档阅读的几个要点总结如下：</strong></p><ul><li>在阅读 MySQL 官方文档之前，需要先花些时间了解文档的整体架构，方便后续阅读查阅；</li><li>在需要了解某个具体 MySQL 知识点时，建议可以精读 MySQL 文档；</li><li>如果希望系统的了解某个 MySQL 特效的时候，可以完整的阅读；</li><li>MySQL 文档 MySQL 官方文档最新的都是英文的，需要有一定的英文阅读能力。</li></ul><p>总得来说，多阅读官方文档，虽然刚开始会觉得有些晦涩，坚持下来，你会发现收获巨大。</p><p>另外，阅读官方文档也要注意：也正是因为官方文档注重保障完整性、准确性，所以必定会繁琐、冗长，而不怎么介绍最佳实践经验，甚至一些主流的应用等，例如官方文档也只会将内容限定在 MySQL 本身，而不会包括硬件、软件或者云环境的相关的内容。</p><h2 id="5、视频-x2F-音频资源"><a href="#5、视频-x2F-音频资源" class="headerlink" title="5、视频 &#x2F; 音频资源"></a>5、视频 &#x2F; 音频资源</h2><p>现在也越来越多的人通过视频的方式去在线的学习各类知识，B 站上也有一些面相 MySQL 初学者的视频资源，质量我不太好评价，不过作为文字、书籍的补充学习，看一些视频学习还是非常不错的。大家可以去 B 站搜索一下 “MySQL 初学者” 就有很多的相关视频了，质量良莠不齐，需要大家自己甄别适合自己的。这里仅推荐一下由极客时间推出的《MySQL 实战 45 讲》。</p><p><strong>《MySQL 实战 45 讲》</strong></p><p><img src="/mysql/learn-mysql-019/20230324-020bd002-ff53-47f4-a901-49f7db40ac91.png" loading="lazy"></p><p>该系列价格也非常便宜，可以说是买不了吃亏、买不了上当，反倒是容易买到自己不能全部看完 &#x2F; 听完的懊恼：《MySQL 实战 45 讲》。</p><h2 id="1、使用-Google-x2F-Baidu-或者-ChatGPT"><a href="#1、使用-Google-x2F-Baidu-或者-ChatGPT" class="headerlink" title="1、使用 Google&#x2F;Baidu 或者 ChatGPT"></a>1、使用 Google&#x2F;Baidu 或者 ChatGPT</h2><p>通常，对于某个非常具体的知识点或者行业 &#x2F; 场景最佳实践，在文档中都不会覆盖，但是，因为 MySQL 的用户量极大，在互联网上也有非常多的分享和讨论，从初阶到高阶，面相各个级别的内容都有，可以说是一个大宝库，用好了也是可以事半功倍的。</p><h2 id="2、多总结、多分享、多交流"><a href="#2、多总结、多分享、多交流" class="headerlink" title="2、多总结、多分享、多交流"></a>2、多总结、多分享、多交流</h2><p>学习本身通常都是无趣的，如果学习的知识不能够很快的在实际工作中使用，也很容易忘记。另一个非常好的学习方法，不仅仅限于学习 MySQL，就是分享很总结。一方面，可以让你系统的把一个知识点了解的比较完整和透彻，也可以帮你更好的记录，大大加深理解与记忆。</p><h2 id="3、学以致用"><a href="#3、学以致用" class="headerlink" title="3、学以致用"></a>3、学以致用</h2><p>也许你学习 MySQL 的原因可能只是因为面试、解决一个工作中的问题、增长知识或者只是兴趣，无论是哪个原因促使你学习，动手练习并在工作中使用这些知识，都是非常有效的。如果，你对 MySQL 或者数据库很有兴趣，那么则建议在当前的公司，找一个与数据库更近的岗位工作，这样自然可以事半功倍。</p><h2 id="4、MySQL-源代码"><a href="#4、MySQL-源代码" class="headerlink" title="4、MySQL 源代码"></a>4、MySQL 源代码</h2><p>MySQL 是一个开源数据库，另一个独天得厚的资源是 MySQL 源代码。不过，MySQL 发展的时间已经非常长了，其代码复杂度也比较高，可以考虑从一两个小的模块、小的功能点着手，去学习、验证。</p><h2 id="5、学术论文"><a href="#5、学术论文" class="headerlink" title="5、学术论文"></a>5、学术论文</h2><p>当如果需要了解某个具体模块的来龙去脉以及设计思想的时候，有时候去查找一些经典的数据库领域论文可以很好的帮助你解决相关的疑问。有一套大部头《Readings in Database Systems》可以作为参考或者开始，不过内容较多，需要花费大量时间，总得来说不太适合初学者。</p><p>对于不同基础的人，学习的重点和方法是各有不同的，所以本文会列举主要的 MySQL 数据库的学习资源和方法，读者需要结合自己的实际情况选择合适的方法。如果你有好的经验分享，可以在留言评论谈谈你的经验。</p><p>orczhou 是《高性能 MySQL》的书籍的译者，同时也是来自 NineData（<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYi5wcm8vZGIvd3d3Lm5pbmVkYXRhLmNsb3Vk">www.ninedata.cloud<i class="fa fa-external-link-alt"></i></span>）的工程师。NineData 向企业、开发者提供高效、安全的数据库 SQL 开发、数据库备份、数据复制 &#x2F; 迁移 &#x2F; 集成、数据对比等功能，是一个 SaaS 服务开箱即用，可以快速提升企业 SQL 开发效率，保障企业数据安全。</p>]]></content>
    
    
    <summary type="html">如何学习 MySQL</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-推荐一款好用的数据一致性校验工具</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-018/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-018/</id>
    <published>2023-03-25T07:38:45.000Z</published>
    <updated>2023-04-06T03:48:08.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如何有效保障复制数据的一致性变得至关重要。</p></blockquote><p>在数据的服务生命周期过程中，经常会因为数据迁移、主从复制、数据集成等原因产生数据流动及复制。在数据复制过程中，由于人为误操作、软件 bug 或硬件故障等原因，无法完全规避复制数据的准确性。如何有效保障复制数据的一致性变得至关重要。</p><p>当前市面上专门用于解决 “数据一致性校验” 的工具比较匮乏。很多企业依然在使用：人工抽检的原始解决方案，数据一致性导致的业务故障频发。</p><p>举一个客户遇到 CASE，客户是一个电商 SAAS 服务提供商。如同其他 SAAS 服务，出于成本优化及大租户稳定隔离的业务诉求，经常会涉及用户数据的跨机搬迁。当前，客户并没有对应的数据一致性校验工具，所以，每次迁移完成，都是人工抽核心表进行数据量的检测。正应了 “常在河边走, 哪有不湿鞋” 的俗语，有一次迁移一个大商家数据的时候，在没有完整数据一致性校验的情况下，直接切换商家业务，最终出现因迁移数据【订单】不一致，导致的商家业务故障，给大商家造成比较大的业务影响及品牌影响。<br><img src="/mysql/learn-mysql-018/20230302-dda55851-991c-4580-be1a-59aabae4be4a.png" loading="lazy"></p><p>数据一致性校验的重要性</p><p>同行们血淋淋的经验告诉我们，拥有一个好的数据一致性校验工具是必不可少的【关键时刻能救命～】。那么究竟我们需要怎么样的工具呢。小编认为一款校验工具至少应该具备如下六个特质。<br><img src="/mysql/learn-mysql-018/20230302-bc6ddaed-c773-4aaf-861c-2fc1e11b09e8.png" loading="lazy"></p><p>数据一致性校验工具是必不可少的能力</p><h3 id="1-能做结构一致性校验"><a href="#1-能做结构一致性校验" class="headerlink" title="1. 能做结构一致性校验"></a>1. 能做结构一致性校验</h3><p>利用表存储数据，几乎成为大部分数据存储的通用标准。所以表结构能否正确迁移直接影响迁移数据的一致性。同时，数据库提供了诸多非表对象，包括视图、存储过程、函数、触发器等。用户一般基于这些对象实现轻量的业务逻辑，所以非表对象的能否成功迁移也会直接影响业务的迁移。由此，小编认为，具备结构一致性的快速校验是校验工具的基础能力。</p><h3 id="2-完善的数据一致性校验"><a href="#2-完善的数据一致性校验" class="headerlink" title="2. 完善的数据一致性校验"></a>2. 完善的数据一致性校验</h3><p>除了结构，数据无疑是另一关键的校验内容。数据存储支持丰富的数据类型，差异化的数据类型默认值、数据格式、字符集以及时区等。因此，能否支持完善的数据类型，屏蔽源及目标数据源在数据范围、数据格式、字符集及时区上的差异，也成为数据校验工具的核心能力。</p><h3 id="3-快速定义不一致内容"><a href="#3-快速定义不一致内容" class="headerlink" title="3. 快速定义不一致内容"></a>3. 快速定义不一致内容</h3><p>数据校验的目的是为了验证数据一致性，并针对不一致数据进行快速补救。所以，能够定位并提供具体不一致的内容也是数据校验工具的重要特质。</p><h3 id="4-快速订正数据的能力"><a href="#4-快速订正数据的能力" class="headerlink" title="4. 快速订正数据的能力"></a>4. 快速订正数据的能力</h3><p>当数据校验定位到不一致内容后，是否能够提供数据订正脚本帮助用户快速修复不一致数据也是校验工具必不可少的基础能力。</p><h3 id="5-校验速度要快，“天下武功唯快不破”"><a href="#5-校验速度要快，“天下武功唯快不破”" class="headerlink" title="5. 校验速度要快，“天下武功唯快不破”"></a>5. 校验速度要快，“天下武功唯快不破”</h3><p>小编认为校验速度够快也是核心要求。尤其在数据迁移、数据集成场景，在这种场景下，数据校验会影响业务停机时间，或者下游数据生产基线【例如，报表生产时间】，对校验时间要求较苛刻。</p><h3 id="6-对数据库的性能影响要可控"><a href="#6-对数据库的性能影响要可控" class="headerlink" title="6. 对数据库的性能影响要可控"></a>6. 对数据库的性能影响要可控</h3><p>校验工具一般都会高并发读取数据库的数据，此时，数据库同时承担着线上的业务应用。如何有效平衡数据校验速度以及数据库稳定性是校验工具应该解决的重要命题。</p><ol><li>NineData</li></ol><hr><p>官网地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubmluZWRhdGEuY2xvdWQv">https://www.ninedata.cloud/<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYi5wcm8vZGIvTmluZURhdGE=">NineData<i class="fa fa-external-link-alt"></i></span> 是玖章算术旗下的多云数据管理平台，它是一款即开即用的数据管理 SAAS 服务。当前 NineData 已经支持数十种常见同异构数据源（MySQL、SQLServer、CK 等）之间的结构对比、数据对比及数据订正能力。<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYi5wcm8vZGIvTmluZURhdGE=">NineData<i class="fa fa-external-link-alt"></i></span> 结构及数据对比作为独立服务，可以灵活支持 IDC、云主机自建及云托管数据源的数据一致性校验及快速修复。从使用体验、产品能力、稳定性及性能等维度综合来看，<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYi5wcm8vZGIvTmluZURhdGE=">NineData<i class="fa fa-external-link-alt"></i></span> 是一款综合实例比较强、比较难得的校验工具。</p><ol start="2"><li>Percona-toolkit</li></ol><hr><p>percona-toolkit 是由数据库厂商 percona 提供的工具集，其中: pt-table-checksum、 pt-table-sync 提供了 MySQL 主从复制一致性校验及修复的能力。Pt-table-checksum 主要通过在 MySQL 主中运行 checksum query，然后利用 MySQL 主从复制，query 流转到 slave 中，进行 check 对比。由于，需要借助 MySQL 主从复制的能力，percona-toolkit 只能应用主从复制场景。其优势在于，当前工具使用比较广泛，成熟度比较高。</p><ol start="3"><li>云厂商迁移校验工具</li></ol><hr><p>配合数据迁移工具，部分云厂商会提供对应的一致性校验能力。当前云厂商提供的校验能力，一般只支持数据校验，不支持结构校验，且数据订正能力比较弱。由于厂商的校验工具是跟迁移工具配合使用，所以，对于不使用迁移工具的数据源，当前不能提供数据校验能力。同时，其对云数据库的迁移支持较好，但是对于云主机上自建数据库以及 IDC 自建数据库支持不好或不支持。</p><p><img src="/mysql/learn-mysql-018/20230302-da66e212-8d44-479e-9c82-7419dc67d3fa.png" loading="lazy"></p><p>常见数据一致性方案推荐（NineData）</p><p>正如前面所述的推荐指数来看，NineData 提供的结构对比、数据对比功能确实是综合实力比较强，也比较推荐的一款产品。除了基础的全量对比外，NineData 还提供了快速对比、周期性对比及不一致复检等多种对比形态。</p><p>快速对比，相较于全量对比，快速对比主要用以校验窗口期比较短的情况。快速对比会对数据量、数据分布进行校验，同时会随机抽样一定的比例进行校验。<br>周期性对比，自定义对比频率及对比方式，NineData 会自动周期性调度对比任务进行结构及数据对比。小编理解这个功能应该用于长期数据复制场景的数据对比，例如主从复制、数据容灾、数据多活或数据仓库实时集成等场景。<br>不一致复检，即针对上一次对比结果中不一致数据进行重新复检。这个功能主要应用于数据订正、主从复制【主从延迟】场景下，进行快速的复检。<br>接下来，带大家感受下这个产品的使用体验。</p><ol><li>配置对比任务</li></ol><hr><p>整个任务配置过程很简单，主要分为三个步骤：</p><p>选择数据源，即配置对比的源实例及目标实例；<br>选择对比对象，即配置需要对比的对象，对比对象可以选择库、表｜非表、列；<br>配置映射关系及过滤条件，即配置对比表的映射关系；或者通过配置 SQL 过滤条件，可以只对关键数据进行对比。</p><p><img src="/mysql/learn-mysql-018/20230302-93fbb665-43e9-4f81-a7d7-b3b4bfae93a0.png" loading="lazy"></p><p>步骤一：配置对比数据源</p><p><img src="/mysql/learn-mysql-018/20230302-b556d758-6dd3-4640-aff7-9c4b9a9aef3a.png" loading="lazy"></p><p>步骤二：选择对比对象</p><p><img src="/mysql/learn-mysql-018/20230302-cbc57615-24fb-4e1f-a212-2bcc3440d40d.png" loading="lazy"></p><p>步骤三：映射关系配置</p><ol start="2"><li>对比结果</li></ol><hr><p>NineData 会提供完善的对比结果，其会定位不一致内容。针对不一致内容，提供快速订正脚本。</p><p><img src="/mysql/learn-mysql-018/20230302-e5f6e3c2-ae86-43bd-8be7-8caf5f9c6f57.png" loading="lazy"></p><p>结构对比，对比总览</p><p><img src="/mysql/learn-mysql-018/20230302-91ab1efe-54b7-4cc1-9f8e-0d03217fcbe7.png" loading="lazy"></p><p>结构对比，展示不一致内容</p><p><img src="/mysql/learn-mysql-018/20230302-6595a472-13c7-449d-ae02-85244fe49e4e.png" loading="lazy"></p><p>数据对比，对比结果</p><p><img src="/mysql/learn-mysql-018/20230302-7cde23e1-0c35-4d7a-9e06-f2d2b7e08447.png" loading="lazy"></p><p>数据对比，不一致详情</p><p>数据作为企业的核心资产，数据的准确性关于业务可靠性及企业品牌口碑。为此，还是推荐大家在线上主从环境、数据迁移、数据复制等场景中，配套使用可靠的数据校验工具。平台工具 <span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYi5wcm8vZGIvTmluZURhdGE=">NineData<i class="fa fa-external-link-alt"></i></span> 以其完善的校验能力、产品体验、校验速度、稳定性及数据源环境的广泛适配性成为了市面上比较出彩的校验工具，推荐大家使用。</p>]]></content>
    
    
    <summary type="html">推荐一款好用的数据一致性校验工具</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>shell学习笔记-变量替换</title>
    <link href="https://theme-next.js.org/shell/learn-shell-001/"/>
    <id>https://theme-next.js.org/shell/learn-shell-001/</id>
    <published>2022-05-07T15:01:26.000Z</published>
    <updated>2023-03-22T14:57:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h2><table><thead><tr><th>语法</th><th>说明</th><th>示例(variable_1&#x3D;&quot;I love you,Do you love me&quot;)</th></tr></thead><tbody><tr><td>${变量#匹配规则}</td><td>从头开始匹配，最短删除</td><td>var1&#x3D;${variable_1#*ov}</td></tr><tr><td>${变量##匹配规则}</td><td>从头开始匹配，最长删除</td><td>var2&#x3D;${variable_1##*ov}</td></tr><tr><td>${变量%匹配规则}</td><td>从尾开始匹配，最短删除</td><td>var3&#x3D;${variable_1%ov*}</td></tr><tr><td>${变量%%匹配规则}</td><td>从尾部开始匹配，最长删除</td><td>var4&#x3D;${variable_1%%ov*}</td></tr><tr><td>${变量&#x2F;旧字符串&#x2F;新字符串}</td><td>替换变量内的就字符串为新字符串，只替换第一个</td><td>var5&#x3D;${PATH&#x2F;bin&#x2F;BIN}</td></tr><tr><td>${变量&#x2F;&#x2F;旧字符串&#x2F;新字符串}</td><td>替换变量内的旧字符串为新字符串，全部替换</td><td>var6&#x3D;${PATH&#x2F;&#x2F;bin&#x2F;BIN}</td></tr></tbody></table><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><ul><li><p>计算字符串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len=$&#123;#var&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取字符索引位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr index &quot;$var&quot; substr</span><br></pre></td></tr></table></figure></li><li><p>获取子串长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr match &quot;$var&quot; substr</span><br></pre></td></tr></table></figure></li><li><p>截取字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="variable">$&#123;var:position&#125;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;var:position:length&#125;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">: -position 之间有空格</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;string: -position&#125; or <span class="variable">$&#123;string:(position)&#125;</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">变量替换和字符串处理</summary>
    
    
    
    <category term="shell" scheme="https://theme-next.js.org/categories/shell/"/>
    
    
    <category term="shell" scheme="https://theme-next.js.org/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-页和记录</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-017/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-017/</id>
    <published>2022-04-13T15:53:45.000Z</published>
    <updated>2023-04-01T14:58:58.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页的结构"><a href="#页的结构" class="headerlink" title="页的结构"></a>页的结构</h2><p><img src="/mysql/learn-mysql-017/page_structure.png" loading="lazy"></p><ol><li><p>file header</p><table><thead><tr><th>名称</th><th>大小</th><th>备注</th></tr></thead><tbody><tr><td>FIL_PAGE_SPACE_OR_CHKSUM</td><td>4</td><td></td></tr><tr><td>FIL_PAGE_OFFSET</td><td>4</td><td></td></tr><tr><td>FIL_PAGE_PREV</td><td>4</td><td>其实就是page_number(前一个)</td></tr><tr><td>FIL_PAGE_NEXT</td><td>4</td><td>其实就是page_number(后一个)</td></tr><tr><td>FIL_PAGE_LSN</td><td>8</td><td></td></tr><tr><td>FIL_PAGE_TYPE</td><td>2</td><td></td></tr><tr><td>FIL_PAGE_FILE_FLUSH_LSN</td><td>8</td><td></td></tr><tr><td>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</td><td>4</td><td></td></tr></tbody></table><blockquote><p>在一个页中不仅仅只有记录，还有file header，page header，file trailer等</p></blockquote></li></ol><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><ol><li><p>row_format</p><ul><li><p>REDUDENT：兼容老版本的innodb，mysql4.1版本之前</p></li><li><p>COMPACT：mysql5.6版本的默认格式</p></li><li><p>COMPRESSED：支持压缩</p></li><li><p>DYNAMIC：大对象记录优化，mysql5.7版本默认格式</p></li></ul></li><li><p>compact结构</p><p><img src="/mysql/learn-mysql-017/row_compact.png" loading="lazy"></p><ul><li><p>variable string length list：变长字段列表，表示有多少个变长字段，且序号逆序显示</p></li><li><p>null flag：是否有null值</p></li><li><p>rowid：B+树索引键值</p></li><li><p>trx id：事务ID，6个字节</p></li><li><p>roll pointer：回滚指针，7个字节</p></li></ul></li><li><p>compact示例</p><ul><li><p>创建mytest表，格式为compact，且没有显示定义主键和非空唯一健，故使用系统定义的ROWID。并插入3条记录</p><p><img src="/mysql/learn-mysql-017/compact_text.png" loading="lazy"></p></li><li><p>将mytest表结构进行dump。图中红色部分对应第一条记录，黄色部分对应第二条记录，深蓝色部分对应第三条记录</p><p><img src="/mysql/learn-mysql-017/mytest_dump.png" loading="lazy"></p></li><li><p>将红色部分对应的第一条记录进行解析</p><p><img src="/mysql/learn-mysql-017/mytest_compact_first_row.png" loading="lazy"></p><ol><li><p>variable string length list</p><p>03 02 01 ，表示有三个变长字段(varchar，varbinary，text等)，且逆序存放(为了提高CPU的cache的命中率)</p></li><li><p>null flag</p><p>00，表示记录中不存在null</p></li><li><p>record header</p><p>5个字节，比较底层(比如看该记录有没有被删除)</p></li><li><p>rowID</p><p>主键ID, 00 00 00 2b 68 00，从这个值可以看出，不是每张表从1开始递增的，是全局的ROWID</p></li><li><p>TransactionID</p><p>事务ID</p></li><li><p>roll pointer</p><p>回滚指针</p></li></ol></li><li><p>char和varchar的区别</p><blockquote><p>结果：</p><p>在多字符集(UTF8mb4)下：</p><ol><li><p>char(N)中存储的数据长度为N-4N，当存储数据长度为M，未达到N时，则填充空格，且空格的长度取最小的长度N-M，而不是4N-M</p></li><li><p>varchar(N)则不填充空格</p></li></ol><p>注意：char数据本身是定长数据，但是中多字节字符集下，表现行为和varchar类似，失去了原来的优势，当数据更新变长后可能无法原地更新</p></blockquote></li><li><p>原地更新(in place update)</p><p><img src="/mysql/learn-mysql-017/in_place_update.png" loading="lazy"></p><ul><li><p>原地更新不会占用新的物理空间</p></li><li><p>非原地更新需要删除(物理删除)，原来的空间数据，然后将更新后的数据插入到页的后面</p></li><li><p>删除的数据空间，会插入到free_list链表到头部</p></li><li><p>原地更新不会触发分裂</p></li></ul><blockquote><p>free_list是将页中被删除的空间串联在一起(组成一个链表)，当有数据被插入到页内时，先看下free_list中第一个空间的大小，如果空间合适，就将该记录插入到第一个空间中去，如果不合适，直接插入到页的尾部剩余空间。(不去查看free_list的第二个空间)。当页的数据被插满了，不会马上进行分页，而是进行reorganize操作，即将页内的数据在内存中进行整理，然后覆盖原来的页(不影响性能)，所以innodb不需要碎片整理。</p></blockquote></li><li><p>Reorganize</p><p><img src="/mysql/learn-mysql-017/Reorganize.png" loading="lazy"></p></li></ul></li><li><p>dynamic</p><p>dynamic相比compact，优化了大对象记录的存储</p><p>假设有一条记录有A，B，C，D 四列，其中D列的是text类型，且含有2W个字节的长度。</p><ul><li><p>compact</p><p>compact会存储text中的前768个字节的数据，剩余的数据通过20个字节的指针指向溢出页</p><p><img src="/mysql/learn-mysql-017/compact_data_type_for_text.png" loading="lazy"></p><blockquote><p>相对compact，dynamic在一个页中存储的记录数更多(因为有768字节的前缀，一条记录的字节数假设时800字节，那么16k的页只能存放20条数据，而之前我们测算可以存放80条记录)。这样一来，B+树的高度可能会变高，读取IO次数可能会变多</p><p>一个页能存放的记录越多，则性能越优</p></blockquote></li></ul></li></ol>]]></content>
    
    
    <summary type="html">主要介绍页的结构和记录</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-索引组织表</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-016/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-016/</id>
    <published>2022-04-12T16:05:01.000Z</published>
    <updated>2023-03-08T07:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引组织表"><a href="#索引组织表" class="headerlink" title="索引组织表"></a>索引组织表</h2><blockquote><p>在innodb存储引擎中，表都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表(index organized table)，或者叫聚集索引</p></blockquote><ol><li><p>每张表都必须有一个主键</p></li><li><p>根据主键的值构造一个B+树</p></li><li><p>这颗B+树的叶子节点(leaf page)存放所有记录row</p></li><li><p>非叶子节点(non-leaf page)存放的主键和指针(若干个主键和指针组成一个非页节点)</p><p>这里的指针其实就是pageNumber(这里不需要spaceID，因为spaceID对应的是ibd文件，现在就是在ibd文件查找数据)</p></li></ol><ul><li><p>主键</p><p>如果创建表没有显示指定主键，则innodb会按照如下方式选择或创建主键</p><ul><li><p>判断表中是否存在非空的唯一索引，如果有，该列即为主键</p><p>如果存在多个非空唯一索引，以创建表时第一个非空索引为准，而不是columns定义的顺序</p></li><li><p>如果上述条件都不符合，则innodb自动创建一个6字节大小的主键</p><p>系统自定义一个主键(6个字节，int类型，全局)，系统定义的主键ID不是在表内进行单独递增的，而是全局递增，该rowId是定义在ibdata1.ibd中的sys_rowid中，全局自增</p><p>6个字节表示的数据量为2的48次方。</p></li></ul></li><li><p>索引组织表与堆表</p><p><img src="/mysql/learn-mysql-016/heap_table.png" loading="lazy"></p><blockquote><p>堆表将索引和数据分开，索引中叶子节点存放的是数据的位置，而不是数据本身</p></blockquote><p><img src="/mysql/learn-mysql-016/index_organ_table.png" loading="lazy"></p><blockquote><p>索引组织表将索引和数据放在了一起，索引的叶子节点(leaf page)存放了所有完整的记录</p><p>索引即数据，数据即索引</p></blockquote><p>注意：</p><ol><li><p>非叶子节点(non-leaf page)中不会存放所有数据的主键，而是从叶子节点中选出一个数据的主键和该页的pageNumber填入到非叶子节点中</p></li><li><p>从逻辑上看，是一颗B+树，但是从物理上看都是每个页(非叶子节点和叶子节点)通过指针串在一起，使得逻辑有序</p></li></ol><p><img src="/mysql/learn-mysql-016/two_level_index.png" loading="lazy"></p><blockquote><p>二级索引中的叶子节点不存放数据本身，而是存放主键</p></blockquote><ul><li>查询数据对比</li></ul><p><img src="/mysql/learn-mysql-016/query_data_compare.png" loading="lazy"></p></li><li><p>page的空间申请</p><ol><li><p>叶子节点(leaf page)由leaf page segment进行申请空间</p></li><li><p>非叶子节点(non-leaf page)由non-leaf page segment进行申请空间</p></li></ol><p>所以索引由两个段组成</p><ol><li><p>leaf page segment</p></li><li><p>non-leaf page segment</p></li></ol><p>段(segment)是由区(extent)组成，申请空间就按照区(extent)进行申请，一般情况下一次申请4个区</p></li></ul>]]></content>
    
    
    <summary type="html">详细介绍索引组织表和堆表</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-压缩表和透明压缩表</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-015/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-015/</id>
    <published>2022-04-07T15:46:28.000Z</published>
    <updated>2023-03-23T14:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="压缩表"><a href="#压缩表" class="headerlink" title="压缩表"></a>压缩表</h2><ul><li><p>基于页的压缩</p></li><li><p>每个表的页大小可以不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- ger3_space的file_block_size=4096，不是innodb_page_size的大小</span><br><span class="line">-- 所在在创建 普通表 的时候，报错了</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create table test_ger (a int) tablespace=ger3_space;</span></span><br><span class="line">ERROR 1478 (HY000): InnoDB: Tablespace `ger3_space` uses block size 4096 and cannot contain a table with physical page size 8192</span><br><span class="line"></span><br><span class="line">-- 使用压缩表的方式</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create table comps_test1 (a int) row_format=compressed, key_block_size=4; -- 1K, 2K, 4K, 8K, 16K 只有这几个页大小可以选择</span> </span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"></span><br><span class="line">-- 在之前的ger3_space中创建压缩表</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create table comps_test2 (a int)tablespace=ger3_space row_format=compressed, key_block_size=4; -- 由于ger3_space是4K的，所以这里页大小也只能是4K</span></span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"></span><br><span class="line">-- 修改存在的表变成压缩表</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">alter table t1 row_format=compressed,key_block_size=4;</span> </span><br><span class="line">Query OK, 0 rows affected (0.17 sec)</span><br><span class="line">Records: 0 Duplicates: 0 Warnings: 0</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>虽然sql语法中写的是row_format&#x3D;compressed，但是压缩是针对页的，而不是记录，即读页的时候解压，写页的时候压缩。并不会中读取或写入单个记录(row)时就进行解压或压缩操作</p></blockquote></li><li><p>key_block_size的含义</p><ol><li><p>key_block_size 的可选项是1k，2k，4k，8k，16k(是页大小，不是比例)</p></li><li><p>不是将原来innodb_page_size页大小的数据压缩成key_block_size的页大小，因为有些数据可能不能压缩，或者压缩不到那么小</p></li><li><p>压缩是将原来的页数据通过压缩算法到一定大小，然后用key_block_size大小的页去存放</p><ul><li><p>比如原来的innodb_page_size大小是16k，现在的key_block_size设置为8k</p></li><li><p>某表的数据大小是24k，原先使用1个16k的页存放</p></li><li><p>压缩后，24k--&gt;18k</p></li><li><p>由于现在的key_block_size&#x3D;8k，所以需要3个8k的页存储压缩后的18k数据</p></li><li><p>多余的空间可以留给下次更新或者插入</p></li></ul><blockquote><ol><li><p>压缩比和设置的key_block_size没有关系，压缩比看数据本身和算法(zlib)，key_block_size仅仅是存放压缩数据的页大小</p></li><li><p>不解压也能插入数据，通过在剩余空间直接存放redo log，然后页空间存放满后，在解压，利用redo log更新完成后，再压缩存放，减少解压和压缩的次数</p></li></ol></blockquote></li><li><p>查看压缩比</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"> use employees;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create table employee_comps_1 like employees;</span> </span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">alter table employee_comps_1 row_format=compressed,key_block_size=4; Query OK, 0 rows affected (0.19 sec)</span></span><br><span class="line">Records: 0 Duplicates: 0 Warnings: 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show create table employee_comps_1\G</span> </span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Table: employee_comps_1</span><br><span class="line">Create Table: CREATE TABLE `employee_comps_1` (</span><br><span class="line">`emp_no` int(11) NOT NULL, </span><br><span class="line">`birth_date` date NOT NULL, </span><br><span class="line">`first_name` varchar(14) NOT NULL, </span><br><span class="line">`last_name` varchar(16) NOT NULL, </span><br><span class="line">`gender` enum(&#x27;M&#x27;,&#x27;F&#x27;) NOT NULL, </span><br><span class="line">`hire_date` date NOT NULL,</span><br><span class="line">PRIMARY KEY (`emp_no`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4 </span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">insert into employee_comps_1 select * from employees;</span> </span><br><span class="line">Query OK, 300024 rows affected (8.10 sec)</span><br><span class="line">Records: 300024 Duplicates: 0 Warnings: 0</span><br><span class="line"></span><br><span class="line">-- 查看压缩比</span><br><span class="line"><span class="meta prompt_"> mysql&gt; </span><span class="language-bash">use information_schema;</span></span><br><span class="line"> Reading table information for completion of table and column names </span><br><span class="line"> You can turn off this feature to get a quicker startup with -A</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> mysql&gt; </span><span class="language-bash">select * from INNODB_CMP;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> mysql&gt; </span><span class="language-bash">select 11451/12687; -- compress_ops_ok / compress_ops</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> shell&gt; </span><span class="language-bash">ll -h employee*.ibd <span class="comment"># 可以看出磁盘占用还是有明显缩小的</span></span> </span><br><span class="line"> -rw-r-----. 1 mysql mysql 14M Jan 4 13:41employee_comps_1.ibd </span><br><span class="line"> -rw-r-----. 1 mysql mysql 22M Dec 2 21:32 employees.ibd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">innodb_cmp_per_index_enabled 这个参数默认关闭，开启对性能有影响</span></span><br></pre></td></tr></table></figure></li><li><p>key_block_size&#x3D;16的含义</p><blockquote><p>假设innodb_page_size&#x3D;16k</p><p>设置key_block_size&#x3D;16是有意义的</p><p>key_block_size的设置不影响压缩本身(只和数据本身以及zlib算法有关)。只是确定压缩后数据存放的页大小，如果该字段是varchar，text等类型的数据，压缩的效果还是比较明显的</p><p>设置row_format&#x3D;comparessed就会压缩数据，是否压缩和设置key_block_size没有关系</p><p>所以，key_block_size&#x3D;16的设置是有意义的，因为数据还是进行了压缩，压缩后的数据存放在16k大小的页中</p></blockquote></li><li><p>压缩后的存储以及性能</p><p><img src="/mysql/learn-mysql-015/mysql_page_comparessed.png" loading="lazy"></p><p>从上图可以得到如下信息：</p><ul><li><p>innodb_page_size&#x3D;16k的数据设置key_block_size&#x3D;16是可以压缩的，且效果比较明显</p></li><li><p>并不是key_block_size设置的越小，压缩率就越高，上图8k和4k的压缩率几乎一样</p></li><li><p>在启用压缩后，16k和8k的插入性能要好于原来未压缩的插入性能，所以启用了压缩，性能不一定会变差</p><blockquote><p>在IO bound(IO密集型)的业务场景下，减少IO操作的次数对性能提升比较明显</p></blockquote></li><li><p>key_block_size设置的值通常为innodb_page_size的1&#x2F;2</p></li></ul></li></ol></li></ul><h2 id="透明表空间压缩"><a href="#透明表空间压缩" class="headerlink" title="透明表空间压缩"></a>透明表空间压缩</h2><blockquote><p>在mysql官方文档中，透明表空间压缩称为innobd page compression以区别原来的innodb table compression，但是其实他们都是基于页的压缩。</p></blockquote><ul><li><p>透明表空间压缩的创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 透明表空间压缩的创建</span><br><span class="line">-- 使用zlib压缩算法</span><br><span class="line">MySQL hadoop@localhost:db_test_compression&gt; create table tbl_compression_1(a int) compression=&#x27;zlib&#x27;;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">Time: 5.123s</span><br><span class="line"></span><br><span class="line">-- 使用lz4压缩算法</span><br><span class="line">MySQL hadoop@localhost:db_test_compression&gt; create table tbl_compression_2(a int) compression=&#x27;lz4&#x27;;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line">Time: 0.077s</span><br><span class="line"></span><br><span class="line">-- 修改压缩算法</span><br><span class="line">MySQL hadoop@localhost:db_test_compression&gt; alter table tbl_compression_2 compression=&#x27;zlib&#x27;;</span><br><span class="line">-- 官方文档中提及如果是已存在的表，需要执行optimize table操作</span><br><span class="line">MySQL hadoop@localhost:db_test_compression&gt; optimize table tbl_compression_2;</span><br></pre></td></tr></table></figure><blockquote><p>zlib的压缩比更高</p><p>lz4的速度更快</p><p>上面创建过程中，没有指定页大小，而是使用了文件系统(filesystem)层中的稀疏文件的特性，来达到压缩的目的。</p></blockquote></li><li><p>稀疏文件</p><p><img src="/mysql/learn-mysql-015/filesystem_sparse_files.png" loading="lazy"></p><p>如上图所示，可以简单的理解为，文件中数据连续为0的部分不占用磁盘空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个零时文件，且数据部分全是0的文件</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">dd</span> of=spare-file bs=1k seek=5120 count=0</span></span><br><span class="line">0+0 records in</span><br><span class="line">0+0 records out</span><br><span class="line">0 bytes transferred in 0.000007 secs (0 bytes/sec) # 没有数据写入</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示文件大小为5M</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ll -rth spare-file</span></span><br><span class="line">-rw-r--r--  1 yangyitong  staff   5.0M  4 12 23:44 spare-file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查文件占用多少空间</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">du</span> -B 1 spare-file</span></span><br><span class="line">0    spare-file</span><br></pre></td></tr></table></figure><p><img src="/mysql/learn-mysql-015/mysql_transparent_compressed.png" loading="lazy"></p><ul><li><p>压缩后，原来16k的数据压缩成4k</p></li><li><p>剩余的12k空间用特殊的字符填充</p></li><li><p>在写入文件系统时调用punching holes写入，实际只写入4k数据</p></li><li><p>被填充的12k的空间，可以提供给后续的插入，更新使用</p></li><li><p>从innodb的角度看还是16k的页大小，只是文件系统知道页只需要4k就能够存储(对innodb时透明的)</p></li><li><p>spaceID和pageNumber的读取方式没有发生变化(细节由文件系统屏蔽)</p></li><li><p>由于文件系统的块大小时4k，所以压缩后存储的空间也是4k对其的</p><blockquote><p>如果16k压缩成了10k，那么就需要3个4k去存储</p></blockquote></li></ul></li><li><p>系统以及文件系统的支持</p><ol><li><p>操作系统以及内核</p><ul><li><p>RHEL7 kernel &gt;&#x3D; 3.10.0-123 </p></li><li><p>Debian 7 kernel &gt;&#x3D; 3.2  </p></li><li><p>Ubuntu 12.04LTS kernel &gt;&#x3D; 3.2  </p></li><li><p>Ubuntu 14.0.4LTS kernel &gt;&#x3D; 3.13</p></li><li><p>Oracle和Suse可以参考官方文档</p></li></ul></li><li><p>文件系统</p><ul><li><p>支持Hole Punch</p></li><li><p>比如XFS，EXT4，NTFS等</p></li></ul></li></ol></li><li><p>关于warning</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> warnings; </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+---------------------------------------------------------------------------------------------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> Level <span class="operator">|</span> Code <span class="operator">|</span> Message <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+---------------------------------------------------------------------------------------------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> Warning <span class="operator">|</span> <span class="number">138</span> <span class="operator">|</span> InnoDB: Punch hole <span class="keyword">not</span> supported <span class="keyword">by</span> the file <span class="keyword">system</span> <span class="keyword">or</span> the tablespace page size <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">large</span> enough. Compression disabled <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------+---------------------------------------------------------------------------------------------------------------------------+ </span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ul><li><p>原因1是我的内核版本太低，不支持</p></li><li><p>原因2是因为general方式安装的mysql不支持透明压缩，需要自己编译</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习压缩表和透明压缩表</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-innodb表空间</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-014/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-014/</id>
    <published>2022-04-06T15:01:30.000Z</published>
    <updated>2023-03-23T14:41:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Innodb介绍"><a href="#Innodb介绍" class="headerlink" title="Innodb介绍"></a>Innodb介绍</h2><ol><li><p>innodb的历史</p><table><thead><tr><th>年份</th><th>事件</th><th>备注</th></tr></thead><tbody><tr><td>1995</td><td>由Heikki Tuuri 创建Innobase Oy公司，并开发InnoDB存储引擎</td><td>Innobase开始做的是数据库，希望卖掉该公司</td></tr><tr><td>1996</td><td>mysql1.0发布</td><td></td></tr><tr><td>2000</td><td>mysql3.23版本发布</td><td></td></tr><tr><td>2001</td><td>innodb存储引擎集成到mysql数据库</td><td>作为插件的方式集成</td></tr><tr><td>2006</td><td>Innobase被Oracle公司收购(InnoDB作为开源产品，性能和功能很强大)</td><td>InnoDB在被收购后的，MySQL中的InnoDB版本没有改变</td></tr><tr><td>2010</td><td>MySQL5.5版本InnoDB存储引擎称为默认存储引擎</td><td>MySQL被Sun收购，Sun被Oracle收购，使得MySQL和InnoDB重新在一起配合开发</td></tr><tr><td>至今</td><td>其他存储引擎已经不再得到Oracle官方的后续开发</td><td></td></tr></tbody></table></li><li><p>innodb的特点</p><ul><li><p>fully ACID(innodb默认的repeat read隔离级别就支持)</p></li><li><p>row-level locking(支持行锁)</p></li><li><p>multi-version concurrency control(MVCC)(支持多版本并发控制)</p></li><li><p>foregin key support(支持外健)</p></li><li><p>automatic deadlock detection(死锁自动检测)</p></li><li><p>high performance，high scalability， high availability(高性能，高扩展，高可用)</p></li></ul></li><li><p>innodb存储引擎文件</p><ul><li><p>概述</p><p>innodb的文件主要分为两个部分，一个是表空间文件，一个是重做日志文件</p><ul><li><p>表空间文件</p><ol><li><p>独立表空间文件</p></li><li><p>全局表空间文件</p></li><li><p>undo表空间文件(from mysql5.6)</p></li></ol></li><li><p>重做日志文件</p><ol><li><p>物理逻辑日志</p></li><li><p>没有oracle的归档重做日志</p></li></ol></li></ul></li><li><p>innodb表空间</p><ul><li><p>表空间的概念</p><ol><li><p>表空间是一个逻辑存储的概念</p></li><li><p>表空间可以有多个文件组成</p></li><li><p>支持裸设备(可以直接使用O_DIRECT方式绕过缓存，直接写入磁盘)</p></li></ol></li><li><p>表空间的分类</p><ol><li><p>系统表空间</p><blockquote><p>存储元数据信息</p><p>存储change buffer信息</p><p>存储undo信息</p><p>甚至一开始所有的表和索引的信息都是存储在系统表空间中，随后innodb对其做了改进，可以使用独立的表空间</p></blockquote></li><li><p>独立表空间</p><blockquote><p>innodb-file-per-table&#x3D;1(开启支持每个独立的表空间)</p><p>每张用户对应一个独立的ibd文件</p><p>分区表可以对应多个ibd文件</p></blockquote></li><li><p>undo表空间</p><blockquote><p>mysql5.6版本支持独立的undo表空间</p><p>innodb_undo_tablespaces</p></blockquote></li><li><p>临时表空间</p><blockquote><p>mysql5.7增加了临时表空间(ibtmp1)</p><p>innodb_temp_data_file_path</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MySQL的datadir目录</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">j mysql</span></span><br><span class="line">/opt/homebrew/var/mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ibdata1是系统表空间，默认所有信息存在这里</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ibtmp1是临时表空间</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ll ib*</span></span><br><span class="line">-rw-r-----  1 yangyitong  wheel   1.2K  4  4 02:01 ib_buffer_pool</span><br><span class="line">-rw-r-----  1 yangyitong  wheel    12M  4  6 23:29 ibdata1</span><br><span class="line">-rw-r-----  1 yangyitong  wheel    12M  4  6 23:29 ibtmp1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> db_test</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表abc的表结构定义文件，可以使用mysqlfrm --diagnostic查看表结构</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">idb就是abc表的innodb文件，ibd文件包含了索引和数据</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ll abc*</span></span><br><span class="line">-rw-r-----  1 yangyitong  wheel   8.4K  4  4 01:45 abc.frm</span><br><span class="line">-rw-r-----  1 yangyitong  wheel    48K  4  4 01:45 abc.ibd</span><br></pre></td></tr></table></figure><blockquote><p>同一个表空间(ibdata1)存储和独立表空间存储就性能上而言没有区别</p><p>当需要删除表(drop table)时，独立的表空间存储可以直接删除，而ibdata1存储也只能将该部分表空间标记为可用，所以从速度上看很难说那个更快，但是删除文件后，ibdata1占用的空间不会被释放</p><p>分区表会产生独立的ibd文件</p><p>独立的表空间，一个表对应一个ibd文件</p></blockquote></li><li><p>单个ibd文件直接拷贝到新的数据库中无法直接恢复</p><ol><li><p>原因一：元数据信息还是在ibdata1中</p></li><li><p>原因二：部分索引文件存在于channge buffer中，目前还是存放于ibdata1文件中</p></li></ol></li></ul></li></ul></li></ol><h2 id="general表空间"><a href="#general表空间" class="headerlink" title="general表空间"></a>general表空间</h2><ol><li><p>假如，新建一张表，并让该表的存储路径 不是默认的&#x2F;path&#x2F;to&#x2F;datadir&#x2F;dbname 。而是 指定存储的位置 应该如何处理?</p><ul><li><p>方法一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash"><span class="built_in">mkdir</span> /GeneralTest</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash"><span class="built_in">chown</span> mysql.mysql /GeneralTest</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create table test_ger1 (a int) data directory=<span class="string">&#x27;/GeneralTest&#x27;</span>;</span> </span><br><span class="line">Query OK, 0 rows affected (0.15 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash"><span class="built_in">cd</span> /GeneralTest shell&gt; tree</span></span><br><span class="line">.</span><br><span class="line">└── burn_test # dbname</span><br><span class="line">└── test_ger1.ibd # 表空间文件</span><br><span class="line">1 directory, 1 file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">datadir的burn_test目录下</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">ll test_ger1*</span></span><br><span class="line">-rw-r-----. 1 mysql mysql 8554 Jan 3 16:41 test_ger1.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 36 Jan 3 16:41 test_ger1.isl # 这是链接文件，链接到上面的ibd文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash"><span class="built_in">cat</span> test_ger1.isl <span class="comment"># 一个文本文件，内容就是idb文件的路径</span></span> </span><br><span class="line">/GeneralTest/burn_test/test_ger1.ibd</span><br></pre></td></tr></table></figure></li><li><p>方法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 使用`通用表空间`</span><br><span class="line">-- 1: 创建一个通用表空间</span><br><span class="line">-- </span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create tablespace ger_space add datafile <span class="string">&#x27;/GeneralTest/ger_space.ibd&#x27;</span> file_block_size=8192;</span> </span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">-- datafile 指定存储路径后，在datadir下会产生一个isl文件，该文件的内容为General space的ibd文件的路径 </span><br><span class="line">-- 如果datafile不指定路径，则ibd文件默认存储在datadir目录下，且不需要isl文件了</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">create tablespace ger2_space add datafile <span class="string">&#x27;ger2_space.ibd&#x27;</span> file_block_size=8192;</span> </span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; ll ger*</span><br><span class="line">-rw-r-----. 1 mysql mysql 32768 Jan 3 16:51 ger2_space.ibd # 未指定路径，存放于datadir目录 </span><br><span class="line">-rw-r-----. 1 mysql mysql 26 Jan 3 16:50 ger_space.isl # 指定了其他路径，存在isl链接文件 </span><br><span class="line">shell&gt; cat ger_space.isl</span><br><span class="line">/GeneralTest/ger_space.ibd # ibd文件真实存在的路径</span><br><span class="line"></span><br><span class="line">-- 2: 创建表</span><br><span class="line">mysql&gt; create table test_ger2 (a int) tablespace=ger_space; </span><br><span class="line">Query OK, 0 rows affected (0.11 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="undo表空间文件"><a href="#undo表空间文件" class="headerlink" title="undo表空间文件"></a>undo表空间文件</h2><ol><li><p>innodb_undo_tablespaces &#x3D; 3</p><p>创建三个undo表空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">ll undo*</span></span><br><span class="line">-rw-r-----. 1 mysql mysql 7340032 Jan 3 17:21 undo001 </span><br><span class="line">-rw-r-----. 1 mysql mysql 7340032 Jan 3 17:40 undo002 </span><br><span class="line">-rw-r-----. 1 mysql mysql 7340032 Jan 3 17:21 undo003</span><br></pre></td></tr></table></figure></li></ol><h2 id="重做日志文件"><a href="#重做日志文件" class="headerlink" title="重做日志文件"></a>重做日志文件</h2><ol><li><p>innodb_log_file_size</p><p>该文件设置的尽可能大</p><p>设置太小可能会导致脏页刷新时hang住</p></li></ol><h2 id="表空间大内部组织结构"><a href="#表空间大内部组织结构" class="headerlink" title="表空间大内部组织结构"></a>表空间大内部组织结构</h2><table><thead><tr><th>表空间</th></tr></thead><tbody><tr><td>内部有多个段对象(segment)组成</td></tr><tr><td>每个段(segment)由区(extent)组成</td></tr><tr><td>每个区(extent)由页(page)组成</td></tr><tr><td>每个页面里存数据(或者叫做记录row)</td></tr></tbody></table><p><img src="/mysql/learn-mysql-014/mysql_tablespace.png" loading="lazy"></p><ul><li><p>段对用户来说是透明的</p></li><li><p>段也是一个逻辑概念</p></li><li><p>目前为止在information_schema中无法找到段段概念</p></li><li><p>重点需要理解区(extent)和页(page)的概念</p></li></ul><ol><li><p>表空间-区</p><ul><li><p>区是最小的空间申请单位</p></li><li><p>区的大小固定为1M</p><ul><li>page_size&#x3D;16k，也就是1M * 1024 &#x2F; 16 &#x3D; 64页</li></ul></li><li><p>通常来说，一次申请4个区的大小(存在一次申请5个区的时候，但是绝大部分情况就是申请4个区)</p></li><li><p>单个区的1M空间内，物理上是连续的(一次申请的4个区的空间之间(1M和1M之间)不保证连续)</p></li></ul></li><li><p>表空间-页</p><ul><li><p>页的定义</p><ul><li><p>页是最小的IO操作单位</p><ol><li>data的最小单位不是页，而是页中的记录(row)</li></ol></li><li><p>普通用户表中mysql默认的每个页为16k</p><ol><li><p>从mysql5.6开始使用innodb_page_size可以控制页的大小</p></li><li><p>一旦数据库通过innodb_page_size创建完成，则后续无法进行修改</p></li><li><p>innodb_page_size是针对普通表的，压缩表不受其限制</p></li></ol></li></ul></li><li><p>如何定位到页</p><ul><li><p>每个表空间都对应一个spaceID，而表空间又对应一个ibd文件，那么一个idb文件也就对应一个spaceID</p><ol><li><p>因为表空间 &lt;--&gt;ibd文件，表空间&lt;--&gt;spaceID，所以idb文件&lt;--&gt;spaveID</p></li><li><p>ibdata1对应的spaceID为0</p></li><li><p>每创建一个表空间(ibd文件)，spaceID自增长(全局)</p></li></ol></li><li><p>pageNumber</p><ol><li><p>在一个表空间中，第几个16k的页(假设innodb_page_size&#x3D;16k)即为pageNumber</p><p><img src="/mysql/learn-mysql-014/mysql_tablespace_pagenumber.png" loading="lazy"></p><ul><li><p>每次读取page时，都是通过spaceID和pageNumber进行读取</p></li><li><p>可以简单理解为从表空间的开头读多少个pagenumber*pagesize的字节(偏移量)</p></li><li><p>想象成数组，数组的名字就是 SpaceID， 数组的下标就是PageNumber</p></li></ul><blockquote><ol><li><p>可以通过spaceID和pageNumber定位到某一页</p></li><li><p>在一个spaceID(ibd文件)中，pagenumber时唯一且自增的</p></li><li><p>这里的区(extent)的概念已经弱化。在这个例􏰃中，第一个区的PageNumber是(0<del>63)且这64个页在物理上是连续的;第二个区的PageNumber是(64</del>127)且这64个页在物理上也是连续的;但是(0<del>63)和(64</del>127)之间在物理上则不一定是连续的，因为区和区之间在物理上不一定是连续的。</p></li><li><p>删除表的时候，spaceID不会回收，spaceID是全局自增长的</p></li></ol></blockquote><p>独立表空间的table_id 和 SpaceID 一一对应</p><p>共享表空间是多个table_id对应一个spaceID</p></li></ol></li></ul></li></ul></li></ol>]]></content>
    
    
    <summary type="html">介绍innodb表空间相关的知识</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-磁盘和磁盘测试</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-013/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-013/</id>
    <published>2022-03-29T14:58:41.000Z</published>
    <updated>2023-03-08T07:25:41.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 安装 iostat</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">shell&gt; yum install sysstat</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debian 系: apt-get install sysstat</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用</span></span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">iostat -xm 3 <span class="comment"># x表示显示扩展统计信息，m表示以兆为单位显示，3表示每隔3秒显示</span></span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出如下:</span></span><br><span class="line">avg-cpu: %user %nice %system %iowait %steal %idle</span><br><span class="line">0.58</span><br><span class="line">0.00 0.33 0.00 0.00 99.08</span><br><span class="line">rrqm/s wrqm/s r/s w/s rMB/s wMB/s avgrq-sz avgqu-sz await r_await w_await svctm %util</span><br><span class="line">0.00 0.00 0.00 0.67 0.00 0.00 8.00 0.00 2.00 0.00 2.00 1.00 0.07 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00</span><br></pre></td></tr></table></figure><table><thead><tr><th>CPU属性</th><th>说明</th></tr></thead><tbody><tr><td>%user</td><td>cpu处在用户模式下的时间百分比</td></tr><tr><td>%nice</td><td>cpu处在待nice值的用户模式下的时间百分比</td></tr><tr><td>%sys</td><td>cpu处在系统模式下的时间百分比</td></tr><tr><td>%iowait</td><td>cpu等待IO完成时间的百分比</td></tr><tr><td>%steal</td><td>管理程序维护另一个虚拟处理器时，虚拟cpu的无意等待时间的百分比</td></tr><tr><td>%idle</td><td>闲置cpu的百分比</td></tr></tbody></table><blockquote><p>提示：</p><p>如果%iowait的值过高，表示磁盘存在IO瓶颈</p><p>如果%idle值高，表示cpu较空闲，如果%idle值高但系统响应慢时，有可能是cpu等待分配内存，此时应加大内存容量</p><p>如果%idle值持续较低，那么系统的cpu处理能力相对较低，表明系统中最需要解决的资源是cpu</p></blockquote><table><thead><tr><th>Device属性</th><th>说明</th></tr></thead><tbody><tr><td>rrqm&#x2F;s</td><td>每秒进行merge的读操作数目</td></tr><tr><td>wrqm&#x2F;s</td><td>每秒进行merge的写操作数目</td></tr><tr><td>r&#x2F;s</td><td>每秒完成的读IO设备次数</td></tr><tr><td>w&#x2F;s</td><td>每秒完成的写IO设备次数</td></tr><tr><td>rsec&#x2F;s</td><td>每秒读扇区数</td></tr><tr><td>wsec&#x2F;s</td><td>每秒写扇区数</td></tr><tr><td>rkB&#x2F;s</td><td>每秒读K字节数</td></tr><tr><td>wkB&#x2F;s</td><td>每秒写K字节数</td></tr><tr><td>avgrp-sz</td><td>平均每次设备IO操作的数据大小(扇区)</td></tr><tr><td>avgqu-sz</td><td>平均IO队列长度</td></tr><tr><td>await</td><td>平均每次设备IO操作的等待时间(毫秒)</td></tr><tr><td>svctm</td><td>平均每次设备IO操作的服务时间(毫秒)</td></tr><tr><td>%util</td><td>一秒中有百分之多少的时间用于IO操作，即被IO消耗的cpu百分比</td></tr></tbody></table><blockquote><p>提示：</p><p>如果%util接近100%，说明产生的IO请求太多，IO系统已经满负荷，该磁盘可能存在瓶颈如果svctm比较接近await，说明IO几乎没有等待时间如果await远大于svctm，说明IO队列太长，iO响应太慢，则需要进行必要优化如果avgqu-sz比较大，也表示有大量IO中等待</p></blockquote><ul><li><p>rrqm&#x2F;s 和 wrqm&#x2F;s<br>Merge 将若干个连续地址的IO请求进行合并。来提高IO的效率<br>◦ rrqm&#x2F;s 是每秒读(read)请求合并的次数<br>◦ wrqm&#x2F;s 是每秒写(write)请求合并的次数</p></li><li><p>r&#x2F;s和w&#x2F;s</p></li></ul><p>在合并之后(after merge) IO请求的次数 r&#x2F;s 合并之后每秒读IO的次数<br>w&#x2F;s 合并之后每秒写IO的次数<br>r&#x2F;s + w&#x2F;s &#x3D; IOPS</p><ul><li>rsec&#x2F;s(rKB&#x2F;s、rMB&#x2F;s)和 wsec&#x2F;s(wKB&#x2F;s、wMB&#x2F;s)</li></ul><p>◦ sec 是 Sector(扇区) ，为 512Byte<br>◦ KB 和 MB 是通过扇区的 512Byte 进行的换算</p><ul><li>avgrq-sz</li></ul><p>◦ 一块磁盘可能存储数据的同时还存储日志，所以请求的IO大小是不一样的<br>◦ 该参数就是平均的请求数，注意，该值需要 * 512Byte 才是最终的结果，因为该值是以扇区为单位的</p><ul><li>avgqu-sz</li></ul><p>◦ 请求的IO队列的平均长度(比较重要)<br>◦ HDD可能在4左右，SSD可以达到30左右</p><ul><li>await、r_await、w_await</li></ul><p>◦ IO请求平均等待的时间，单位是ms<br>◦ r_await 和 w_await 分别对应 读IO请求的等待 和 写IO请求的等待</p><ul><li><p>svctm<br>◦ 服务于IO请求的平均时间<br>◦ man文档中提示不要相信该值，以后会被移除</p></li><li><p>%util<br>◦ 磁盘是否空闲;不能简单的等同于IO的使用率;该值可以解释为磁盘是否繁忙 ◦ 如果该值100% 不能简单的等同于磁盘的负载满了，达到了瓶颈<br>◦ 需要综合 avgqu-sz 、 await 等其他指标进行综合判断磁盘是否达到瓶颈</p></li></ul><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><ol><li><p>磁盘的访问模式</p><ul><li><p>顺序访问</p><ul><li><p>顺序的访问磁盘上的块;</p></li><li><p>一般经过测试后，得到该值的单位是 MB&#x2F;s ，表示为磁盘 带宽 ，普通硬盘在 50~ 100 MB&#x2F;s</p></li></ul></li><li><p>随机访问</p><ul><li><p>随机的访问磁盘上的块  </p></li><li><p>也可以用MB&#x2F;s进行表示，但是通常使用 IOPS (每秒处理IO的能力)，普通硬盘在 100-200 IOPS</p></li></ul></li></ul><p><img src="/mysql/learn-mysql-013/disk_access_mode.png" loading="lazy"></p><blockquote><p>拷贝文件属于顺序访问，数据库中访问数据属于随机访问</p><p>数据库对数据的访问做了优化，把随机访问转成顺序访问</p></blockquote></li><li><p>磁盘的分类</p><ul><li><p>HDD</p><ul><li><p>盘片通过旋转，磁头进行定位，读取数据;</p></li><li><p>顺序性较好，随机性较差;</p></li><li><p>常见转速</p><ol><li><p>笔记本硬盘:5400转&#x2F;分钟;  </p></li><li><p>桌面硬盘:7200转&#x2F;分钟;  </p></li><li><p>服务器硬盘:10000转&#x2F;分钟、15000转&#x2F;分钟; </p></li><li><p>SATA:120 ~ 150 IOPS  </p></li><li><p>SAS :150 ~ 200 IOPS</p></li></ol></li></ul><blockquote><p>从理论上讲，15000转&#x2F;分钟，最高是 15000&#x2F;60 约等于250IOPS </p><p>由于机械盘片需要旋转，转速太高无法很好的散热</p><p>如果一个HDD对4K的块做随机访问是0.8MB&#x2F;s，可通过 0.8 *(1 &#x2F; 4)&#x3D; 200 或者 (0.8 * 1000) &#x2F; 4&#x3D;200 得到 IOPS ，但是这个值存在部分干扰因素，如cache等</p></blockquote></li><li><p>SSD</p><ul><li><p>纯电设备</p></li><li><p>由FLash Memory组成</p></li><li><p>没有读写磁头</p></li><li><p>MLC闪存颗粒对一般企业的业务够用。目前SLC闪存颗粒价格较贵</p></li><li><p>IOPS高</p><ol><li><p>50000+ IOPS  </p></li><li><p>读写速度非对称 以 INTEL SSD DC-S3500为例􏰁:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">◾ Random 4KB3 Reads: Up to 75,000 IOPS </span><br><span class="line">◾ Random 4KB Writes: Up to 11,500 IOPS </span><br><span class="line">◾ Random 8KB3 Reads: Up to 47,500 IOPS </span><br><span class="line">◾ Random 8KB Writes: Up to 5,500 IOPS</span><br></pre></td></tr></table></figure></li></ol></li><li><p>当写入数据时，要先擦除老数据，再写入新数据  </p></li><li><p>擦除数据需要擦除整个区域(128K or 256K)一起擦除(自动把部分有用的数据挪到别的区域)</p></li></ul><blockquote><p>对比发现4K性能要优于8K的性能，几乎是2倍的差距，当然16K就更明显，所以当使用SSD时，建议数据库页大小设置成4K或者是8K， innodb_page_size&#x3D;8K )<br>上线以前，SSD需要经过严格的压力测试(一周时间)，确保性能平稳</p></blockquote></li><li><p>Endurance Rating  </p><ul><li><p>表示该SSD的寿命是多少</p></li><li><p>比如450TBW，表示这个SSD可以反复写入的数据总量是450T(包括添加和更新)</p></li></ul></li><li><p>SSD线上参数设置</p><ul><li><p>磁盘调度算法改为Deadline  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo deadline &gt; /sys/block/sda/queue/scheduler # deadline适用于数据库，HDD也建议改成Deadline</span><br></pre></td></tr></table></figure></li><li><p>MySQL参数  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">innodb_log_file_size</span>=<span class="string">4G 该参数设置的尽可能大</span></span><br><span class="line"><span class="attr">innodb_flush_neighbors</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>性能更平稳，且至少有15%的性能提升</p></blockquote></li></ul></li><li><p>提升IOPS性能的手段</p><ul><li><p>通过 RAID 技术</p><ul><li><p>功耗较高  </p></li><li><p>IOPS在2000左右</p></li></ul></li><li><p>通过购买共享存储设备</p><ul><li><p>价格非常昂贵  </p></li><li><p>但是比较稳定  </p></li><li><p>底层还是通过RAID实现</p></li></ul></li><li><p>直接使用SSD  </p><ul><li><p>性能较好的SSD可以达到 万级别的IOPS</p></li><li><p>建议可以用SSD + RAID5，RAID1+0太奢侈</p></li></ul></li></ul></li><li><p>RAID类别</p><p><img src="/mysql/learn-mysql-013/raid_0.png" loading="lazy"></p><p><img src="/mysql/learn-mysql-013/raid_1.png" loading="lazy"></p><p><img src="/mysql/learn-mysql-013/raid_5.png" loading="lazy"></p><p><img src="/mysql/learn-mysql-013/raid_6.png" loading="lazy"></p><p><img src="/mysql/learn-mysql-013/raid_1_0.png" loading="lazy"></p><p><img src="/mysql/learn-mysql-013/raid_5_0.png" loading="lazy"></p></li></ol><h2 id="mysql的IO使用情况"><a href="#mysql的IO使用情况" class="headerlink" title="mysql的IO使用情况"></a>mysql的IO使用情况</h2><p>通过threads表中的信息，结合iotop -u mysql的输出，就可以知道某个线程的io使用情况</p><ol><li><p>存储结构对应关系</p><p><img src="/mysql/learn-mysql-013/database_filesystem_disk.png" loading="lazy"></p></li><li><p>O_DIRECT</p><ul><li><p>fwrite &#x2F; fsync</p><ul><li><p>fwrite 是把数据写入文件系统层(Filesystem)(可能有cache)，并不能保证写入Disk</p></li><li><p>fsync 可以保证把数据写入到Disk(数据落盘)</p></li></ul><blockquote><p>只通过 fwrite 写入数据特别快(因为有缓存)，但随后调用 fsync 就会很慢，这个速度取决于磁盘的 IOPS<br>如果不手工执行 fysnc ，当Filesystem的 cache 小于 10% 时，操作系统才会将数据刷入磁盘。所以可能存在数据丢失的风险，比如掉电</p></blockquote></li><li><p>O_DIRECT</p><p><img src="/mysql/learn-mysql-013/mysql_o_direct.png" loading="lazy"></p></li></ul></li></ol><h2 id="sysbench"><a href="#sysbench" class="headerlink" title="sysbench"></a>sysbench</h2><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">brew install sysbench</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">sysbench --file-num=4 --file-total-size=10G --file-block-size=8192 --file-test-mode=rndrw --time=600 --threads=16  --report-interval=10 fileio prepare</span></span><br></pre></td></tr></table></figure><blockquote><p>测试完成后执行 cleanup<br>如果是真实的测试 max-time 设置成一周的时间</p></blockquote></li><li><p>测试mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">sysbench /opt/homebrew/Cellar/sysbench/1.0.20_1/share/sysbench/oltp_insert.lua --mysql-host=127.0.0.1 --mysql-port=3306 --mysql-user=root  --mysql-password=<span class="string">&#x27;admin123&#x27;</span> --mysql-db=sbtest --db-driver=mysql  --tables=1 --table-size=10000000 --report-interval=10 --threads=16 --time=120 cleanup</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">详细介绍磁盘，以及如何测试磁盘性能</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-explain</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-012/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-012/</id>
    <published>2022-03-25T16:33:04.000Z</published>
    <updated>2023-03-08T07:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>explain是解释SQL语句的执行计划，即显示该SQL语句怎么执行的 ◦ 使用 explain 的时候，也可以使用 desc</p></li><li><p>5.6 版本支持DML语句进行explain解释 </p></li><li><p>5.6版本开始支持JSON格式的输出</p></li></ul><p>注意:EXPLAIN查看的是执行计划，做SQL解析，不会去真的执行;且到5.7以后子查询也不会去执行。</p><ul><li><p>参数extended</p></li><li><p>参数FORMAT</p><blockquote><p>使用 FORMART&#x3D;JSON 不仅仅是为了格式化􏰄出效果，还有其他有用的显示信息。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain format<span class="operator">=</span>json <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_index_2 <span class="keyword">where</span> b <span class="operator">&gt;</span><span class="number">1</span> <span class="keyword">and</span> b <span class="operator">&lt;</span> <span class="number">3</span>\G <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">EXPLAIN: &#123;</span><br><span class="line">    &quot;query_block&quot;: &#123;</span><br><span class="line">        &quot;select_id&quot;: <span class="number">1</span>,</span><br><span class="line">        &quot;cost_info&quot;: &#123;</span><br><span class="line">            &quot;query_cost&quot;: &quot;2.20&quot; <span class="comment">-- 总成本</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;table&quot;: &#123;</span><br><span class="line">            &quot;table_name&quot;: &quot;test_index_2&quot;,</span><br><span class="line">            &quot;access_type&quot;: &quot;ALL&quot;,</span><br><span class="line">            &quot;rows_examined_per_scan&quot;: <span class="number">6</span>,</span><br><span class="line">            &quot;rows_produced_per_join&quot;: <span class="number">1</span>,</span><br><span class="line">            &quot;filtered&quot;: &quot;16.67&quot;,</span><br><span class="line">            &quot;cost_info&quot;: &#123;</span><br><span class="line">                &quot;read_cost&quot;: &quot;2.00&quot;,</span><br><span class="line">                &quot;eval_cost&quot;: &quot;0.20&quot;,</span><br><span class="line">                &quot;prefix_cost&quot;: &quot;2.20&quot;,</span><br><span class="line">                &quot;data_read_per_join&quot;: &quot;16&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;used_columns&quot;: [</span><br><span class="line">                &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;attached_condition&quot;: &quot;((`burn_test`.`test_index_2`.`b` &gt; 1) and (`burn_test`.`test_index_2`.`b` &lt; 3))&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>explain输出介绍</p><table><thead><tr><th>列</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>执行计划的id标志</td></tr><tr><td>select_type</td><td>select的类型</td></tr><tr><td>table</td><td>输出记录的表</td></tr><tr><td>partitions</td><td>符合的分区，[PARTITIONS]</td></tr><tr><td>type</td><td>join的类型</td></tr><tr><td>possible_keys</td><td>优化器可能使用到的索引</td></tr><tr><td>key</td><td>优化器实际选择的索引</td></tr><tr><td>key_len</td><td>使用索引的字节长度</td></tr><tr><td>ref</td><td>进行比较的索引列</td></tr><tr><td>rows</td><td>优化器预估的记录数量</td></tr><tr><td>filtered</td><td>􏰂据条件过滤得到的记录的百分比[EXTENDED]</td></tr><tr><td>extra</td><td>额外的显示选项</td></tr></tbody></table><ul><li><p>id</p><p>从上往下理解，不一定id序号大的先执行</p></li><li><p>select_type</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单SELECT(不使用UNION或􏰁查询等)</td></tr><tr><td>PRIMARY</td><td>最外层的select</td></tr><tr><td>UNION</td><td>UNION中的第二个或后面的SELECT语句</td></tr><tr><td>DEPENDENT UNION</td><td>UNION中的第二个或后面的SELECT语句，依赖于外面的查询</td></tr><tr><td>UNION RESULT</td><td>UNION的结果</td></tr><tr><td>SUBQUERY</td><td>􏰁查询中的第一个SELECT</td></tr><tr><td>DEPENDENT SUBQUERY</td><td>􏰁查询中的第一个SELECT，依赖于外面的查询</td></tr><tr><td>DERIVED</td><td>派􏰅表的SELECT(FROM􏰁句的􏰁查询)</td></tr><tr><td>MATERIALIZED</td><td>物化􏰁查询</td></tr><tr><td>UNCACHEABLE SUBQUERY</td><td>不会被缓存的并且对于外部查询的每行都要重新计算的􏰁查询</td></tr><tr><td>UNCACHEABLE UNION</td><td>属于不能被缓存的 UNION中的第二个或后面的SELECT语句</td></tr></tbody></table><blockquote><p>MATERIALIZED  </p><ul><li><p>产生中间临时表(实体)  </p></li><li><p>临时表自动创建索引并和其他表进行关联，提高性能  </p></li><li><p>和子查询的区别是，优化器将可以进行 MATERIALIZED 的语句自动改写成 join，并自动创建索引</p></li></ul></blockquote></li><li><p>table</p><ul><li><p>通常是用户操作的用户表  </p></li><li><p>&lt;unionM, N&gt; UNION得到的结果表  </p></li><li><p>排生表，由id&#x3D;N的语句产生</p></li><li><p>由子查询物化产生的表，由id&#x3D;N的语句产生</p></li></ul></li><li><p>type</p><p>按照图上箭头的顺序来看，成本(cost)是从小到大</p><p><img src="/mysql/learn-mysql-012/mysql_explain_type.png" loading="lazy"></p></li><li><p>extra</p><table><thead><tr><th>extra常见值</th><th>说明</th></tr></thead><tbody><tr><td>Using filesort</td><td>需要使用额外的排序得到结果</td></tr><tr><td>Using index</td><td>优化器只需要使用索引就能得到结果</td></tr><tr><td>Using index condition</td><td>优化器使用Index Condition Pushdown优化</td></tr><tr><td>Using index for group by</td><td>优化器只需要使用索引就能处理group by或distinct语句</td></tr><tr><td>Using join buffer</td><td>优化器需要使用join buffer，join_buffer_size</td></tr><tr><td>Using MRR</td><td>优化器使用MRR优化</td></tr><tr><td>Using temporay</td><td>优化器需要使用临时表</td></tr><tr><td>Using where</td><td>优化器使用where过滤</td></tr></tbody></table><ul><li><p>Using filesort：可以使用复合索引将filesort进行优化，提高性能</p></li><li><p>Using index：比如使用覆盖索引</p></li><li><p>Using where：使用where过滤条件</p></li></ul></li></ul></li></ol>]]></content>
    
    
    <summary type="html">详细介绍expian的用法</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-information_schema</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-011/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-011/</id>
    <published>2022-03-25T16:23:26.000Z</published>
    <updated>2022-04-12T15:59:02.690Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use information_schema;</span><br><span class="line">Reading <span class="keyword">table</span> information <span class="keyword">for</span> completion <span class="keyword">of</span> <span class="keyword">table</span> <span class="keyword">and</span> <span class="keyword">column</span> names </span><br><span class="line">You can turn off this feature <span class="keyword">to</span> <span class="keyword">get</span> a quicker startup <span class="keyword">with</span> <span class="operator">-</span>A</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables; </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> Tables_in_information_schema <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> CHARACTER_SETS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> COLLATIONS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> COLLATION_CHARACTER_SET_APPLICABILITY <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> COLUMNS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> COLUMN_PRIVILEGES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> ENGINES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> EVENTS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> FILES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> GLOBAL_STATUS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> GLOBAL_VARIABLES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> KEY_COLUMN_USAGE <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> OPTIMIZER_TRACE <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> PARAMETERS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> PARTITIONS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> PLUGINS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> PROCESSLIST <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> PROFILING <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> REFERENTIAL_CONSTRAINTS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> ROUTINES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> SCHEMATA <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> SCHEMA_PRIVILEGES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> SESSION_STATUS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> SESSION_VARIABLES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> STATISTICS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> TABLES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> TABLESPACES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> TABLE_CONSTRAINTS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> TABLE_PRIVILEGES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> TRIGGERS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> USER_PRIVILEGES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> VIEWS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_LOCKS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_TRX <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_DATAFILES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_FT_CONFIG <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_VIRTUAL <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_CMP <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_FT_BEING_DELETED <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_CMP_RESET <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_CMP_PER_INDEX <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_CMPMEM_RESET <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_FT_DELETED <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_BUFFER_PAGE_LRU <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_LOCK_WAITS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_TEMP_TABLE_INFO <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_INDEXES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FIELDS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_CMP_PER_INDEX_RESET <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_BUFFER_PAGE <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_FT_DEFAULT_STOPWORD <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_FT_INDEX_TABLE <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_FT_INDEX_CACHE <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESPACES <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_METRICS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN_COLS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_CMPMEM <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_BUFFER_POOL_STATS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_COLUMNS <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_FOREIGN <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> INNODB_SYS_TABLESTATS <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------------+ </span></span><br><span class="line"><span class="number">61</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- information_schema 数据库相当于一个数据字典。保存了表的元信息。</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> key_column_usage limit <span class="number">3</span>\G <span class="comment">-- 显示了哪个索引使用了哪个列 </span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">CONSTRAINT_CATALOG: def CONSTRAINT_SCHEMA: burn_test</span><br><span class="line">                 CONSTRAINT_NAME: <span class="keyword">PRIMARY</span></span><br><span class="line">                   TABLE_CATALOG: def</span><br><span class="line">TABLE_SCHEMA: burn_test TABLE_NAME: Orders <span class="comment">-- 表名</span></span><br><span class="line">                   COLUMN_NAME: order_id</span><br><span class="line">             ORDINAL_POSITION: <span class="number">1</span></span><br><span class="line">POSITION_IN_UNIQUE_CONSTRAINT: <span class="keyword">NULL</span> REFERENCED_TABLE_SCHEMA: <span class="keyword">NULL</span> REFERENCED_TABLE_NAME: <span class="keyword">NULL</span> REFERENCED_COLUMN_NAME: <span class="keyword">NULL</span></span><br><span class="line"><span class="comment">-- 索引的名称</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> CONSTRAINT_CATALOG: def</span><br><span class="line">CONSTRAINT_SCHEMA: burn_test CONSTRAINT_NAME: product_name</span><br><span class="line">                   TABLE_CATALOG: def</span><br><span class="line">                    TABLE_SCHEMA: burn_test</span><br><span class="line">                      TABLE_NAME: Orders_MV</span><br><span class="line">                     COLUMN_NAME: product_name</span><br><span class="line">ORDINAL_POSITION: <span class="number">1</span> POSITION_IN_UNIQUE_CONSTRAINT: <span class="keyword">NULL</span> REFERENCED_TABLE_SCHEMA: <span class="keyword">NULL</span> REFERENCED_TABLE_NAME: <span class="keyword">NULL</span> REFERENCED_COLUMN_NAME: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> CONSTRAINT_CATALOG: def</span><br><span class="line">CONSTRAINT_SCHEMA: burn_test CONSTRAINT_NAME: child_ibfk_1</span><br><span class="line">                   TABLE_CATALOG: def</span><br><span class="line">                    TABLE_SCHEMA: burn_test</span><br><span class="line">                      TABLE_NAME: child</span><br><span class="line">                     COLUMN_NAME: parent_id</span><br><span class="line">ORDINAL_POSITION: <span class="number">1</span> POSITION_IN_UNIQUE_CONSTRAINT: <span class="number">1</span></span><br><span class="line">REFERENCED_TABLE_SCHEMA: burn_test REFERENCED_TABLE_NAME: parent</span><br><span class="line">          REFERENCED_COLUMN_NAME: id</span><br><span class="line">   <span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><ol><li>STATISTICS这张表记录了Cardinality信息</li><li>innodb_sys_tablespaces记录表空间的元数据信息(系统文件块大小，文件大小，文件实际分配的大小)</li><li>innodb_sys_tables记录SpaceID和table的关系</li></ol><h2 id="mysql-5-6安装sys库"><a href="#mysql-5-6安装sys库" class="headerlink" title="mysql 5.6安装sys库"></a>mysql 5.6安装sys库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; git clone https://github.com/mysql/mysql-sys.git </span><br><span class="line">shell &gt; ls | grep sys_56.sql</span><br><span class="line">sys_56.sql # 这个就是我们要安装的到mysql5.6的sys</span><br><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">mysql -u root -S /tmp/mysql.sock_56 &lt; sys_56.sql <span class="comment"># 直接导入即可</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">select version();</span></span><br><span class="line">+------------+</span><br><span class="line">| version()  |</span><br><span class="line">+------------+</span><br><span class="line">| 5.6.27-log |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| burn_test |</span><br><span class="line">| burn_test_56 |</span><br><span class="line">| mysql |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys | -- 新安装的sys库，但是这个里面只有88个记录，因为5.7中增加了几张表，有101个记录 </span><br><span class="line">| test |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="统计没有创建主键的表"><a href="#统计没有创建主键的表" class="headerlink" title="统计没有创建主键的表"></a>统计没有创建主键的表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_NAME,</span><br><span class="line">       table_schema</span><br><span class="line"><span class="keyword">FROM</span> tables</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_NAME <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">    (<span class="keyword">SELECT</span> TABLE_NAME</span><br><span class="line">     <span class="keyword">FROM</span> COLUMNS</span><br><span class="line">     <span class="keyword">WHERE</span> `COLUMN_KEY` <span class="operator">=</span> <span class="string">&#x27;PRI&#x27;</span></span><br><span class="line">       <span class="keyword">AND</span> `TABLE_SCHEMA` <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;sys&#x27;</span>,</span><br><span class="line">                                  <span class="string">&#x27;information_schema&#x27;</span>,</span><br><span class="line">                                  <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">                                  <span class="string">&#x27;performance_schema&#x27;</span>)</span><br><span class="line">     <span class="keyword">GROUP</span> <span class="keyword">BY</span> TABLE_NAME</span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span> TABLE_NAME)</span><br><span class="line">  <span class="keyword">AND</span> table_schema <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;sys&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;information_schema&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;performance_schema&#x27;</span>,</span><br><span class="line">                           <span class="string">&#x27;mysql&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="检查表的索引创建的情况，判断该索引是否有创建的必要"><a href="#检查表的索引创建的情况，判断该索引是否有创建的必要" class="headerlink" title="检查表的索引创建的情况，判断该索引是否有创建的必要"></a>检查表的索引创建的情况，判断该索引是否有创建的必要</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t.TABLE_SCHEMA,</span><br><span class="line">    t.TABLE_NAME,</span><br><span class="line">    INDEX_NAME, </span><br><span class="line">    <span class="keyword">CARDINALITY</span>, </span><br><span class="line">    TABLE_ROWS,</span><br><span class="line">    <span class="keyword">CARDINALITY</span><span class="operator">/</span>TABLE_ROWS <span class="keyword">AS</span> SELECTIVITY <span class="comment">-- 得到选择性</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TABLES t, <span class="comment">-- 查询的表一，TABLES </span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">            table_schema,</span><br><span class="line">            table_name,</span><br><span class="line">            index_name,</span><br><span class="line">            <span class="keyword">cardinality</span></span><br><span class="line">    <span class="keyword">FROM</span> STATISTICS</span><br><span class="line">    <span class="keyword">WHERE</span> (table_schema,table_name,index_name,seq_in_index) <span class="keyword">IN</span> ( </span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            table_schema,</span><br><span class="line">            table_name,</span><br><span class="line">            index_name,</span><br><span class="line">            <span class="built_in">MAX</span>(seq_in_index)</span><br><span class="line">        <span class="keyword">FROM</span>  STATISTICS</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> table_schema , table_name , index_name )   </span><br><span class="line">) s <span class="comment">-- 查询的表二，就是上面3.2的查询结果</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">t.table_schema <span class="operator">=</span> s.table_schema <span class="comment">-- 通过库关联</span></span><br><span class="line"><span class="keyword">AND</span> t.table_name <span class="operator">=</span> s.table_name <span class="comment">-- 再通过表变􏰆</span></span><br><span class="line"><span class="keyword">AND</span> t.table_schema <span class="operator">=</span> <span class="string">&#x27;employees&#x27;</span> <span class="comment">-- 指定某一个库名 </span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> SELECTIVITY;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 通过最后一列的SELECTIVITY是否接近1，判断该索引创建是否合理</span></span><br><span class="line"><span class="comment">-- 注意:</span></span><br><span class="line"><span class="comment">-- Cardinality和table_rows的值，都是通过随机采样，预估得到的</span></span><br><span class="line"><span class="comment">-- 当analyze前后，Cardinality值相差较多，说明该索引是不应该被创建的(页上的记录数值分布不平均) </span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 推荐 SELECTIVITY 15% 以上是适合的</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">详细介绍infomattion_schema</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-索引和B+tree</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-010/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-010/</id>
    <published>2022-03-23T15:56:59.000Z</published>
    <updated>2023-04-04T15:34:00.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ol><li><p>索引的定义</p><blockquote><p>索引是对记录安装一个或者多个字段进行排序的一种方式。对表中的某个字段建立索引会创建另一种数据结构，其中保存着字段的值，每个值又指向与它相关的记录。这种索引的数据结构是经过排序的，因而可以对其执行二分查找。且性能较高。</p></blockquote></li><li><p>二分查找</p><blockquote><p>二分查找法(binary search)也称为折半查找法，用来查找一组有序的记录数组中的某一记录，其基本思想是:将记录按有序化(递增或递减)排列，在查找过程中采用跳跃式方式查找，即先以有序数列的中点位置作为比较对象，如果要找的元素值小于该中点元素，则将待查序列缩小为左半部分，否则为右半部分。通过一次比较，将查找区间缩小一半。(O(logN)的时间复杂度)</p></blockquote><p>给出一个例子，提供的数据是已经排好序的，且查找数字48</p><table><thead><tr><th>数据</th><th>5</th><th>10</th><th>19</th><th>21</th><th>31</th><th>37</th><th>42</th><th>48</th><th>50</th><th>52</th></tr></thead><tbody><tr><td>下标</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td></tr></tbody></table><ul><li><p>设low下标最小值为0，high为下标最大值9</p></li><li><p>通过low和high得到mid。mid&#x3D;(low+high)&#x2F;2，初始时mid为下标4(也可以是5，具体看算法)</p></li><li><p>mid&#x3D;4对应的数据是31，31 &lt;  48</p></li><li><p>通过二分查找的思路，low设置为31对应的下标4，high保持不变，此时mid为6</p></li><li><p>mid&#x3D;6对应的数据是42，42 &lt; 48</p></li><li><p>通过二分查找的思路，将low设置为42对应的下标6，high保持不变，此时mid&#x3D;7</p></li><li><p>mid&#x3D;7对应的数据是48，48&#x3D;48，查询结束</p></li></ul></li></ol><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ol><li><p>二叉树的定义</p><ul><li><p>每个节点至多只有两颗子树</p></li><li><p>二叉树的子树有左右之分，次序不能颠倒</p></li><li><p>一颗深度为k，且有$2^k-1$个节点，成为满二叉树(full tree)</p></li><li><p>一颗深度为k，且root到k-1层的节点树都达到最大，第k层的所有节点都连续集中在最左边，此时为完全二叉树(complete tree)</p></li></ul></li></ol><pre class="mermaid">graph TB;完全二叉树A((1))B((2))C((3))D((4))E((5))F((6))G((7))H((8))A-->BA-->CB-->DB-->EC-->FC-->GD-->H</pre><pre class="mermaid">graph TB;满二叉树1((1))2((2))3((3))4((4))5((5))6((6))7((7))8((8))9((9))10((10))11((11))12((12))13((13))14((14))15((15))1-->21-->32-->42-->54-->84-->95-->105-->113-->63-->76-->126-->137-->147-->15</pre><ol start="2"><li><p>平衡二叉树</p><ul><li><p>左子树和右子树都是平衡二叉树</p></li><li><p>左子树和右子树的高度差绝对值不超过1</p></li></ul></li></ol><pre class="mermaid">graph TB;平衡二叉树2((2))3((3))5((5))6((6))7((7))8((8))6-->36-->77-->83-->23-->5</pre><pre class="mermaid">graph LR;非平衡二叉树2((2))3((3))5((5))7((7))6((6))8((8))2-->33-->55-->77-->67-->8</pre><ol start="3"><li><p>平衡二叉树的遍历</p><p>以上面平衡二叉树为例，进行遍历</p><ul><li><p>前序：6, 3, 2, 5, 7, 8(ROOT节点在开头，中-左-右顺序)</p></li><li><p>中序：2, 3, 5, 6, 7, 8(中序遍历即为升序，左-中-右顺序)</p></li><li><p>后序：2, 5, 3, 8, 7, 6(ROOT节点中结尾，左-右-中顺序)</p></li></ul><blockquote><p>可以通过前序和中序或者是后序和中序来推导一棵树</p><p>前序或者后序用来得到ROOT节点，中序可以区分左右子树</p></blockquote></li><li><p>平衡二叉树的旋转</p></li></ol><pre class="mermaid">graph TB;subgraph 插入新健值3    i_2((2))    i_1((1))    i_5((5))    i_4((4))    i_9((9))    i_3((3))    i_2-->i_1    i_2-->i_5    i_5-->i_4    i_5-->i_9    i_4-->i_3endsubgraph 平衡二叉树    1((1))    2((2))    4((4))    5((5))    9((9))    2-->1    2-->5    5-->4    5-->9end</pre><p>平衡树旋转</p><pre class="mermaid">graph TD;subgraph 左旋一次    2((2))    1((1))    5((5))    3((3))    4((4))    9((9))    4-->2    2-->1    2-->3    4-->5    5-->9endsubgraph 右旋一次    i_2((2))    i_1((1))    i_5((5))    i_3((3))    i_4((4))    i_9((9))    i_2-->i_1    i_2-->i_4    i_4-->i_3    i_4-->i_5    i_5-->i_9end</pre><blockquote><p>需要通过旋转(左旋和右旋)来维护平衡二叉树的平衡，左添加和删除时候需要有额外的开销</p></blockquote><h2 id="Btree-x2F-B-tree"><a href="#Btree-x2F-B-tree" class="headerlink" title="Btree&#x2F;B+tree"></a>Btree&#x2F;B+tree</h2><ol><li><p>Btree的定义</p><p>阶为M(节点上关键字keys的个数)的Btree的定义</p><ul><li><p>每个节点最多有M个孩子</p></li><li><p>除了root节点外，每个飞叶子(non-leaf)节点至少含有(m&#x2F;2)个孩子</p></li><li><p>如果root节点不为空，则root节点至少要有两个孩子节点</p></li><li><p>一个非叶子节点如果含有k个孩子，则包含k-1个keys</p></li><li><p>所有叶子节点都在同一层</p></li><li><p>Btree树中的非叶子节点也包含了数据部分</p></li></ul></li><li><p>B+tree的定义</p><p>在Btree树的基础上，B+tree树做了如下改进</p><ul><li><p>数据只存储在叶子节点上，非叶子节点只保存索引信息</p><ul><li><p>非叶子节点(索引节点)存储的只是一个flag，不保存实际数据记录</p></li><li><p>索引节点指示该节点的左子树比这个flag小，而右子树大于等于这个flag</p></li></ul></li><li><p>叶子节点本身按照数据的升序进行链接</p><ul><li>叶子节点中的数据中物理存储上是无序的，仅仅是逻辑上有序</li></ul></li></ul></li><li><p>B+tree的作用</p><ul><li><p>在块设备上，通过B+tree可以有效的存储数据</p></li><li><p>所有记录都存储在叶子节点上，非叶子节点存储索引信息</p></li><li><p>B+tree含有非常高的扇出(fanout)，通常超过100，在查找一个记录时，可以有效的减少IO操作</p></li></ul></li><li><p>B+tree的操作</p><ul><li><p>B+tree的插入</p><p>B+tree的插入必须保证插入后叶子节点的记录依然排序</p><p><img src="/mysql/learn-mysql-010/b+tree_insert.png" loading="lazy"></p></li></ul><blockquote><p>B+tree总会保存平衡。但是为了保持平衡对于新插入的健值可能需要做大量的拆分页(split)操作；部分情况下可以通过B+tree的旋转来替代拆分页操作，进而达到平衡效果</p></blockquote><ul><li><p>B+tree的删除</p><p>B+树使用填充因􏰁(fill factor)来控制树的删除变化，50%是填充因􏰁可设的最小值。B+树的删除操作同样必须保证删除后叶􏰁节点中的记录依然排序。与插入不同的是，删除􏰂据填充因􏰁的变化来衡量。</p><p><img src="/mysql/learn-mysql-010/b+tree_delete.png" loading="lazy"></p></li></ul></li><li><p>B+tree的扇出(fan out)</p><ul><li><p>B+tree图例</p><p><img src="/mysql/learn-mysql-010/b+tree_fanout.png" loading="lazy"></p></li><li><p>该B+tree高度为2</p></li><li><p>每叶子叶(leafPgae)4条记录</p></li><li><p>扇出数为5</p></li><li><p>叶子节点(leafPgae)由小到大串联做一起</p></li></ul><blockquote><p>扇出 是每个索引节点(Non-LeafPage)指向每个叶子节点(LeafPage)的指针</p><p>扇出数 &#x3D; 索引节点(Non-LeafPage)可存储的最大关键字个数 + 1 图例中的索引节点(Non-LeafPage)最大可以存放4个关键字，但实际使用了3个;</p></blockquote></li><li><p>B+tree存储数据举例</p><p>假设B+树中页的大小是16K，每行记录是200Byte大小，求出树的高度为1，2，3，4时，分别可以存储多少条记录。</p><ul><li><p>查看数据表中每行记录的平均大小</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">like</span> &quot;%employees%&quot;\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">Name: employees</span><br><span class="line">Engine: InnoDB</span><br><span class="line">Version: <span class="number">10</span></span><br><span class="line">Row_format: <span class="keyword">Dynamic</span></span><br><span class="line"><span class="keyword">Rows</span>: <span class="number">298124</span></span><br><span class="line">Avg_row_length: <span class="number">51</span> <span class="comment">-- 平均长度为51个字节</span></span><br><span class="line">Data_length: <span class="number">15245312</span></span><br><span class="line">Max_data_length: <span class="number">0</span></span><br><span class="line">Index_length: <span class="number">0</span></span><br><span class="line">Data_free: <span class="number">0</span></span><br><span class="line">Auto_increment: <span class="keyword">NULL</span></span><br><span class="line">Create_time: <span class="number">2015</span><span class="number">-12</span><span class="number">-02</span> <span class="number">21</span>:<span class="number">32</span>:<span class="number">02</span> </span><br><span class="line">Update_time: <span class="keyword">NULL</span></span><br><span class="line">Check_time: <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line">Checksum: <span class="keyword">NULL</span></span><br><span class="line">Create_options:</span><br><span class="line">Comment:</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>高度为1</p><blockquote><p>16k&#x2F;200B约等于80个记录</p></blockquote></li><li><p>高度为2</p><p>非叶子节点中存放的仅仅是一个索引信息，包含了 Key 和 Point 指针; Point 指针在MySQL中固定为 6Byte 。而 Key 我们这里假设为 8Byte ，则单个索引信息即为14个字节， KeySize &#x3D; 14Byte</p><blockquote><p>高度为2，即有一个索引节点(索引页)，和N个叶子节点<br>◦ 一个索引节点可以存放 16K &#x2F; KeySize &#x3D; 16K &#x2F; 14B &#x3D; 1142个索引信息，即有(1142 + 1)个扇出，以及有(1142 + 1)个叶子节点(数据页) (可以简化为1000) ◦ 数据记录数 &#x3D; (16K &#x2F; KeySize + 1)x (16K &#x2F; 200B) 约等于 80W 个记录</p></blockquote></li><li><p>高度为3</p><blockquote><p>高度为3的B+树，即ROOT节点有1000个扇出，每个扇出又有1000个扇出指向叶􏰁节点。每个节点是80个记录，所以一共有 8000W个记录</p></blockquote></li><li><p>高度为4</p><blockquote><p>同高度3一样，高度为4时的记录书为(8000 x 1000)W</p></blockquote></li></ul><blockquote><p>上述的8000W等数据只是一个理论值。线上实际使用单个页的记录数字要乘以70%，即第二层需要70% x 70% ，依次类推。<br>因此在数据库中，B+树的高度一般都在2<del>4层，这也就是说查找某一键值的行记录时最多只需要2到4次IO，2</del>4次的IO意味着查询时间只需0.02~0.04秒(假设IOPS&#x3D;100，当前SSD可以达到50000IOPS)。</p></blockquote><p>从5.7开始，页的预留大小可以设置了，以减少split操作的概率(空间换时间)</p></li></ol><h2 id="mysql索引"><a href="#mysql索引" class="headerlink" title="mysql索引"></a>mysql索引</h2><ol><li><p>mysql创建索引</p><blockquote><p>alter table test_index_1 add index idx_a (a);</p></blockquote></li><li><p>mysql查看索引</p><blockquote><ol><li><p>show index from orders\G</p></li><li><p>show create table orders\G</p></li><li><p>desc orders;</p></li></ol></blockquote></li><li><p>Cardinality(基数)</p><p>Cardinality表示该索引列上有多少不同的记录，这个是一个预估的值，是采样得到的(由InnoDB触发，采样20个页，进行预估)，该值越大越好，即当Cardinality &#x2F; RowNumber越接近1越好。表示该列是高选择性的。</p><p>• 高选择性:身份证 、手机号码、姓名、订单号等 </p><p>• 低选择性:性别、年龄等</p><p>即该列是否适合创建索引，就看该字段是否具有高选择性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> lineitem\G；</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">Table</span>: lineitem</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `lineitem` (</span><br><span class="line">`l_orderkey` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`l_partkey` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_suppkey` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_linenumber` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_quantity` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_extendedprice` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_discount` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`l_tax` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_returnflag` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_linestatus` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_shipDATE` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_commitDATE` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_receiptDATE` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_shipinstruct` <span class="type">char</span>(<span class="number">25</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_shipmode` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line">`l_comment` <span class="type">varchar</span>(<span class="number">44</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, </span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`l_orderkey`,`l_linenumber`), <span class="comment">-- 两个列作为primary</span></span><br><span class="line">KEY `i_l_shipdate` (`l_shipDATE`),</span><br><span class="line">KEY `i_l_suppkey_partkey` (`l_partkey`,`l_suppkey`), </span><br><span class="line">KEY `i_l_partkey` (`l_partkey`),</span><br><span class="line">KEY `i_l_suppkey` (`l_suppkey`),</span><br><span class="line">KEY `i_l_receiptdate` (`l_receiptDATE`),</span><br><span class="line">KEY `i_l_orderkey` (`l_orderkey`),</span><br><span class="line">KEY `i_l_orderkey_quantity` (`l_orderkey`,`l_quantity`), </span><br><span class="line">KEY `i_l_commitdate` (`l_commitDATE`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `lineitem_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`l_orderkey`) <span class="keyword">REFERENCES</span> `orders` (`o_orderkey`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `lineitem_ibfk_2` <span class="keyword">FOREIGN</span> KEY (`l_partkey`, `l_suppkey`) <span class="keyword">REFERENCES</span> `partsupp` (`ps_partkey`, `ps_suppkey`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1 <span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> lineitem\G <span class="comment">-- 省略其他输出，只看PRIMARY</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: lineitem</span><br><span class="line">   Non_unique: <span class="number">0</span></span><br><span class="line">Key_name: <span class="keyword">PRIMARY</span></span><br><span class="line">Seq_in_index: <span class="number">1</span> <span class="comment">-- 索引中的顺序，该列的顺序为1</span></span><br><span class="line">  Column_name: l_orderkey</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line"><span class="keyword">Cardinality</span>: <span class="number">1416486</span> <span class="comment">-- 约140W Sub_part: NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>:</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: lineitem</span><br><span class="line">   Non_unique: <span class="number">0</span></span><br><span class="line">Key_name: <span class="keyword">PRIMARY</span></span><br><span class="line">Seq_in_index: <span class="number">2</span> <span class="comment">-- 索引中的顺序，该列的顺序为2</span></span><br><span class="line">  Column_name: l_linenumber</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line"><span class="keyword">Cardinality</span>: <span class="number">5882116</span> <span class="comment">-- 约580W Sub_part: NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>:</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br></pre></td></tr></table></figure><blockquote><p>对应当前例子</p><p>第一个索引(Seq_in_index &#x3D; 1)的 Cardinality 的值表示 当前列(l_orderkey) 的不重复的值，<br>第二个索引(Seq_in_index &#x3D; 2)的 Cardinality 的值表示 前两列(l_orderkey)和(l_linenumber) 不重复的值</p></blockquote></li><li><p>复合索引</p><ul><li>创建表和保存数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_test_index(a <span class="type">int</span>, b <span class="type">int</span>, c <span class="type">int</span>);</span><br><span class="line"><span class="comment">-- 保存数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_test_index (a, b, c) <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>), (<span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>), (<span class="number">2</span>, <span class="number">4</span>, <span class="number">15</span>), (<span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>), (<span class="number">3</span>, <span class="number">2</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>创建a和b的联合索引(两列的联合索引)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_test_index <span class="keyword">add</span> index idx_a_b(a, b);</span><br></pre></td></tr></table></figure></li><li><p>验证是否命中索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span>; <span class="operator">/</span><span class="operator">/</span> 命中a索引</span><br><span class="line"><span class="number">2.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 命中a和b</span><br><span class="line"><span class="number">3.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> b <span class="operator">=</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 没有命中索引</span><br><span class="line"><span class="number">4.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> b <span class="operator">=</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 没用命中索引</span><br><span class="line"><span class="number">5.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">&gt;</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 命中a和b</span><br><span class="line"><span class="number">6.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">&gt;</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 没有命中索引</span><br><span class="line"><span class="number">7.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">!=</span> <span class="number">2</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 没有命中索引</span><br><span class="line"><span class="number">8.</span> <span class="keyword">select</span> a, b <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> b <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">&lt;=</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 命中索引 覆盖索引</span><br><span class="line"><span class="number">9.</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> b <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">&lt;=</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 命中索引，覆盖索引</span><br></pre></td></tr></table></figure></li><li><p>创建a,b,c三列的联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除两列的联合索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_test_index <span class="keyword">drop</span> index idx_a_b;</span><br><span class="line"><span class="comment">-- 创建三列的联合索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_test_index <span class="keyword">add</span> index idx_a_b_c(a, b, c);</span><br><span class="line"><span class="comment">-- 验证</span></span><br><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> tbl_test_index;</span><br><span class="line"><span class="comment">-- 表新增一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_test_index <span class="keyword">add</span> <span class="keyword">column</span> d <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>验证是否命中索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span>; <span class="operator">/</span><span class="operator">/</span> 命中索引</span><br><span class="line"><span class="number">2.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span>; <span class="operator">/</span><span class="operator">/</span> 命中索引</span><br><span class="line"><span class="number">3.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">1</span>; <span class="operator">/</span><span class="operator">/</span> 命中索引</span><br><span class="line"><span class="number">4.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> c <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 命中a索引</span><br><span class="line"><span class="number">5.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 没有命中索引</span><br><span class="line"><span class="number">6.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 没有命中索引</span><br><span class="line"><span class="number">7.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">&gt;</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 命中索引，c没有命中索引</span><br><span class="line"><span class="number">8.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">&gt;</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 命中索引</span><br><span class="line"><span class="number">9.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> c <span class="operator">&gt;</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 没有命中索引</span><br><span class="line"><span class="number">10.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_test_index <span class="keyword">where</span> a <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">and</span> b <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> c <span class="operator">=</span> <span class="number">3</span>; <span class="operator">/</span><span class="operator">/</span> 没有命中索引</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><p>如果索引也上能确定的话，就用索引。</p></li></ul><h2 id="secondary-index-二级索引"><a href="#secondary-index-二级索引" class="headerlink" title="secondary index(二级索引)"></a>secondary index(二级索引)</h2><ul><li><p>secondary index介绍</p><ul><li><p>clustered index(聚集索引)</p><p>叶子节点存储所有记录数据(all row data)</p><img src="/mysql/learn-mysql-010/image-20230403152453462.png" alt="image-20230403152453462" style="zoom:50%;"></li><li><p>secondary index(二级索引)</p><ul><li><p>也称为非聚集索引，辅助索引</p></li><li><p>叶子节点存储的是索引和主键信息</p></li><li><p>在找到索引后，得到对应的主键，在回到聚集索引中找主键对应的记录(row data)。俗称回表</p><blockquote><p>回表不止多一次IO，而是多N次IO，N&#x3D;树该高度</p></blockquote></li></ul><img src="/mysql/learn-mysql-010/image-20230403152903138.png" alt="image-20230403152903138" style="zoom:50%;"></li><li><p>secondary index查找数据</p><img src="/mysql/learn-mysql-010/image-20230403152941958.png" alt="image-20230403152941958" style="zoom:50%;"></li></ul></li><li><p>secondary index回表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> userinfo &#123;</span><br><span class="line">userid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">username varchat(<span class="number">30</span>),</span><br><span class="line">registdate datetime,</span><br><span class="line">email <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">primary</span> key(userid),</span><br><span class="line"><span class="keyword">unique</span> key idx_username(username), </span><br><span class="line">key idx_registdate(registdate)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ol><li>假设查找username为tom，先找二级索引idx_username，通过key为tom，得到对应的primary key：userid_a</li><li>得到userid_a后，再去找聚集索引中userid_a的记录(row data)&#x2F;</li><li>上诉一个通过二级索引得到数据(row data)的查找过程，即为回表</li><li>上述过程是mysql自动完成的</li></ol></blockquote></li><li><p>堆表的二级索引</p><ul><li>在堆表中，是没有聚集索引的，所有的索引都是二级索引</li><li>索引的叶子节点存放的是key和指向堆中记录的指针(物理位置)</li></ul><img src="/mysql/learn-mysql-010/image-20230403153906397.png" alt="image-20230403153906397" style="zoom:50%;"></li><li><p>堆表和IOT表二级索引对比</p><ul><li>堆表中二级索引不需要回表，且查找速度和主键索引一致，因为两者的叶子节点存放的都是指向数据的指针，反之，IOT表的二级索引查找需要回表</li><li>堆表中某条记录(row data)发生更新且无法原地更新时，该记录(row data)的物理地址将发生改变，此时，所有索引中对该记录的指针都需要更新(代价较大)，反之，IOT表中记录更新，且主键没有更新时，二级索引都无需更新</li><li>IOT表内是有序的，页与页之间也是有序的，做range查询很快。</li></ul><blockquote><p>实际数据库设计中，堆表的数据无法原地更新时，且在一个页内有剩余空间时，原来数据的空间位置不会释放，而是使用指针指向新的位置，此时该记录对应的所有索引就无需更改了</p><p>如果页内没有剩余空间，所有的索引还是需要更新一遍</p></blockquote></li><li><p>index with included colnum(含列索引)</p><ul><li><p>在上面给出的 userinfo 的例􏰄中，如果要查找某个 用户的email ，需要回表，如何不回表进行查询呢?</p><blockquote><p>1。使用复合索引，unique key idx_username(username, email)</p></blockquote></li></ul></li></ul><h2 id="multi-range-read-MRR"><a href="#multi-range-read-MRR" class="headerlink" title="multi range read(MRR)"></a>multi range read(MRR)</h2><ul><li><p>回表的代价</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给employees增加一列索引</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> employees <span class="keyword">add</span> index idx_date (hire_date);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询语句1</span></span><br><span class="line"><span class="comment">-- 主键查找1w条数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="keyword">between</span> <span class="number">10000</span> <span class="keyword">and</span> <span class="number">20000</span>;</span><br><span class="line"><span class="comment">-- 查询语句2</span></span><br><span class="line"><span class="comment">-- 每次查询需要回表</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> hire_date <span class="operator">&gt;=</span> <span class="string">&#x27;1990-01-01&#x27;</span> limit <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><blockquote><p>对于查询语句1，假设一页有100条数据，则需要100次IO</p><p>对应查询语句2，假设聚集索引和hire_date索引的高度都是3，且查找1w条记录，则需要查询的IO数为3+N+3w</p><ul><li>3是第一次找到hire_date&gt;&#x3D;&#39;1990-01-01&#39;所在的页的IO次数</li><li>N为第一次找到页往后读页的IO次数(注意，二级索引也是连续的，不需要从根在重新查找)</li><li>所以3+N是在hire_date二级索引中读取的IO次数</li><li>3w为在IOT表中进行回表的次数</li></ul><p>在mysql5.6之前，时间使用过程中，优化器可能会直接选择扫表，而不会进行如此多的回表操作</p></blockquote></li><li><p>mrr介绍</p><blockquote><p>mrr是针对物理访问，随机转顺序，空间换时间</p></blockquote><ul><li><p>开辟一块内存空间作为cache</p><p>默认32m，注意是线程级的，不建议设置太大。show variables like &#39;%read_rnd%&#39;;</p></li><li><p>将需要回表的主键放入上述的内存空间中(空间换时间)，放满后进行排序(随机转顺序)</p></li><li><p>将排序好的数据(主键)一起进行回表操作，以提高性能</p><blockquote><p>在IO bound的sql场景下，使用MRR与不使用MRR性能提高10倍</p><p>如果数据都在内存中，MRR的作用不大，已经在内存中了， 不存在随机读的概念了(随机读主要针对物理访问)</p></blockquote></li></ul><p>ssd仍然建议开启该特性，多线程下的随机读确实很快，但是我们这里的操作是单线程的，所以顺序访问还是比随机访问更快</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%op%swi%&#x27;</span>;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>[ <span class="number">1.</span> <span class="type">row</span> ]<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">Variable_name <span class="operator">|</span> optimizer_switch</span><br><span class="line"><span class="keyword">Value</span>         <span class="operator">|</span> index_merge<span class="operator">=</span><span class="keyword">on</span>,index_merge_union<span class="operator">=</span><span class="keyword">on</span>,index_merge_sort_union<span class="operator">=</span><span class="keyword">on</span>,index_merge_intersection<span class="operator">=</span><span class="keyword">on</span>,engine_condition_pushdown<span class="operator">=</span><span class="keyword">on</span>,index_condition_pushdown<span class="operator">=</span><span class="keyword">on</span>,mrr<span class="operator">=</span><span class="keyword">on</span>,mrr_cost_based<span class="operator">=</span><span class="keyword">on</span>,block_nested_loop<span class="operator">=</span><span class="keyword">on</span>,batched_key_access<span class="operator">=</span>off,materialization<span class="operator">=</span><span class="keyword">on</span>,semijoin<span class="operator">=</span><span class="keyword">on</span>,loosescan<span class="operator">=</span><span class="keyword">on</span>,firstmatch<span class="operator">=</span><span class="keyword">on</span>,duplicateweedout<span class="operator">=</span><span class="keyword">on</span>,subquery_materialization_cost_based<span class="operator">=</span><span class="keyword">on</span>,use_index_extensions<span class="operator">=</span><span class="keyword">on</span>,condition_fanout_filter<span class="operator">=</span><span class="keyword">on</span>,derived_merge<span class="operator">=</span><span class="keyword">on</span>,prefer_ordering_index<span class="operator">=</span><span class="keyword">on</span></span><br></pre></td></tr></table></figure><p>其中mrr&#x3D;on默认是打开的，不建议关闭</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> employees <span class="keyword">add</span> index idx_hire_date(hire_date);</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> hire_date <span class="operator">&gt;=</span> <span class="string">&#x27;1990-01-01&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+--------+---------+--------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key    <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>    <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+--------+---------+--------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> SIMPLE      <span class="operator">|</span> employees <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>     <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> idx_hire_date <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>  <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span> <span class="operator">|</span> <span class="number">299069</span> <span class="operator">|</span> <span class="number">50.0</span>     <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+------+---------------+--------+---------+--------+--------+----------+-------------+</span></span><br></pre></td></tr></table></figure><blockquote><p>type&#x3D;all，虽然mrr是开启的，但是没有使用mrr，是因为mysql对mrr进行了成本计算mrr_cost_based&#x3D;on</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 临时关闭mrr_cost_based</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> optimizer_switch<span class="operator">=</span><span class="string">&#x27;mrr_cost_based=off&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> explian <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> hire_date <span class="operator">&gt;=</span> <span class="string">&#x27;1990-01-01&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+---------------+---------+--------+--------+----------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key           <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>    <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+---------------+---------+--------+--------+----------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> SIMPLE      <span class="operator">|</span> employees <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span>     <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> idx_hire_date <span class="operator">|</span> idx_hire_date <span class="operator">|</span> <span class="number">3</span>       <span class="operator">|</span> <span class="operator">&lt;</span><span class="keyword">null</span><span class="operator">&gt;</span> <span class="operator">|</span> <span class="number">149534</span> <span class="operator">|</span> <span class="number">100.0</span>    <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span>; <span class="keyword">Using</span> MRR <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-----------+------------+-------+---------------+---------------+---------+--------+--------+----------+----------------------------------+</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="求B-tree的高度"><a href="#求B-tree的高度" class="headerlink" title="求B+tree的高度"></a>求B+tree的高度</h2><ul><li><p>使用innodb_space查看b+tree的高度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">innodb_space -s ibdata1 -T tbl_innodb_ruby/t_people space-index-pages-summary | <span class="built_in">head</span> -n 10 | sed <span class="string">&#x27;s/[,#$@!%~ ][ ]*/\t/g&#x27;</span> | sed <span class="string">&#x27;s/\t/,/g&#x27;</span> | sed <span class="string">&#x27;s/.$//&#x27;</span> | csvlook</span></span><br><span class="line"></span><br><span class="line">| page | index | level |   data |   free | records |</span><br><span class="line">| ---- | ----- | ----- | ------ | ------ | ------- |</span><br><span class="line">|    3 |    85 |     2 |     52 | 16,200 |       4 |</span><br><span class="line">|    4 |    86 |     2 |     60 | 16,192 |       3 |</span><br><span class="line">|    5 |    85 |     0 |  7,483 |  8,705 |     139 |</span><br><span class="line">|    6 |    85 |     0 | 15,066 |  1,050 |     279 |</span><br><span class="line">|    7 |    85 |     0 | 15,120 |    996 |     280 |</span><br><span class="line">|    8 |    85 |     0 | 15,066 |  1,050 |     279 |</span><br><span class="line">|    9 |    85 |     0 | 15,066 |  1,050 |     279 |</span><br><span class="line">|   10 |    86 |     0 |  8,384 |  7,644 |     524 |</span><br><span class="line">|   11 |    86 |     0 | 13,168 |  2,768 |     823 |</span><br></pre></td></tr></table></figure><blockquote><p>其中level+1就是b+tree的高度，其中page3是聚集索引的root页，4是辅助索引的root页，可以使用innodb_space -s ibdata1 -T tbl_innodb_ruby&#x2F;t_people -p 3 page-account</p></blockquote></li><li><p>使用mysql的information_schema和hexdump查看b+tree的高度</p><ul><li><p>首先查看聚集索引root页的page_no</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> t.name,i.name, i.index_id, i.type, i.space, i.page_no <span class="keyword">from</span> innodb_sys_indexes <span class="keyword">as</span> i, innodb_sys_tables <span class="keyword">as</span> t <span class="keyword">where</span> t.table_id <span class="operator">=</span> i.table_id <span class="keyword">and</span> i.space <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">and</span> t.name <span class="keyword">like</span> <span class="string">&#x27;tbl_innodb_ruby%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------------+----------+------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> name                     <span class="operator">|</span> name        <span class="operator">|</span> index_id <span class="operator">|</span> type <span class="operator">|</span> space <span class="operator">|</span> page_no <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------------+----------+------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> tbl_innodb_ruby<span class="operator">/</span>t_people <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">85</span>       <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">53</span>    <span class="operator">|</span> <span class="number">3</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tbl_innodb_ruby<span class="operator">/</span>t_people <span class="operator">|</span> idx_user_id <span class="operator">|</span> <span class="number">86</span>       <span class="operator">|</span> <span class="number">0</span>    <span class="operator">|</span> <span class="number">53</span>    <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tbl_innodb_ruby<span class="operator">/</span>t_user   <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="number">75</span>       <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">48</span>    <span class="operator">|</span> <span class="number">3</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tbl_innodb_ruby<span class="operator">/</span>t_user   <span class="operator">|</span> idx_user_id <span class="operator">|</span> <span class="number">76</span>       <span class="operator">|</span> <span class="number">0</span>    <span class="operator">|</span> <span class="number">48</span>    <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-------------+----------+------+-------+---------+</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出t_people的聚集索引的root页的page_no为3</p></blockquote></li><li><p>使用hexdump查看b+tree的高度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt; </span><span class="language-bash">hexdump -s 49216 -n 2 -C tbl_innodb_ruby/t_people.ibd</span></span><br><span class="line">0000c040  00 02                                             |..|</span><br><span class="line">0000c042</span><br></pre></td></tr></table></figure><blockquote><p>其中49216的计算规则：3 * innobd_page_size + 64 &#x3D; 3 * 16 * 1024 + 64 &#x3D; 49216</p><p>其中02表示的就是聚聚索引的高度为2，因为聚集索引的叶子节点level是0，所以b+tree的高度是2+1&#x3D;3</p></blockquote></li></ul></li></ul>]]></content>
    
    
    <summary type="html">详细介绍mysql的索引和B+tree</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-存储过程和自定义函数</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-009/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-009/</id>
    <published>2022-03-22T16:20:45.000Z</published>
    <updated>2022-04-06T15:44:48.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><ol><li><p>存储过程介绍</p><ul><li><p>存储在数据库端端一组sql语句集</p></li><li><p>用户可以通过存储过程名和参数多次调用的程序模块</p></li><li><p>存储过程的特点</p><ul><li><p>使用灵活，可以使用流程控制语句，自定义变量等完成复杂的业务逻辑</p></li><li><p>提高数据安全性，屏蔽应用程序直接对表的操作，易于进行审计</p></li><li><p>减少网络传输</p></li><li><p>提高代码维护的复杂度，实际使用需要结合业务评估</p></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">[DEFINER <span class="operator">=</span> &#123; <span class="keyword">user</span> <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> &#125;] </span><br><span class="line"><span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]]) </span><br><span class="line">[characteristic ...] routine_body</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意，只有procedure才有in(传入),out(传出),inout(传入传出)参数，自定义函数(只有)默认就是 in。</span></span><br><span class="line">proc_parameter:  </span><br><span class="line">[ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">INOUT</span> ] param_name type</span><br><span class="line"></span><br><span class="line">characteristic:</span><br><span class="line">COMMENT <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125; </span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"></span><br><span class="line">routine_body:</span><br><span class="line">       Valid <span class="keyword">SQL</span> routine statement</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> procedure_name;</span><br></pre></td></tr></table></figure></li><li><p>存储过程举例与流程控制语句</p><ul><li><p>if语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- IF</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line">IF search_condition <span class="keyword">THEN</span> statement_list</span><br><span class="line">[ELSEIF search_condition <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line">    [<span class="keyword">ELSE</span> statement_list]</span><br><span class="line"><span class="keyword">END</span> IF</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">procedure</span> pcd_test_1 (<span class="keyword">in</span> param_a <span class="type">int</span>) <span class="comment">-- 创建一个</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">begin</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">declare</span> a <span class="type">int</span>; <span class="comment">-- delcare声明了该变量的作用域在该procedure中</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     if param_a <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">then</span> <span class="keyword">set</span> a:<span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>         elseif param_a <span class="operator">=</span> <span class="number">10</span> <span class="keyword">then</span> <span class="keyword">set</span> a:<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">else</span> <span class="keyword">set</span> a:<span class="operator">=</span><span class="number">9</span>;</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">end</span> if;</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">end</span>;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前会话中变量a的值 </span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@a</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@a</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="comment">-- 当前会话中a为NULL </span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> pcd_test_1(<span class="number">1</span>); </span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span><span class="number">9</span><span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>mysql&gt; call pcd_test_1(10);<br>+------+<br>|a |<br>+------+<br>| 10|<br>+------+<br>1 row in set (0.00 sec)<br>Query OK, 0 rows affected (0.00 sec)</p><p>mysql&gt; call pcd_test_1(20);<br>+------+<br>|a |<br>+------+<br>| 11|<br>+------+<br>1 row in set (0.00 sec)<br>Query OK, 0 rows affected (0.00 sec)</p><p>mysql&gt; select @a;<br>+------+<br>| @a   |<br>+------+<br>| NULL | -- 使用了declare，使得procedure中a的作用域限制在了procedure内<br>+------+<br>1 row in set (0.00 sec)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- case when 用法</span><br><span class="line">  </span><br><span class="line">  ```sql</span><br><span class="line">  --</span><br><span class="line">  -- CASE WHEN</span><br><span class="line">  --</span><br><span class="line">  -- CASE WHEN 语法 CASE case_value</span><br><span class="line">  WHEN when_value THEN statement_list</span><br><span class="line">      [WHEN when_value THEN</span><br><span class="line">      [ELSE statement_list]</span><br><span class="line">  END CASE</span><br><span class="line">  -- 或者是 CASE</span><br><span class="line">  WHEN search_condition</span><br><span class="line">  [WHEN search_condition THEN statement_list] ... </span><br><span class="line">  [ELSE statement_list]</span><br><span class="line">  END CASE</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>while 用法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- WHILE 循环 --</span></span><br><span class="line"><span class="comment">-- WHILE 语法</span></span><br><span class="line">[begin_label:] WHILE search_condition DO</span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">END</span> WHILE [end_label]</span><br></pre></td></tr></table></figure></li><li><p>repeat 循环用法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- REPEAT 循环 --</span></span><br><span class="line"><span class="comment">-- REPEAT 语法 </span></span><br><span class="line">[begin_label:] REPEAT</span><br><span class="line">    statement_list</span><br><span class="line">UNTIL search_condition</span><br><span class="line"><span class="keyword">END</span> REPEAT [end_label]</span><br></pre></td></tr></table></figure><p>   mysql&gt; delimiter &#x2F;&#x2F;<br>   mysql&gt; create procedure pcd_test_4(in param_1 int)<br>   -&gt; begin<br>   -&gt; SET @x &#x3D; 0; -- 没有使用declare，所以x是会话级别的<br>   -&gt; REPEAT<br>   -&gt; SET @x &#x3D; @x + 1;<br>   -&gt;     UNTIL @x &gt; param_1 END REPEAT;<br>   -&gt; end;&#x2F;&#x2F;<br>   Query OK, 0 rows affected (0.01 sec)</p><p>   mysql&gt; delimiter ;<br>   mysql&gt; call pcd_test_4(10);<br>   Query OK, 0 rows affected (0.00 sec)</p><p>   mysql&gt; select @x; -- x是会话级别的<br>   +------+<br>   | @x |<br>   +------+<br>   |11| -- 一共循环11次(10&gt;10 为False，11 &gt; 10为True，才跳出)<br>   +------+<br>   1 row in set (0.00 sec)</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- loop 循环用法</span><br><span class="line">  </span><br><span class="line">  ```sql</span><br><span class="line">  --</span><br><span class="line">  -- loop语法 </span><br><span class="line">  [begin_label:] LOOP</span><br><span class="line">         statement_list</span><br><span class="line">     END LOOP [end_label]</span><br><span class="line">  -- ITERATE 和label相结合，表示继续从label处执行</span><br><span class="line">  -- LEAVE 和label相结合，表示从label 标记的代码段离开</span><br><span class="line">  </span><br><span class="line">  -- loop 例子</span><br><span class="line">  mysql&gt; delimiter //</span><br><span class="line">  mysql&gt; create procedure pcd_test_5(in param_1 int)</span><br><span class="line">  -&gt; begin</span><br><span class="line">  -&gt;     test_label: loop</span><br><span class="line">  -&gt; set param_1 := param_1 + 1; -- 参数累加</span><br><span class="line">  -&gt; if param_1 &lt; 10 then -- 如果累加的值小于10</span><br><span class="line">  -&gt; iterate test_label; -- 继续执行 标签 test_label</span><br><span class="line">  -&gt; end if;</span><br><span class="line">  -&gt; leave test_label; -- 如果&gt;=10则离开这个test_label(loop)</span><br><span class="line">  -&gt;     end loop test_label;</span><br><span class="line">  -&gt; set @x = param_1; -- 设置会话级别的变􏰄 </span><br><span class="line">  -&gt; end;//</span><br><span class="line">  Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; delimiter ;</span><br><span class="line">  mysql&gt; call pcd_test_5(5); -- 5&lt;10 ，累加5次后&gt;=10为true，离开循环 </span><br><span class="line">  Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">  </span><br><span class="line">  mysql&gt; select @x;</span><br><span class="line">  +------+</span><br><span class="line">  | @x   |</span><br><span class="line">  +------+</span><br><span class="line">  |10| -- 累加到10的 param_1 赋值给 x, 即为10 </span><br><span class="line">  +------+</span><br><span class="line">  1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><ol><li><p>介绍</p><ul><li><p>自定义函数和存储过程类似，但是必须有返回值</p></li><li><p>与内置的函数sum()，max()等使用方法类似</p></li><li><p>自定义函数可能在遍历每条记录中使用</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">[DEFINER <span class="operator">=</span> &#123; <span class="keyword">user</span> <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> &#125;] </span><br><span class="line"><span class="keyword">FUNCTION</span> sp_name ([func_parameter[,...]]) </span><br><span class="line"><span class="keyword">RETURNS</span> type <span class="comment">-- 必须有返回值 </span></span><br><span class="line">[characteristic ...] routine_body</span><br><span class="line"></span><br><span class="line">func_parameter:</span><br><span class="line">       param_name type</span><br><span class="line">type:</span><br><span class="line">       <span class="keyword">Any</span> valid MySQL data type</span><br><span class="line"></span><br><span class="line">characteristic:</span><br><span class="line">       COMMENT <span class="string">&#x27;string&#x27;</span></span><br><span class="line">     <span class="operator">|</span> <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line">     <span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"></span><br><span class="line">routine_body:</span><br><span class="line">    Valid <span class="keyword">SQL</span> routine statement</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> fun_name;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">介绍存储过程，以及自定义函数</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-视图，union和触发器</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-008/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-008/</id>
    <published>2022-03-20T07:53:41.000Z</published>
    <updated>2022-03-22T16:18:32.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ol><li><p>创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line">MySQL hadoop<span class="variable">@localhost</span>:db_test<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">view</span> view_rank <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_rank;</span><br><span class="line"><span class="comment">-- 查看创建视图表结构</span></span><br><span class="line">MySQL hadoop<span class="variable">@localhost</span>:db_test<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> view_rank;</span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line">MySQL hadoop<span class="variable">@localhost</span>:db_test<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">view</span> view_rank;</span><br></pre></td></tr></table></figure><blockquote><p>视图的作用是，可以对开发人员是透明的，可以隐藏部分关键的列</p><p>视图中mysql是虚拟表</p><p>不要创建select * from的视图，因为mysql会把*逐个解析成列</p><p>当原来的表结构发生变化时，视图的表结构时不会发生变化的，因为视图中创建的瞬间，便已经确定好了结构。</p></blockquote><p>注意：mysql中的视图都是虚拟表。每次查询视图，实际上还是去查询原来的表，只是查询的规则是在视图创建时定义好的。</p></li><li><p>视图的算法</p><p>视图的算法有三种：</p><ul><li><p>UNDEFINED：默认方式，由mysql来判断使用下面的哪种方式</p></li><li><p>MERGE：每次通过物理表查询得到结果，把结果merge起来返回</p></li><li><p>TEMPTABLE：产生一张临时表，把数据放入临时表后，客户端再去临时表读取数据</p></li></ul><blockquote><p>TEMPTABLE特点：即使访问条件一样，第二次查询还是去读取物理表中的内容，并重新生成一张临时表，并不会取缓存之前的表。(临时表时memory存储引擎，默认放内存，超过配置大小放入磁盘)，当查询有一个较大的结果集时，使用TEMPTABLE可以快速结束对该物理表的访问，从而可以快速释放这张物理表上占有的资源，然后客户端可以对临时表上的数据进行一些耗时的操作，而不影响原来的物理表。</p></blockquote></li></ol><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><ol><li><p>union的作用是将两个查询的结果集进行合并</p></li><li><p>union必须由两条或者两条以上的select语句组成，语句之间用关键字union分隔。</p></li><li><p>union中的每个查询必须包含相同的列(类型相同或可以隐式转换)， 表达式或聚集函数。</p></li></ol><blockquote><p>如果数据本身具有唯一性，没有重复，建议使用union all，因为union会去重，性能低于union all。</p></blockquote><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><ol><li><p>定义</p><p>触发器的对象是表，当表上出现特定的事件时触发该程序的执行</p></li><li><p>触发器的类型</p><ul><li><p>update： update操作</p></li><li><p>delete：delete操作，replace操作</p><blockquote><p>注意：drop, truncate等DDL操作，不会触发delete</p></blockquote></li><li><p>insert：insert操作，load data操作，replace操作</p></li></ul><blockquote><p>注意：replace操作会触发两次，一次时update类型的触发器，一次时insert类型的触发器</p><p>mysql 5.6版本同一个类型的触发器针对一个表只能由一个</p><p>mysql 5.7也许有多个统一类型的触发器</p></blockquote><p><strong>注意：触发器只触发DML操作，不会触发DDL操作</strong></p></li><li><p>创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">[DEFINER <span class="operator">=</span> &#123; <span class="keyword">user</span> <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> &#125;]</span><br><span class="line"><span class="keyword">TRIGGER</span> trigger_name <span class="comment">-- 触发器名字 </span></span><br><span class="line">trigger_time trigger_event <span class="comment">-- 触发时间和事件 ON tbl_name FOR EACH ROW</span></span><br><span class="line">[trigger_order]</span><br><span class="line">trigger_body</span><br><span class="line"></span><br><span class="line">trigger_time: &#123; BEFORE <span class="operator">|</span> AFTER &#125; <span class="comment">-- 事件之前还是之后触发 </span></span><br><span class="line">trigger_event: &#123; <span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">UPDATE</span> <span class="operator">|</span> <span class="keyword">DELETE</span> &#125; <span class="comment">-- 三个类型 </span></span><br><span class="line">trigger_order: &#123; FOLLOWS <span class="operator">|</span> <span class="keyword">PRECEDES</span> &#125; other_trigger_name</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MySQL hadoop<span class="variable">@localhost</span>:db_test_trigger<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Missing required argument, delimiter</span><br><span class="line"><span class="type">Time</span>: <span class="number">0.000</span>s</span><br><span class="line"><span class="comment">-- new.col:表示的是更新以后的值</span></span><br><span class="line"><span class="comment">-- old.col:表示的是更新以前的值，只读</span></span><br><span class="line">MySQL hadoop<span class="variable">@localhost</span>:db_test_trigger<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">trigger</span> trg_update_score</span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> before <span class="keyword">update</span> <span class="keyword">on</span> test_trigger</span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">begin</span></span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> if new.score <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">set</span> new.score <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> elseif new.score <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">then</span></span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">set</span> new.score <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span></span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">end</span> if;</span><br><span class="line">                                     <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">end</span>; <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure></li><li><p>触发器总结</p><ul><li><p>触发器对性能有损耗，应当非常慎重使用</p></li><li><p>对于物理表，触发器执行失败则整个语句回滚</p></li><li><p>row格式主从复制，触发器不会在从库上执行</p><blockquote><p>因为从库复制的肯定是主库已经提交过的数据，既然已经提交了说明触发器已经被触发过了，所以从库不会执行。</p></blockquote></li><li><p>使用触发器时应当避免递归执行</p></li></ul></li><li><p>触发器模拟物化视图</p><ul><li><p>物化视图的概念</p><ul><li><p>不是基于基表的虚表</p></li><li><p>根据基表实际存在的实表</p></li><li><p>预先计算并保存耗时较多的sql操作结果</p></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建Orders表</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> Orders</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> (order_id <span class="type">int</span> unsigned <span class="keyword">not</span> <span class="keyword">null</span> auto_increment, </span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> product_name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> price <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> amount <span class="type">smallint</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">primary</span> key(order_id));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.13</span> sec) </span><br><span class="line"></span><br><span class="line"><span class="comment">-- -- 插入测试数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> Orders <span class="keyword">values</span> </span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> (<span class="keyword">null</span>, <span class="string">&#x27;cpu&#x27;</span>, <span class="number">135.5</span> ,<span class="number">1</span>), </span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> (<span class="keyword">null</span>, <span class="string">&#x27;memory&#x27;</span>, <span class="number">48.2</span>, <span class="number">3</span>), </span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> (<span class="keyword">null</span>, <span class="string">&#x27;cpu&#x27;</span>, <span class="number">125.6</span>, <span class="number">3</span>), </span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> (<span class="keyword">null</span>, <span class="string">&#x27;cpu&#x27;</span>, <span class="number">105.3</span>, <span class="number">4</span>);</span><br><span class="line">Records: <span class="number">4</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Orders; </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+--------+--------+ </span></span><br><span class="line"><span class="operator">|</span> order_id <span class="operator">|</span> product_name <span class="operator">|</span> price <span class="operator">|</span> amount <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+--------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> cpu <span class="operator">|</span> <span class="number">135.50</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> memory <span class="operator">|</span>  <span class="number">48.20</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> cpu <span class="operator">|</span> <span class="number">125.60</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> cpu <span class="operator">|</span> <span class="number">105.30</span> <span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------------+--------+--------+ </span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立一个模拟物化视图的表(即用这张表来模拟物化视图) </span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> Orders_MV</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> ( product_name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>, </span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> price_sum <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> amount_sum <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> price_avg <span class="type">float</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> orders_cnt <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"> <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">unique</span> index (product_name));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.14</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过Orders表的数据，将测试数据初始化到Orders_MV表中 </span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> Orders_MV</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> product_name, <span class="built_in">sum</span>(price),</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="built_in">sum</span>(amount), <span class="built_in">avg</span>(price), <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">from</span> Orders</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span>     <span class="keyword">group</span> <span class="keyword">by</span> product_name;</span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec) </span><br><span class="line">Records: <span class="number">2</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Orders_MV; </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------------+-----------+------------+ </span></span><br><span class="line"><span class="operator">|</span> product_name <span class="operator">|</span> price_sum <span class="operator">|</span> amount_sum <span class="operator">|</span> price_avg <span class="operator">|</span> orders_cnt <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------------+-----------+------------+ </span></span><br><span class="line"><span class="operator">|</span> cpu <span class="operator">|</span> <span class="number">366.40</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">122.133</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> memory <span class="operator">|</span> <span class="number">48.20</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">48.2</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+-----------+------------+-----------+------------+ </span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tgr_Orders_insert <span class="comment">-- 创建触发器为tgr_Orders_insert </span></span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> Orders <span class="comment">-- 触发器是INSERT类型的，且作用于Orders表 </span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@old</span>_price_sum :<span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 设置临时存放Orders_MV表(模拟物化视图)的字段的变量</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@old</span>_amount_sum :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@old</span>_price_avg :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@old</span>_orders_cnt :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="comment">-- select ... into ... 在更新Orders_MV之前，将Orders_MV中对应某个产品的信息写入临时变量</span></span><br><span class="line">        IFNULL(price_sum, <span class="number">0</span>),</span><br><span class="line">        IFNULL(amount_sum, <span class="number">0</span>),</span><br><span class="line">        IFNULL(price_avg, <span class="number">0</span>),</span><br><span class="line">        IFNULL(orders_cnt, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">Orders_MV</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">product_name <span class="operator">=</span> NEW.product_name <span class="keyword">INTO</span> <span class="variable">@old</span>_price_sum , <span class="variable">@old</span>_amount_sum , <span class="variable">@old</span>_price_avg , <span class="variable">@old</span>_orders_cnt;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@new</span>_price_sum <span class="operator">=</span> <span class="variable">@old</span>_price_sum <span class="operator">+</span> NEW.price; <span class="comment">-- 累加新的值 SET @new_amount_sum = @old_amount_sum + NEW.amount;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@new</span>_orders_cnt <span class="operator">=</span> <span class="variable">@old</span>_orders_cnt <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@new</span>_price_avg <span class="operator">=</span> <span class="variable">@new</span>_price_sum <span class="operator">/</span> <span class="variable">@new</span>_orders_cnt ;</span><br><span class="line">REPLACE <span class="keyword">INTO</span> Orders_MV</span><br><span class="line"><span class="keyword">VALUES</span>(NEW.product_name, <span class="variable">@new</span>_price_sum,</span><br><span class="line"><span class="variable">@new</span>_amount_sum, <span class="variable">@new</span>_price_avg, <span class="variable">@new</span>_orders_cnt );</span><br><span class="line"><span class="comment">-- REPLACE 将对应的物品(唯一索引)的字段值替换new_xxx的值 </span></span><br><span class="line"><span class="keyword">END</span>;<span class="operator">/</span><span class="operator">/</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> Orders <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;ssd&#x27;</span>, <span class="number">299</span>, <span class="number">3</span>); </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> Orders <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;memory&#x27;</span>, <span class="number">47.9</span>, <span class="number">5</span>); </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Orders_MV;</span><br></pre></td></tr></table></figure></li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li><p>ifnull函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果test为NULL，则ifnull返回100</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> ifnull(<span class="variable">@test</span>, <span class="number">100</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> ifnull(<span class="variable">@test</span>, <span class="number">100</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> <span class="comment">-- ifnull函数return的值是100 </span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@test</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@test</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="comment">-- 但是test还是NULL </span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给test变􏰃赋值为200</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="variable">@test</span>:<span class="operator">=</span><span class="number">200</span>;  </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再次ifnull判断，此时test不为null，则返回test变量的值 </span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> ifnull(<span class="variable">@test</span>, <span class="number">100</span>); </span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> ifnull(<span class="variable">@test</span>, <span class="number">100</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> <span class="comment">-- test不为null。返回test的值200</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+ </span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>select into用法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@id</span>_1; </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@id</span>_1 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="comment">-- 当前变􏰃id_1为null </span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@score</span>_1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@score</span>_1 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span><span class="operator">|</span> <span class="comment">-- 当前变􏰃score_1为null </span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_rank_2;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="number">40</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">40</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 选择id=1的记录，将对应的id和score赋值给变量 id_1 和 score_1</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test_rank_2</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">into</span> <span class="variable">@id</span>_1, <span class="variable">@score</span>_1;</span><br><span class="line"> Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@id</span>_1;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@id</span>_1 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@score</span>_1;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@score</span>_1 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">介绍mysql视图的创建，union和触发器的使用</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习笔记-select介绍</title>
    <link href="https://theme-next.js.org/mysql/learn-mysql-007/"/>
    <id>https://theme-next.js.org/mysql/learn-mysql-007/</id>
    <published>2022-03-20T06:48:26.000Z</published>
    <updated>2022-03-20T07:53:15.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><blockquote><p>子查询就是指在一个select语句中嵌套另一个select语句，同时，子查询必须包含括号，</p><p>mysql 5.6.x版本之前，mysql的子查询性能较差，但是从5.6开始，不存在性能差的问题</p></blockquote><ol><li><p>子查询的使用</p><p>如果外部查询的列的结果和子查询的列的结果比较得到为true的话，则返回比较值为true的外查询的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span>  t1 (a <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.15</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span>  t2 (a <span class="type">int</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.14</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">10</span>),(<span class="number">4</span>); </span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec) </span><br><span class="line">Records: <span class="number">2</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="number">12</span>),(<span class="number">13</span>),(<span class="number">5</span>); </span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec) </span><br><span class="line">Records: <span class="number">3</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> <span class="comment">-- t1中10，4比12小</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> <span class="comment">-- t1中10，4比13小</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span> <span class="operator">|</span> <span class="comment">-- t1中10比5大，4比5小 +------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- t1中a列的值，只要大于(12,13,4)中任意一值</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">where</span> a <span class="operator">&gt;</span> <span class="keyword">any</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> (<span class="keyword">select</span> a <span class="keyword">from</span> t2);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个查询可以解释为，t1表内a列的值， 大于 t2表中a列的任意(any)一个值，则返回t1.a的记录</span></span><br></pre></td></tr></table></figure><blockquote><p>any关键字必须和一个比较操作符一起使用：&#x3D; , &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , &lt;&gt;</p><p>子查询中 SOME 和 ANY 是同一个意思</p></blockquote></li><li><p>in</p><p>in是any的一种特殊情况：&quot;in&quot;  equals &quot;&#x3D; any&quot;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">5</span>); <span class="comment">-- 向t1中插入一个t2中存在的值 5 </span></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="operator">=</span> <span class="keyword">any</span>(<span class="keyword">select</span> a <span class="keyword">from</span> t2); <span class="comment">-- t1.a==t2.a 的只有5</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span><span class="number">5</span><span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="keyword">in</span> (<span class="keyword">select</span> a <span class="keyword">from</span> t2); <span class="comment">-- in的结果等同于 =any 的结果</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span><span class="number">5</span><span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>select a from t1 where a in (select a from t2); 是比较常用的一种语法</p></blockquote></li><li><p>all</p><p>如果外部查询的列的结果和子查询的列的 所有结果 比较得到为True的话，则返回比较值为True的(外查询)的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> t1; <span class="comment">-- 清空t1</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> t2; <span class="comment">-- 清空t2</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.10</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">10</span>),(<span class="number">4</span>); </span><br><span class="line">Query OK, <span class="number">2</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec) </span><br><span class="line">Records: <span class="number">2</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="number">5</span>),(<span class="number">4</span>),(<span class="number">3</span>); </span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec) </span><br><span class="line">Records: <span class="number">3</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> a <span class="keyword">from</span> t2); </span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>a <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> <span class="comment">-- (10 &gt; 5, 4, 3为True)而(4 &gt;5, 4, 3为False) </span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>all关键词必须与一个比较操作符一起使用，not in 是 &lt;&gt; all的别名</p></blockquote></li><li><p>子查询的分类</p><ul><li><p>独立子查询：不依赖外部查询而运行的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>相关子查询：引用了外部查询列的子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="keyword">in</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> t1.a <span class="operator">=</span> t2.a);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子查询的优化</p><ul><li><p>mysql5.6之前</p><p>在mysql5.6之前，优化器会把子查询重写成exists的形式</p></li><li><p>mysql5.6之后</p><p>在mysql5.6之后，优化器不会将子查询重写成exits的形式，而是自动优化，性能有了大幅提升</p></li></ul><blockquote><p>可通过explain extended来查询子查询优化的结果。</p></blockquote></li><li><p>包含null值的not in</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">select</span> <span class="keyword">null</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>) <span class="operator">/</span><span class="operator">/</span> <span class="keyword">null</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>) <span class="operator">/</span><span class="operator">/</span> <span class="number">1</span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>) <span class="operator">/</span><span class="operator">/</span> <span class="number">1</span></span><br><span class="line"><span class="number">4.</span> <span class="keyword">select</span> <span class="keyword">null</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>); <span class="operator">/</span><span class="operator">/</span> <span class="keyword">null</span></span><br><span class="line"><span class="number">5.</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>); <span class="operator">/</span><span class="operator">/</span> <span class="number">0</span> 等于 <span class="keyword">select</span> i <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">null</span>)的结果却反 </span><br></pre></td></tr></table></figure><blockquote><p>对于包含了 NULL 值的 IN 操作，总是返回 True 或者 NULL<br>NOT IN 返回 NOT True (False) 或者 NOT NULL (NULL)</p></blockquote></li></ol><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><ol><li><p>更新有关系的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t5 (a <span class="type">int</span>, b <span class="type">int</span>); </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.14</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>); </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t5; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span> b <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+ </span></span><br><span class="line"><span class="operator">|</span><span class="number">1</span> <span class="operator">|</span><span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> t5 <span class="keyword">set</span> a<span class="operator">=</span>a<span class="operator">+</span><span class="number">1</span>, b<span class="operator">=</span>a <span class="keyword">where</span> a<span class="operator">=</span><span class="number">1</span>; </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span> Changed: <span class="number">1</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t5; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> a <span class="operator">|</span>b <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="comment">-- SQL Server和Oracle中得到的值是2, 1 </span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> se</span><br></pre></td></tr></table></figure></li><li><p>显示行号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@rn1</span>:<span class="operator">=</span><span class="variable">@rn1</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> rownumber, emp_no, gender <span class="keyword">from</span> employees, (<span class="keyword">select</span> <span class="variable">@rn1</span>:<span class="operator">=</span><span class="number">0</span>) <span class="keyword">as</span> a limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：&quot;:&#x3D;&quot; 是赋值</p></blockquote></li><li><p>rank</p><p>给出不同的用户的分数，然后根据分数计算排名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test_rank(id <span class="type">int</span>, score <span class="type">int</span>); </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.16</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test_rank <span class="keyword">values</span>(<span class="number">1</span>, <span class="number">10</span>), (<span class="number">2</span>, <span class="number">20</span>), (<span class="number">3</span>, <span class="number">30</span>), (<span class="number">4</span>, <span class="number">30</span>), (<span class="number">5</span>, <span class="number">40</span>), (<span class="number">6</span>, <span class="number">40</span>); </span><br><span class="line">Query OK, <span class="number">6</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line">Records: <span class="number">6</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">MySQL hadoop<span class="variable">@localhost</span>:db_test<span class="operator">&gt;</span> <span class="keyword">select</span> id, score, <span class="keyword">case</span> <span class="keyword">when</span> <span class="variable">@pre</span>_value <span class="operator">=</span> score <span class="keyword">then</span> <span class="variable">@rank</span>_count <span class="keyword">when</span> <span class="variable">@pre</span>_value :<span class="operator">=</span> score <span class="keyword">then</span> <span class="variable">@rank</span>_count :<span class="operator">=</span> <span class="variable">@rank</span>_count <span class="operator">+</span> <span class="number">1</span> <span class="keyword">end</span> <span class="keyword">as</span> rank_number <span class="keyword">from</span> test_rank, (<span class="keyword">select</span> <span class="variable">@pre</span>_value :<span class="operator">=</span> <span class="keyword">null</span>, <span class="variable">@rank</span>_count :<span class="operator">=</span> <span class="number">0</span>) <span class="keyword">as</span> t <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><blockquote><p>sql说明：when @pre_value &#x3D; score then @rank_count 相等则pre_value不变，并返回rank_count，第一次为null，不想等，执行下一个when语句</p><p>when @pre_value :&#x3D; score then @rank_count :&#x3D; @rank_count + 1 不等，则第N行的score赋值给pre_value，并且rank_count增加1</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">mysql的子查询</summary>
    
    
    
    <category term="mysql" scheme="https://theme-next.js.org/categories/mysql/"/>
    
    
    <category term="mysql5.7" scheme="https://theme-next.js.org/tags/mysql5-7/"/>
    
  </entry>
  
</feed>
